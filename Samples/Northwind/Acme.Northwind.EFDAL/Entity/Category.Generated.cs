//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Runtime.Serialization;
using System.Data.Objects.DataClasses;
using System.Xml.Serialization;
using System.ComponentModel;
using System.Collections.Generic;
using System.Data.Objects;
using System.Text;
using Acme.Northwind.EFDAL;
using nHydrate.EFCore.DataAccess;
using nHydrate.EFCore.EventArgs;
using System.Text.RegularExpressions;
using System.Linq.Expressions;
using System.Data.Linq;

namespace Acme.Northwind.EFDAL.Entity
{
	/// <summary>
	/// The collection to hold 'Category' entities
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("nHydrateModelGenerator", "5.1.2")]
	[EdmEntityTypeAttribute(NamespaceName = "Acme.Northwind.EFDAL.Entity", Name = "Category")]
	[Serializable]
	[DataContractAttribute(IsReference = true)]
	[nHydrate.EFCore.Attributes.FieldNameConstantsAttribute(typeof(Acme.Northwind.EFDAL.Entity.Category.FieldNameConstants))]
	[System.ComponentModel.DataAnnotations.MetadataType(typeof(Acme.Northwind.EFDAL.Interfaces.Entity.Metadata.CategoryMetadata))]
	[nHydrate.EFCore.Attributes.EntityMetadata("Category", false, true, true, true, "", true, false, false, "dbo")]
	public partial class Category : nHydrate.EFCore.DataAccess.NHEntityObject, nHydrate.EFCore.DataAccess.IBusinessObject, Acme.Northwind.EFDAL.IEntityWithContext, System.ComponentModel.IDataErrorInfo, Acme.Northwind.EFDAL.Interfaces.Entity.ICategory, System.ICloneable, System.IEquatable<Acme.Northwind.EFDAL.Interfaces.Entity.ICategory>, nHydrate.EFCore.DataAccess.IAuditable
	{
		#region FieldImageConstants Enumeration

		/// <summary>
		/// An enumeration of this object's image type fields
		/// </summary>
		public enum FieldImageConstants
		{
			/// <summary>
			/// Field mapping for the image parameter 'Picture' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the image parameter 'Picture' property")]
			Picture,
		}

		#endregion

		#region FieldNameConstants Enumeration

		/// <summary>
		/// Enumeration to define each property that maps to a database field for the 'Category' table.
		/// </summary>
		public enum FieldNameConstants
		{
			/// <summary>
			/// Field mapping for the 'CategoryID' property
			/// </summary>
			[nHydrate.EFCore.Attributes.PrimaryKeyAttribute()]
			[System.ComponentModel.ReadOnlyAttribute(true)]
			[System.ComponentModel.Description("Field mapping for the 'CategoryID' property")]
			CategoryID,
			/// <summary>
			/// Field mapping for the 'CategoryName' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'CategoryName' property")]
			CategoryName,
			/// <summary>
			/// Field mapping for the 'Description' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'Description' property")]
			Description,
			/// <summary>
			/// Field mapping for the 'Picture' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'Picture' property")]
			Picture,
			/// <summary>
			/// Field mapping for the 'CreatedBy' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'CreatedBy' property")]
			CreatedBy,
			/// <summary>
			/// Field mapping for the 'CreatedDate' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'CreatedDate' property")]
			CreatedDate,
			/// <summary>
			/// Field mapping for the 'ModifiedBy' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'ModifiedBy' property")]
			ModifiedBy,
			/// <summary>
			/// Field mapping for the 'ModifiedDate' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'ModifiedDate' property")]
			ModifiedDate,
		}
		#endregion

		#region Constructors

		/// <summary>
		/// Method called when an instance of this class is created
		/// </summary>
		partial void OnCreated();

		/// <summary>
		/// Initializes a new instance of the Acme.Northwind.EFDAL.Entity.Category class
		/// </summary>
		public Category()
		{
			this.OnCreated();
		}

		#endregion

		#region Properties

		/// <summary>
		/// The property that maps back to the database 'Categories.CategoryID' field.
		/// </summary>
		/// <remarks>Field: [Categories].[CategoryID], Not Nullable, Primary Key, Unique, Indexed</remarks>
		[System.ComponentModel.Browsable(true)]
		[EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
		[DataMemberAttribute()]
		[System.ComponentModel.DisplayName("CategoryID")]
		[System.ComponentModel.DataAnnotations.Key()]
		[System.ComponentModel.ReadOnly(true)]
		[System.Diagnostics.DebuggerNonUserCode]
		public virtual int CategoryID
		{
			get { return _categoryID; }
			set
			{
				if (value == _categoryID) return;
				ReportPropertyChanging("CategoryID");
				_categoryID = value;
				ReportPropertyChanged("CategoryID");
			}
		}

		/// <summary>
		/// The property that maps back to the database 'Categories.CategoryName' field.
		/// </summary>
		/// <remarks>Field: [Categories].[CategoryName], Field Length: 15, Not Nullable, Indexed</remarks>
		[System.ComponentModel.Browsable(true)]
		[EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = false)]
		[DataMemberAttribute()]
		[System.ComponentModel.DisplayName("CategoryName")]
		[System.Diagnostics.DebuggerNonUserCode]
		public virtual string CategoryName
		{
			get { return _categoryName; }
			set
			{
				if (value == _categoryName) return;
				if ((value != null) && (value.Length > GetMaxLength(FieldNameConstants.CategoryName))) throw new Exception(string.Format(GlobalValues.ERROR_DATA_TOO_BIG, value, "Category.CategoryName", GetMaxLength(FieldNameConstants.CategoryName)));
				var eventArg = new nHydrate.EFCore.EventArgs.ChangingEventArgs<string>(value, "CategoryName");
				//this.OnCategoryNameChanging(eventArg);
				if (eventArg.Cancel) return;
				ReportPropertyChanging("CategoryName");
				_categoryName = eventArg.Value;
				ReportPropertyChanged("CategoryName");
				//this.OnCategoryNameChanged(eventArg);
			}
		}

		/// <summary>
		/// The property that maps back to the database 'Categories.Description' field.
		/// </summary>
		/// <remarks>Field: [Categories].[Description], Nullable</remarks>
		[System.ComponentModel.Browsable(true)]
		[EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = true)]
		[DataMemberAttribute()]
		[System.ComponentModel.DisplayName("Description")]
		[System.Diagnostics.DebuggerNonUserCode]
		public virtual string Description
		{
			get { return _description; }
			set
			{
				if (value == _description) return;
				if ((value != null) && (value.Length > GetMaxLength(FieldNameConstants.Description))) throw new Exception(string.Format(GlobalValues.ERROR_DATA_TOO_BIG, value, "Category.Description", GetMaxLength(FieldNameConstants.Description)));
				var eventArg = new nHydrate.EFCore.EventArgs.ChangingEventArgs<string>(value, "Description");
				//this.OnDescriptionChanging(eventArg);
				if (eventArg.Cancel) return;
				ReportPropertyChanging("Description");
				_description = eventArg.Value;
				ReportPropertyChanged("Description");
				//this.OnDescriptionChanged(eventArg);
			}
		}

		/// <summary>
		/// The property that maps back to the database 'Categories.Picture' field.
		/// </summary>
		/// <remarks>Field: [Categories].[Picture], Nullable</remarks>
		[System.ComponentModel.Browsable(true)]
		[EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = true)]
		[DataMemberAttribute()]
		[System.ComponentModel.DisplayName("Picture")]
		[System.Diagnostics.DebuggerNonUserCode]
		public virtual System.Byte[] Picture
		{
			get { return _picture; }
			set
			{
				if (value == _picture) return;
				var eventArg = new nHydrate.EFCore.EventArgs.ChangingEventArgs<System.Byte[]>(value, "Picture");
				//this.OnPictureChanging(eventArg);
				if (eventArg.Cancel) return;
				ReportPropertyChanging("Picture");
				_picture = eventArg.Value;
				ReportPropertyChanged("Picture");
				//this.OnPictureChanged(eventArg);
			}
		}

		/// <summary>
		/// The audit field for the 'Created By' parameter.
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = true)]
		[DataMemberAttribute()]
		[System.Diagnostics.DebuggerNonUserCode]
		public virtual string CreatedBy
		{
			get { return _createdby; }
			protected internal set
			{
				var eventArg = new nHydrate.EFCore.EventArgs.ChangingEventArgs<string>(value, "CreatedBy");
				//OnCreatedByChanging(eventArg);
				if (eventArg.Cancel) return;
				ReportPropertyChanging("CreatedBy");
				_createdby = eventArg.Value;
				ReportPropertyChanged("CreatedBy");
				//OnCreatedByChanged(eventArg);
			}
		}

		/// <summary />
		protected string _createdby;

		/// <summary>
		/// The audit field for the 'Created Date' parameter.
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = true)]
		[DataMemberAttribute()]
		[System.Diagnostics.DebuggerNonUserCode]
		public virtual DateTime? CreatedDate
		{
			get { return _createddate; }
			protected internal set
			{
				var eventArg = new nHydrate.EFCore.EventArgs.ChangingEventArgs<DateTime?>(value, "CreatedDate");
				//OnCreatedDateChanging(eventArg);
				if (eventArg.Cancel) return;
				ReportPropertyChanging("CreatedDate");
				_createddate = eventArg.Value;
				ReportPropertyChanged("CreatedDate");
				//OnCreatedDateChanged(eventArg);
			}
		}

		/// <summary />
		protected DateTime? _createddate;

		/// <summary>
		/// The audit field for the 'Modified By' parameter.
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = true)]
		[DataMemberAttribute()]
		[System.Diagnostics.DebuggerNonUserCode]
		public virtual string ModifiedBy
		{
			get { return _modifiedby; }
			protected internal set
			{
				var eventArg = new nHydrate.EFCore.EventArgs.ChangingEventArgs<string>(value, "ModifiedBy");
				//OnModifiedByChanging(eventArg);
				if (eventArg.Cancel) return;
				ReportPropertyChanging("ModifiedBy");
				_modifiedby = eventArg.Value;
				ReportPropertyChanged("ModifiedBy");
				//OnModifiedByChanged(eventArg);
			}
		}

		/// <summary />
		protected string _modifiedby;

		/// <summary>
		/// The audit field for the 'Modified Date' parameter.
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = true)]
		[DataMemberAttribute()]
		[System.Diagnostics.DebuggerNonUserCode]
		public virtual DateTime? ModifiedDate
		{
			get { return _modifieddate; }
			protected internal set
			{
				var eventArg = new nHydrate.EFCore.EventArgs.ChangingEventArgs<DateTime?>(value, "ModifiedDate");
				//OnModifiedDateChanging(eventArg);
				if (eventArg.Cancel) return;
				ReportPropertyChanging("ModifiedDate");
				_modifieddate = eventArg.Value;
				ReportPropertyChanged("ModifiedDate");
				//OnModifiedDateChanged(eventArg);
			}
		}

		/// <summary />
		protected DateTime? _modifieddate;

		/// <summary>
		/// The audit field for the 'Timestamp' parameter.
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = true)]
		[DataMemberAttribute()]
		[System.Diagnostics.DebuggerNonUserCode]
		public virtual byte[] Timestamp
		{
			get { return _timestamp; }
			protected internal set
			{
				var eventArg = new nHydrate.EFCore.EventArgs.ChangingEventArgs<byte[]>(value, "Timestamp");
				//OnTimestampChanging(eventArg);
				if (eventArg.Cancel) return;
				ReportPropertyChanging("Timestamp");
				_timestamp = eventArg.Value;
				ReportPropertyChanged("Timestamp");
				//OnTimestampChanged(eventArg);
			}
		}

		/// <summary />
		protected byte[] _timestamp;

		#endregion

		#region Property Holders

		/// <summary />
		protected int _categoryID;
		/// <summary />
		protected string _categoryName;
		/// <summary />
		protected string _description;
		/// <summary />
		protected System.Byte[] _picture;

		#endregion

		#region GetMaxLength

		/// <summary>
		/// Gets the maximum size of the field value.
		/// </summary>
		public static int GetMaxLength(FieldNameConstants field)
		{
			switch (field)
			{
				case FieldNameConstants.CategoryID:
					return 0;
				case FieldNameConstants.CategoryName:
					return 15;
				case FieldNameConstants.Description:
					return int.MaxValue;
				case FieldNameConstants.Picture:
					return int.MaxValue;
			}
			return 0;
		}

		int nHydrate.EFCore.DataAccess.IReadOnlyBusinessObject.GetMaxLength(Enum field)
		{
			return GetMaxLength((FieldNameConstants)field);
		}

		#endregion

		#region GetFieldNameConstants

		System.Type nHydrate.EFCore.DataAccess.IReadOnlyBusinessObject.GetFieldNameConstants()
		{
			return typeof(FieldNameConstants);
		}

		#endregion

		#region GetFieldType

		/// <summary>
		/// Gets the system type of a field on this object
		/// </summary>
		public static System.Type GetFieldType(FieldNameConstants field)
		{
			if (field.GetType() != typeof(FieldNameConstants))
				throw new Exception("The '" + field.GetType().ReflectedType.ToString() + ".FieldNameConstants' value is not valid. The field parameter must be of type 'Acme.Northwind.EFDAL.Entity.Category.FieldNameConstants'.");

			switch ((FieldNameConstants)field)
			{
				case FieldNameConstants.CategoryID: return typeof(int);
				case FieldNameConstants.CategoryName: return typeof(string);
				case FieldNameConstants.Description: return typeof(string);
				case FieldNameConstants.Picture: return typeof(System.Byte[]);
			}
			return null;
		}

		System.Type nHydrate.EFCore.DataAccess.IReadOnlyBusinessObject.GetFieldType(Enum field)
		{
			if (field.GetType() != typeof(FieldNameConstants))
				throw new Exception("The '" + field.GetType().ReflectedType.ToString() + ".FieldNameConstants' value is not valid. The field parameter must be of type 'Acme.Northwind.EFDAL.Entity.Category.FieldNameConstants'.");

			return GetFieldType((Acme.Northwind.EFDAL.Entity.Category.FieldNameConstants)field);
		}

		#endregion

		#region Get/Set Value

		object nHydrate.EFCore.DataAccess.IReadOnlyBusinessObject.GetValue(System.Enum field)
		{
			return ((nHydrate.EFCore.DataAccess.IReadOnlyBusinessObject)this).GetValue(field, null);
		}

		object nHydrate.EFCore.DataAccess.IReadOnlyBusinessObject.GetValue(System.Enum field, object defaultValue)
		{
			if (field.GetType() != typeof(FieldNameConstants))
				throw new Exception("The '" + field.GetType().ReflectedType.ToString() + ".FieldNameConstants' value is not valid. The field parameter must be of type '" + this.GetType().ToString() + ".FieldNameConstants'.");
			return this.GetValue((FieldNameConstants)field, defaultValue);
		}

		void nHydrate.EFCore.DataAccess.IBusinessObject.SetValue(System.Enum field, object newValue)
		{
			if (field.GetType() != typeof(FieldNameConstants))
				throw new Exception("The '" + field.GetType().ReflectedType.ToString() + ".FieldNameConstants' value is not valid. The field parameter must be of type '" + this.GetType().ToString() + ".FieldNameConstants'.");
			this.SetValue((FieldNameConstants)field, newValue);
		}

		#endregion

		#region PrimaryKey

		/// <summary>
		/// Hold the primary key for this object
		/// </summary>
		protected nHydrate.EFCore.DataAccess.IPrimaryKey _primaryKey = null;
		nHydrate.EFCore.DataAccess.IPrimaryKey nHydrate.EFCore.DataAccess.IReadOnlyBusinessObject.PrimaryKey
		{
			get { return null; }
		}

		#endregion

		#region IsParented

		/// <summary>
		/// Determines if this object is part of a collection or is detached
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		public virtual bool IsParented
		{
			get { return (this.EntityState != System.Data.EntityState.Detached); }
		}

		#endregion

		#region Clone

		/// <summary>
		/// Creates a shallow copy of this object
		/// </summary>
		public virtual object Clone()
		{
			var newItem = new Category();
			newItem._categoryID = this._categoryID;
			newItem._categoryName = this._categoryName;
			newItem._description = this._description;
			newItem._picture = this._picture;
			return newItem;
		}

		/// <summary>
		/// Creates a shallow copy of this object
		/// </summary>
		public static Category Clone(Acme.Northwind.EFDAL.Interfaces.Entity.ICategory item)
		{
			var newItem = new Category();
			newItem.CategoryID = item.CategoryID;
			newItem.CategoryName = item.CategoryName;
			newItem.Description = item.Description;
			newItem.Picture = item.Picture;
			return newItem;
		}

		#endregion

		#region IsEquivalent

		/// <summary>
		/// Determines if all of the fields for the specified object exactly matches the current object.
		/// </summary>
		/// <param name="item">The object to compare</param>
		public override bool IsEquivalent(nHydrate.EFCore.DataAccess.INHEntityObject item)
		{
			return ((System.IEquatable<Acme.Northwind.EFDAL.Interfaces.Entity.ICategory>)this).Equals(item as Acme.Northwind.EFDAL.Interfaces.Entity.ICategory);
		}

		#endregion

		#region GetValue

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		public object GetValue(FieldNameConstants field)
		{
			return GetValue(field, null);
		}

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		public object GetValue(FieldNameConstants field, object defaultValue)
		{
			if (field == FieldNameConstants.CategoryID)
				return this.CategoryID;
			if (field == FieldNameConstants.CategoryName)
				return this.CategoryName;
			if (field == FieldNameConstants.Description)
				return ((this.Description == null) ? defaultValue : this.Description);
			if (field == FieldNameConstants.Picture)
				return ((this.Picture == null) ? defaultValue : this.Picture);
			if (field == FieldNameConstants.CreatedBy)
				return ((this.CreatedBy == null) ? defaultValue : this.CreatedBy);
			if (field == FieldNameConstants.CreatedDate)
				return ((this.CreatedDate == null) ? defaultValue : this.CreatedDate);
			if (field == FieldNameConstants.ModifiedBy)
				return ((this.ModifiedBy == null) ? defaultValue : this.ModifiedBy);
			if (field == FieldNameConstants.ModifiedDate)
				return ((this.ModifiedDate == null) ? defaultValue : this.ModifiedDate);
			throw new Exception("Field '" + field.ToString() + "' not found!");
		}

		#endregion

		#region SetValue

		/// <summary>
		/// Assigns a value to a field on this object.
		/// </summary>
		/// <param name="field">The field to set</param>
		/// <param name="newValue">The new value to assign to the field</param>
		public virtual void SetValue(FieldNameConstants field, object newValue)
		{
			SetValue(field, newValue, false);
		}

		/// <summary>
		/// Assigns a value to a field on this object.
		/// </summary>
		/// <param name="field">The field to set</param>
		/// <param name="newValue">The new value to assign to the field</param>
		/// <param name="fixLength">Determines if the length should be truncated if too long. When false, an error will be raised if data is too large to be assigned to the field.</param>
		public virtual void SetValue(FieldNameConstants field, object newValue, bool fixLength)
		{
			if (field == FieldNameConstants.CategoryID)
			{
				throw new Exception("Field '" + field.ToString() + "' is a primary key and cannot be set!");
			}
			else if (field == FieldNameConstants.CategoryName)
			{
				this.CategoryName = GlobalValues.SetValueHelperInternal((string)newValue, fixLength, GetMaxLength(field));
			}
			else if (field == FieldNameConstants.Description)
			{
				this.Description = GlobalValues.SetValueHelperInternal((string)newValue, fixLength, GetMaxLength(field));
			}
			else if (field == FieldNameConstants.Picture)
			{
				if (newValue == null)
				{
					this.Picture = null;
				}
				else
				{
					this.Picture = (System.Byte[])newValue;
				}
			}
			else
				throw new Exception("Field '" + field.ToString() + "' not found!");
		}

		#endregion

		#region Navigation Properties

		/// <summary>
		/// The back navigation definition for walking [Category]->[Product]
		/// Relationship Links: 
		/// [Categories.CategoryID = Products.CategoryID] (Optional)
		/// </summary>
		[XmlIgnoreAttribute()]
		[SoapIgnoreAttribute()]
		[EdmRelationshipNavigationPropertyAttribute("Acme.Northwind.EFDAL.Entity", "FK__Product_Category", "ProductList")]
		public virtual EntityCollection<Acme.Northwind.EFDAL.Entity.Product> ProductList
		{
			get
			{
				//Eager load
				var retval = ((System.Data.Objects.DataClasses.IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Acme.Northwind.EFDAL.Entity.Product>("Acme.Northwind.EFDAL.Entity.FK__Product_Category", "ProductList");
				if (!retval.IsLoaded  && this.EntityState != System.Data.EntityState.Added && this.EntityState != System.Data.EntityState.Detached)
				{
					retval.Load();
				}
				return retval;
			}
		}

		#region ICategory Interface

		System.Collections.Generic.ICollection<Acme.Northwind.EFDAL.Interfaces.Entity.IProduct> Acme.Northwind.EFDAL.Interfaces.Entity.ICategory.ProductList
		{
			get { return (System.Collections.Generic.ICollection<Acme.Northwind.EFDAL.Interfaces.Entity.IProduct>)(System.Collections.Generic.ICollection<Product>)this.ProductList; }
		}

		#endregion

		#endregion

		#region Static SQL Methods

		internal static string GetFieldAliasFromFieldNameSqlMapping(string alias)
		{
			alias = alias.Replace("[", string.Empty).Replace("]", string.Empty);
			switch (alias.ToLower())
			{
				case "categoryid": return "categoryid";
				case "categoryname": return "categoryname";
				case "description": return "description";
				case "picture": return "picture";
				case "createddate": return "createddate";
				case "createdby": return "createdby";
				case "modifieddate": return "modifieddate";
				case "modifiedby": return "modifiedby";
				case "timestamp": return "timestamp";
				default: throw new Exception("The select clause is not valid.");
			}
		}

		internal static string GetTableFromFieldAliasSqlMapping(string alias)
		{
			switch (alias.ToLower())
			{
				case "categoryid": return "Categories";
				case "categoryname": return "Categories";
				case "description": return "Categories";
				case "picture": return "Categories";
				case "createdby": return "Categories";
				case "createddate": return "Categories";
				case "modifiedby": return "Categories";
				case "modifieddate": return "Categories";
				case "timestamp": return "Categories";
				default: throw new Exception("The select clause is not valid.");
			}
		}

		internal static string GetTableFromFieldNameSqlMapping(string field)
		{
			switch (field.ToLower())
			{
				case "categoryid": return "Categories";
				case "categoryname": return "Categories";
				case "description": return "Categories";
				case "picture": return "Categories";
				case "createdby": return "Categories";
				case "createddate": return "Categories";
				case "modifiedby": return "Categories";
				case "modifieddate": return "Categories";
				case "timestamp": return "Categories";
				default: throw new Exception("The select clause is not valid.");
			}
		}

		internal static string GetRemappedLinqSql(string sql, string parentAlias, LinqSQLFromClauseCollection childTables)
		{
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[categoryid\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "Categories") + "].[categoryid]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[categoryname\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "Categories") + "].[categoryname]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[description\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "Categories") + "].[description]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[picture\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "Categories") + "].[picture]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[createdby\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "Categories") + "].[createdby]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[createddate\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "Categories") + "].[createddate]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[modifiedby\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "Categories") + "].[modifiedby]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[modifieddate\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "Categories") + "].[modifieddate]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[timestamp\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "Categories") + "].[timestamp]", RegexOptions.IgnoreCase);
			return sql;
		}

		#endregion

		#region DeleteData

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		/// <param name="where">The expression that determines the records deleted</param>
		/// <returns>The number of rows deleted</returns>
		public static int DeleteData(Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, bool>> where)
		{
			return DeleteData(where, new nHydrate.EFCore.DataAccess.QueryOptimizer(), Acme.Northwind.EFDAL.NorthwindEntities.GetConnectionString());
		}

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		/// <param name="where">The expression that determines the records deleted</param>
		/// <param name="connectionString">The database connection string to use for this access</param>
		/// <returns>The number of rows deleted</returns>
		public static int DeleteData(Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, bool>> where, string connectionString)
		{
			return DeleteData(where, new nHydrate.EFCore.DataAccess.QueryOptimizer(), connectionString);
		}

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		/// <param name="where">The expression that determines the records deleted</param>
		/// <param name="optimizer">The optimization object to use for running queries</param>
		/// <returns>The number of rows deleted</returns>
		public static int DeleteData(Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, bool>> where, nHydrate.EFCore.DataAccess.QueryOptimizer optimizer)
		{
			return DeleteData(where, optimizer, Acme.Northwind.EFDAL.NorthwindEntities.GetConnectionString());
		}

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		/// <param name="where">The expression that determines the records deleted</param>
		/// <param name="optimizer">The optimization object to use for running queries</param>
		/// <param name="connectionString">The database connection string to use for this access</param>
		/// <returns>The number of rows deleted</returns>
		public static int DeleteData(Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, bool>> where, nHydrate.EFCore.DataAccess.QueryOptimizer optimizer, string connectionString)
		{
			if (optimizer == null)
				optimizer = new nHydrate.EFCore.DataAccess.QueryOptimizer();

			var dc = new DataContext(Acme.Northwind.EFDAL.DBHelper.GetConnection(Acme.Northwind.EFDAL.Util.StripEFCS2Normal(connectionString)));
			var template = dc.GetTable<Acme.Northwind.EFDAL.CategoryQuery>();
			var cmd = nHydrate.EFCore.DataAccess.BusinessEntityQuery.GetCommand<Acme.Northwind.EFDAL.CategoryQuery>(dc, template, where);
			cmd.CommandTimeout = 30;

			var parser = LinqSQLParser.Create(cmd.CommandText, LinqSQLParser.ObjectTypeConstants.Table);
			string sql = "SELECT [t0].[CategoryID] INTO #t\r\n";
			sql += parser.GetFromClause(optimizer) + "\r\n";
			sql += parser.GetWhereClause();
			sql += "\r\n";

			var noLock = string.Empty;
			noLock = (optimizer.NoLocking ? "WITH (NOLOCK) " : string.Empty);
			sql += "DELETE [Categories] FROM [dbo].[Categories] " + noLock + "INNER JOIN #t ON [dbo].[Categories].[CategoryID] = #t.[CategoryID]\r\n";
			sql += ";select @@rowcount";
			cmd.CommandText = sql;
			dc.Connection.Open();
			var startTime = DateTime.Now;
			object p = cmd.ExecuteScalar();
			var endTime = DateTime.Now;
			optimizer.TotalMilliseconds = (long)endTime.Subtract(startTime).TotalMilliseconds;
			dc.Connection.Close();
			return (int)p;
		}

		#endregion

		#region UpdateData

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, int>> select, Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, bool>> where, int newValue)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Category, Acme.Northwind.EFDAL.CategoryQuery, int>.UpdateData(select, where, newValue, "Categories", GetDatabaseFieldName, true);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, int?>> select, Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, bool>> where, int? newValue)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Category, Acme.Northwind.EFDAL.CategoryQuery, int?>.UpdateData(select, where, newValue, "Categories", GetDatabaseFieldName, true);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The daatbase connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, int>> select, Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, bool>> where, int newValue, string connectionString)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Category, Acme.Northwind.EFDAL.CategoryQuery, int>.UpdateData(select, where, newValue, "Categories", GetDatabaseFieldName, true, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The daatbase connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, int?>> select, Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, bool>> where, int? newValue, string connectionString)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Category, Acme.Northwind.EFDAL.CategoryQuery, int?>.UpdateData(select, where, newValue, "Categories", GetDatabaseFieldName, true, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, Single>> select, Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, bool>> where, Single newValue)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Category, Acme.Northwind.EFDAL.CategoryQuery, Single>.UpdateData(select, where, newValue, "Categories", GetDatabaseFieldName, true);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, Single?>> select, Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, bool>> where, Single? newValue)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Category, Acme.Northwind.EFDAL.CategoryQuery, Single?>.UpdateData(select, where, newValue, "Categories", GetDatabaseFieldName, true);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The daatbase connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, Single>> select, Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, bool>> where, Single newValue, string connectionString)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Category, Acme.Northwind.EFDAL.CategoryQuery, Single>.UpdateData(select, where, newValue, "Categories", GetDatabaseFieldName, true, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The daatbase connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, Single?>> select, Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, bool>> where, Single? newValue, string connectionString)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Category, Acme.Northwind.EFDAL.CategoryQuery, Single?>.UpdateData(select, where, newValue, "Categories", GetDatabaseFieldName, true, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, decimal>> select, Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, bool>> where, decimal newValue)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Category, Acme.Northwind.EFDAL.CategoryQuery, decimal>.UpdateData(select, where, newValue, "Categories", GetDatabaseFieldName, true);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, decimal?>> select, Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, bool>> where, decimal? newValue)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Category, Acme.Northwind.EFDAL.CategoryQuery, decimal?>.UpdateData(select, where, newValue, "Categories", GetDatabaseFieldName, true);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The daatbase connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, decimal>> select, Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, bool>> where, decimal newValue, string connectionString)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Category, Acme.Northwind.EFDAL.CategoryQuery, decimal>.UpdateData(select, where, newValue, "Categories", GetDatabaseFieldName, true, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The daatbase connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, decimal?>> select, Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, bool>> where, decimal? newValue, string connectionString)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Category, Acme.Northwind.EFDAL.CategoryQuery, decimal?>.UpdateData(select, where, newValue, "Categories", GetDatabaseFieldName, true, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, double>> select, Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, bool>> where, double newValue)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Category, Acme.Northwind.EFDAL.CategoryQuery, double>.UpdateData(select, where, newValue, "Categories", GetDatabaseFieldName, true);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, double?>> select, Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, bool>> where, double? newValue)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Category, Acme.Northwind.EFDAL.CategoryQuery, double?>.UpdateData(select, where, newValue, "Categories", GetDatabaseFieldName, true);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The daatbase connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, double>> select, Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, bool>> where, double newValue, string connectionString)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Category, Acme.Northwind.EFDAL.CategoryQuery, double>.UpdateData(select, where, newValue, "Categories", GetDatabaseFieldName, true, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The daatbase connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, double?>> select, Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, bool>> where, double? newValue, string connectionString)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Category, Acme.Northwind.EFDAL.CategoryQuery, double?>.UpdateData(select, where, newValue, "Categories", GetDatabaseFieldName, true, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, short>> select, Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, bool>> where, short newValue)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Category, Acme.Northwind.EFDAL.CategoryQuery, short>.UpdateData(select, where, newValue, "Categories", GetDatabaseFieldName, true);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, short?>> select, Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, bool>> where, short? newValue)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Category, Acme.Northwind.EFDAL.CategoryQuery, short?>.UpdateData(select, where, newValue, "Categories", GetDatabaseFieldName, true);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The daatbase connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, short>> select, Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, bool>> where, short newValue, string connectionString)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Category, Acme.Northwind.EFDAL.CategoryQuery, short>.UpdateData(select, where, newValue, "Categories", GetDatabaseFieldName, true, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The daatbase connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, short?>> select, Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, bool>> where, short? newValue, string connectionString)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Category, Acme.Northwind.EFDAL.CategoryQuery, short?>.UpdateData(select, where, newValue, "Categories", GetDatabaseFieldName, true, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, string>> select, Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, bool>> where, string newValue)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Category, Acme.Northwind.EFDAL.CategoryQuery, string>.UpdateData(select, where, newValue, "Categories", GetDatabaseFieldName, true);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The daatbase connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, string>> select, Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, bool>> where, string newValue, string connectionString)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Category, Acme.Northwind.EFDAL.CategoryQuery, string>.UpdateData(select, where, newValue, "Categories", GetDatabaseFieldName, true, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, DateTime>> select, Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, bool>> where, DateTime newValue)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Category, Acme.Northwind.EFDAL.CategoryQuery, DateTime>.UpdateData(select, where, newValue, "Categories", GetDatabaseFieldName, true);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, DateTime?>> select, Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, bool>> where, DateTime? newValue)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Category, Acme.Northwind.EFDAL.CategoryQuery, DateTime?>.UpdateData(select, where, newValue, "Categories", GetDatabaseFieldName, true);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The daatbase connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, DateTime>> select, Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, bool>> where, DateTime newValue, string connectionString)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Category, Acme.Northwind.EFDAL.CategoryQuery, DateTime>.UpdateData(select, where, newValue, "Categories", GetDatabaseFieldName, true, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The daatbase connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, DateTime?>> select, Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, bool>> where, DateTime? newValue, string connectionString)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Category, Acme.Northwind.EFDAL.CategoryQuery, DateTime?>.UpdateData(select, where, newValue, "Categories", GetDatabaseFieldName, true, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, bool>> select, Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, bool>> where, bool newValue)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Category, Acme.Northwind.EFDAL.CategoryQuery, bool>.UpdateData(select, where, newValue, "Categories", GetDatabaseFieldName, true);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, bool?>> select, Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, bool>> where, bool? newValue)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Category, Acme.Northwind.EFDAL.CategoryQuery, bool?>.UpdateData(select, where, newValue, "Categories", GetDatabaseFieldName, true);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The daatbase connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, bool>> select, Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, bool>> where, bool newValue, string connectionString)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Category, Acme.Northwind.EFDAL.CategoryQuery, bool>.UpdateData(select, where, newValue, "Categories", GetDatabaseFieldName, true, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The daatbase connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, bool?>> select, Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, bool>> where, bool? newValue, string connectionString)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Category, Acme.Northwind.EFDAL.CategoryQuery, bool?>.UpdateData(select, where, newValue, "Categories", GetDatabaseFieldName, true, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, Guid>> select, Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, bool>> where, Guid newValue)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Category, Acme.Northwind.EFDAL.CategoryQuery, Guid>.UpdateData(select, where, newValue, "Categories", GetDatabaseFieldName, true);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, Guid?>> select, Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, bool>> where, Guid? newValue)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Category, Acme.Northwind.EFDAL.CategoryQuery, Guid?>.UpdateData(select, where, newValue, "Categories", GetDatabaseFieldName, true);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The daatbase connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, Guid>> select, Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, bool>> where, Guid newValue, string connectionString)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Category, Acme.Northwind.EFDAL.CategoryQuery, Guid>.UpdateData(select, where, newValue, "Categories", GetDatabaseFieldName, true, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The daatbase connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, Guid?>> select, Expression<Func<Acme.Northwind.EFDAL.CategoryQuery, bool>> where, Guid? newValue, string connectionString)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Category, Acme.Northwind.EFDAL.CategoryQuery, Guid?>.UpdateData(select, where, newValue, "Categories", GetDatabaseFieldName, true, connectionString);
		}

		#endregion

		#region GetDatabaseFieldName

		/// <summary>
		/// Returns the actual database name of the specified field.
		/// </summary>
		internal static string GetDatabaseFieldName(Category.FieldNameConstants field)
		{
			return GetDatabaseFieldName(field.ToString());
		}

		/// <summary>
		/// Returns the actual database name of the specified field.
		/// </summary>
		internal static string GetDatabaseFieldName(string field)
		{
			switch (field)
			{
				case "CategoryID": return "CategoryID";
				case "CategoryName": return "CategoryName";
				case "Description": return "Description";
				case "Picture": return "Picture";
				case "CreatedBy": return "CreatedBy";
				case "CreatedDate": return "CreatedDate";
				case "ModifiedBy": return "ModifiedBy";
				case "ModifiedDate": return "ModifiedDate";
				case "Timestamp": return "Timestamp";
			}
			return string.Empty;
		}

		#endregion

		#region Context

		NorthwindEntities IEntityWithContext.Context
		{
			get { return _internalContext; }
			set { _internalContext = value; }
		}
		private NorthwindEntities _internalContext = null;

		#endregion

		#region Auditing
		string nHydrate.EFCore.DataAccess.IAuditable.CreatedBy
		{
			get { return this.CreatedBy; }
		}

		System.DateTime? nHydrate.EFCore.DataAccess.IAuditable.CreatedDate
		{
			get { return this.CreatedDate; }
		}

		bool nHydrate.EFCore.DataAccess.IAuditable.IsCreateAuditImplemented
		{
			get { return true; }
		}

		bool nHydrate.EFCore.DataAccess.IAuditable.IsModifyAuditImplemented
		{
			get { return true; }
		}

		bool nHydrate.EFCore.DataAccess.IAuditable.IsTimestampAuditImplemented
		{
			get { return true; }
		}

		string nHydrate.EFCore.DataAccess.IAuditable.ModifiedBy
		{
			get { return this.ModifiedBy; }
		}

		System.DateTime? nHydrate.EFCore.DataAccess.IAuditable.ModifiedDate
		{
			get { return this.ModifiedDate; }
		}

		byte[] nHydrate.EFCore.DataAccess.IAuditable.TimeStamp
		{
			get { return this.Timestamp; }
		}

		internal virtual void ResetModifiedBy(string modifier)
		{
			if (this.ModifiedBy != modifier)
				this.ModifiedBy = modifier;
		}

		internal virtual void ResetCreatedBy(string modifier)
		{
			if (this.CreatedBy != modifier)
				this.CreatedBy = modifier;
			this.ResetModifiedBy(modifier);
		}
		#endregion

		#region Static Methods

		/// <summary>
		/// Creates and returns a metadata object for an entity type
		/// </summary>
		/// <returns>A metadata object for the entity types in this assembly</returns>
		public static Acme.Northwind.EFDAL.Interfaces.Entity.Metadata.CategoryMetadata GetMetadata()
		{
			var a = typeof(Category).GetCustomAttributes(typeof(System.ComponentModel.DataAnnotations.MetadataTypeAttribute), true).FirstOrDefault();
			if (a == null) return null;
			var t = ((System.ComponentModel.DataAnnotations.MetadataTypeAttribute)a).MetadataClassType;
			if (t == null) return null;
			return Activator.CreateInstance(t) as Acme.Northwind.EFDAL.Interfaces.IMetadata as Acme.Northwind.EFDAL.Interfaces.Entity.Metadata.CategoryMetadata;
		}

		#endregion

		#region Equals
		/// <summary>
		/// Compares two objects of 'Category' type and determines if all properties match
		/// </summary>
		/// <returns>True if all properties match, false otherwise</returns>
		bool System.IEquatable<Acme.Northwind.EFDAL.Interfaces.Entity.ICategory>.Equals(Acme.Northwind.EFDAL.Interfaces.Entity.ICategory other)
		{
			return this.Equals(other);
		}

		/// <summary>
		/// Compares two objects of 'Category' type and determines if all properties match
		/// </summary>
		/// <returns>True if all properties match, false otherwise</returns>
		public override bool Equals(object obj)
		{
			var other = obj as Acme.Northwind.EFDAL.Entity.Category;
			if (other == null) return false;
			return (
				other.CategoryID == this.CategoryID &&
				other.CategoryName == this.CategoryName &&
				other.Description == this.Description &&
				other.Picture == this.Picture
				);
		}

		/// <summary>
		/// Serves as a hash function for this type.
		/// </summary>
		public override int GetHashCode()
		{
			return base.GetHashCode();
		}

		#endregion

		#region IDataErrorInfo
		/// <summary />
		string System.ComponentModel.IDataErrorInfo.Error
		{
			get { return this.GetObjectDataErrorInfo(); }
		}

		/// <summary />
		/// <param name="columnName"></param>
		/// <returns></returns>
		string System.ComponentModel.IDataErrorInfo.this[string columnName]
		{
			get
			{
				if (string.IsNullOrEmpty(columnName))
					return string.Empty;

				var retval = GetObjectPropertyDataErrorInfo(columnName);
				if (string.IsNullOrEmpty(retval))
				{
					switch (columnName.ToLower())
					{
						case "categoryname":
							if (string.IsNullOrEmpty(this.CategoryName) || string.IsNullOrEmpty(this.CategoryName.Trim()))
								retval = "CategoryName is required!";
							break;
						default:
							break;
					}

				}
				return retval;
			}
		}
		#endregion

	}

	partial class Category : nHydrate.EFCore.DataAccess.ICreatedAudit, nHydrate.EFCore.DataAccess.IModifiedAudit, nHydrate.EFCore.DataAccess.IConcurrencyAudit
	{
		#region ICreatedAudit Members

		string ICreatedAudit.CreatedBy
		{
			get { return this.CreatedBy; }
		}

		DateTime? ICreatedAudit.CreatedDate
		{
			get { return this.CreatedDate; }
		}

		#endregion

		#region IModifiedAudit Members

		string IModifiedAudit.ModifiedBy
		{
			get { return this.ModifiedBy; }
		}

		DateTime? IModifiedAudit.ModifiedDate
		{
			get { return this.ModifiedDate; }
		}

		#endregion

		#region IConcurrencyAudit Members

		byte[] IConcurrencyAudit.TimeStamp
		{
			get { return this.Timestamp; }
		}

		#endregion

	}

}

