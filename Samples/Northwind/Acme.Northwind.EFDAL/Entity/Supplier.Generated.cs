//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Runtime.Serialization;
using System.Data.Objects.DataClasses;
using System.Xml.Serialization;
using System.ComponentModel;
using System.Collections.Generic;
using System.Data.Objects;
using System.Text;
using Acme.Northwind.EFDAL;
using nHydrate.EFCore.DataAccess;
using nHydrate.EFCore.EventArgs;
using System.Text.RegularExpressions;
using System.Linq.Expressions;
using System.Data.Linq;

namespace Acme.Northwind.EFDAL.Entity
{
	/// <summary>
	/// The collection to hold 'Supplier' entities
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("nHydrateModelGenerator", "5.1.2")]
	[EdmEntityTypeAttribute(NamespaceName = "Acme.Northwind.EFDAL.Entity", Name = "Supplier")]
	[Serializable]
	[DataContractAttribute(IsReference = true)]
	[nHydrate.EFCore.Attributes.FieldNameConstantsAttribute(typeof(Acme.Northwind.EFDAL.Entity.Supplier.FieldNameConstants))]
	[System.ComponentModel.DataAnnotations.MetadataType(typeof(Acme.Northwind.EFDAL.Interfaces.Entity.Metadata.SupplierMetadata))]
	[nHydrate.EFCore.Attributes.EntityMetadata("Supplier", false, true, true, true, "", true, false, false, "dbo")]
	public partial class Supplier : nHydrate.EFCore.DataAccess.NHEntityObject, nHydrate.EFCore.DataAccess.IBusinessObject, Acme.Northwind.EFDAL.IEntityWithContext, System.ComponentModel.IDataErrorInfo, Acme.Northwind.EFDAL.Interfaces.Entity.ISupplier, System.ICloneable, System.IEquatable<Acme.Northwind.EFDAL.Interfaces.Entity.ISupplier>, nHydrate.EFCore.DataAccess.IAuditable
	{
		#region FieldNameConstants Enumeration

		/// <summary>
		/// Enumeration to define each property that maps to a database field for the 'Supplier' table.
		/// </summary>
		public enum FieldNameConstants
		{
			/// <summary>
			/// Field mapping for the 'Address' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'Address' property")]
			Address,
			/// <summary>
			/// Field mapping for the 'City' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'City' property")]
			City,
			/// <summary>
			/// Field mapping for the 'CompanyName' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'CompanyName' property")]
			CompanyName,
			/// <summary>
			/// Field mapping for the 'ContactName' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'ContactName' property")]
			ContactName,
			/// <summary>
			/// Field mapping for the 'ContactTitle' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'ContactTitle' property")]
			ContactTitle,
			/// <summary>
			/// Field mapping for the 'Country' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'Country' property")]
			Country,
			/// <summary>
			/// Field mapping for the 'Fax' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'Fax' property")]
			Fax,
			/// <summary>
			/// Field mapping for the 'HomePage' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'HomePage' property")]
			HomePage,
			/// <summary>
			/// Field mapping for the 'Phone' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'Phone' property")]
			Phone,
			/// <summary>
			/// Field mapping for the 'PostalCode' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'PostalCode' property")]
			PostalCode,
			/// <summary>
			/// Field mapping for the 'Region' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'Region' property")]
			Region,
			/// <summary>
			/// Field mapping for the 'SupplierID' property
			/// </summary>
			[nHydrate.EFCore.Attributes.PrimaryKeyAttribute()]
			[System.ComponentModel.ReadOnlyAttribute(true)]
			[System.ComponentModel.Description("Field mapping for the 'SupplierID' property")]
			SupplierID,
			/// <summary>
			/// Field mapping for the 'CreatedBy' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'CreatedBy' property")]
			CreatedBy,
			/// <summary>
			/// Field mapping for the 'CreatedDate' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'CreatedDate' property")]
			CreatedDate,
			/// <summary>
			/// Field mapping for the 'ModifiedBy' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'ModifiedBy' property")]
			ModifiedBy,
			/// <summary>
			/// Field mapping for the 'ModifiedDate' property
			/// </summary>
			[System.ComponentModel.Description("Field mapping for the 'ModifiedDate' property")]
			ModifiedDate,
		}
		#endregion

		#region Constructors

		/// <summary>
		/// Method called when an instance of this class is created
		/// </summary>
		partial void OnCreated();

		/// <summary>
		/// Initializes a new instance of the Acme.Northwind.EFDAL.Entity.Supplier class
		/// </summary>
		public Supplier()
		{
			this.OnCreated();
		}

		#endregion

		#region Properties

		/// <summary>
		/// The property that maps back to the database 'Suppliers.Address' field.
		/// </summary>
		/// <remarks>Field: [Suppliers].[Address], Field Length: 60, Nullable</remarks>
		[System.ComponentModel.Browsable(true)]
		[EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = true)]
		[DataMemberAttribute()]
		[System.ComponentModel.DisplayName("Address")]
		[System.Diagnostics.DebuggerNonUserCode]
		public virtual string Address
		{
			get { return _address; }
			set
			{
				if (value == _address) return;
				if ((value != null) && (value.Length > GetMaxLength(FieldNameConstants.Address))) throw new Exception(string.Format(GlobalValues.ERROR_DATA_TOO_BIG, value, "Supplier.Address", GetMaxLength(FieldNameConstants.Address)));
				var eventArg = new nHydrate.EFCore.EventArgs.ChangingEventArgs<string>(value, "Address");
				//this.OnAddressChanging(eventArg);
				if (eventArg.Cancel) return;
				ReportPropertyChanging("Address");
				_address = eventArg.Value;
				ReportPropertyChanged("Address");
				//this.OnAddressChanged(eventArg);
			}
		}

		/// <summary>
		/// The property that maps back to the database 'Suppliers.City' field.
		/// </summary>
		/// <remarks>Field: [Suppliers].[City], Field Length: 15, Nullable</remarks>
		[System.ComponentModel.Browsable(true)]
		[EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = true)]
		[DataMemberAttribute()]
		[System.ComponentModel.DisplayName("City")]
		[System.Diagnostics.DebuggerNonUserCode]
		public virtual string City
		{
			get { return _city; }
			set
			{
				if (value == _city) return;
				if ((value != null) && (value.Length > GetMaxLength(FieldNameConstants.City))) throw new Exception(string.Format(GlobalValues.ERROR_DATA_TOO_BIG, value, "Supplier.City", GetMaxLength(FieldNameConstants.City)));
				var eventArg = new nHydrate.EFCore.EventArgs.ChangingEventArgs<string>(value, "City");
				//this.OnCityChanging(eventArg);
				if (eventArg.Cancel) return;
				ReportPropertyChanging("City");
				_city = eventArg.Value;
				ReportPropertyChanged("City");
				//this.OnCityChanged(eventArg);
			}
		}

		/// <summary>
		/// The property that maps back to the database 'Suppliers.CompanyName' field.
		/// </summary>
		/// <remarks>Field: [Suppliers].[CompanyName], Field Length: 40, Not Nullable, Indexed</remarks>
		[System.ComponentModel.Browsable(true)]
		[EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = false)]
		[DataMemberAttribute()]
		[System.ComponentModel.DisplayName("CompanyName")]
		[System.Diagnostics.DebuggerNonUserCode]
		public virtual string CompanyName
		{
			get { return _companyName; }
			set
			{
				if (value == _companyName) return;
				if ((value != null) && (value.Length > GetMaxLength(FieldNameConstants.CompanyName))) throw new Exception(string.Format(GlobalValues.ERROR_DATA_TOO_BIG, value, "Supplier.CompanyName", GetMaxLength(FieldNameConstants.CompanyName)));
				var eventArg = new nHydrate.EFCore.EventArgs.ChangingEventArgs<string>(value, "CompanyName");
				//this.OnCompanyNameChanging(eventArg);
				if (eventArg.Cancel) return;
				ReportPropertyChanging("CompanyName");
				_companyName = eventArg.Value;
				ReportPropertyChanged("CompanyName");
				//this.OnCompanyNameChanged(eventArg);
			}
		}

		/// <summary>
		/// The property that maps back to the database 'Suppliers.ContactName' field.
		/// </summary>
		/// <remarks>Field: [Suppliers].[ContactName], Field Length: 30, Nullable</remarks>
		[System.ComponentModel.Browsable(true)]
		[EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = true)]
		[DataMemberAttribute()]
		[System.ComponentModel.DisplayName("ContactName")]
		[System.Diagnostics.DebuggerNonUserCode]
		public virtual string ContactName
		{
			get { return _contactName; }
			set
			{
				if (value == _contactName) return;
				if ((value != null) && (value.Length > GetMaxLength(FieldNameConstants.ContactName))) throw new Exception(string.Format(GlobalValues.ERROR_DATA_TOO_BIG, value, "Supplier.ContactName", GetMaxLength(FieldNameConstants.ContactName)));
				var eventArg = new nHydrate.EFCore.EventArgs.ChangingEventArgs<string>(value, "ContactName");
				//this.OnContactNameChanging(eventArg);
				if (eventArg.Cancel) return;
				ReportPropertyChanging("ContactName");
				_contactName = eventArg.Value;
				ReportPropertyChanged("ContactName");
				//this.OnContactNameChanged(eventArg);
			}
		}

		/// <summary>
		/// The property that maps back to the database 'Suppliers.ContactTitle' field.
		/// </summary>
		/// <remarks>Field: [Suppliers].[ContactTitle], Field Length: 30, Nullable</remarks>
		[System.ComponentModel.Browsable(true)]
		[EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = true)]
		[DataMemberAttribute()]
		[System.ComponentModel.DisplayName("ContactTitle")]
		[System.Diagnostics.DebuggerNonUserCode]
		public virtual string ContactTitle
		{
			get { return _contactTitle; }
			set
			{
				if (value == _contactTitle) return;
				if ((value != null) && (value.Length > GetMaxLength(FieldNameConstants.ContactTitle))) throw new Exception(string.Format(GlobalValues.ERROR_DATA_TOO_BIG, value, "Supplier.ContactTitle", GetMaxLength(FieldNameConstants.ContactTitle)));
				var eventArg = new nHydrate.EFCore.EventArgs.ChangingEventArgs<string>(value, "ContactTitle");
				//this.OnContactTitleChanging(eventArg);
				if (eventArg.Cancel) return;
				ReportPropertyChanging("ContactTitle");
				_contactTitle = eventArg.Value;
				ReportPropertyChanged("ContactTitle");
				//this.OnContactTitleChanged(eventArg);
			}
		}

		/// <summary>
		/// The property that maps back to the database 'Suppliers.Country' field.
		/// </summary>
		/// <remarks>Field: [Suppliers].[Country], Field Length: 15, Nullable</remarks>
		[System.ComponentModel.Browsable(true)]
		[EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = true)]
		[DataMemberAttribute()]
		[System.ComponentModel.DisplayName("Country")]
		[System.Diagnostics.DebuggerNonUserCode]
		public virtual string Country
		{
			get { return _country; }
			set
			{
				if (value == _country) return;
				if ((value != null) && (value.Length > GetMaxLength(FieldNameConstants.Country))) throw new Exception(string.Format(GlobalValues.ERROR_DATA_TOO_BIG, value, "Supplier.Country", GetMaxLength(FieldNameConstants.Country)));
				var eventArg = new nHydrate.EFCore.EventArgs.ChangingEventArgs<string>(value, "Country");
				//this.OnCountryChanging(eventArg);
				if (eventArg.Cancel) return;
				ReportPropertyChanging("Country");
				_country = eventArg.Value;
				ReportPropertyChanged("Country");
				//this.OnCountryChanged(eventArg);
			}
		}

		/// <summary>
		/// The property that maps back to the database 'Suppliers.Fax' field.
		/// </summary>
		/// <remarks>Field: [Suppliers].[Fax], Field Length: 24, Nullable</remarks>
		[System.ComponentModel.Browsable(true)]
		[EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = true)]
		[DataMemberAttribute()]
		[System.ComponentModel.DisplayName("Fax")]
		[System.Diagnostics.DebuggerNonUserCode]
		public virtual string Fax
		{
			get { return _fax; }
			set
			{
				if (value == _fax) return;
				if ((value != null) && (value.Length > GetMaxLength(FieldNameConstants.Fax))) throw new Exception(string.Format(GlobalValues.ERROR_DATA_TOO_BIG, value, "Supplier.Fax", GetMaxLength(FieldNameConstants.Fax)));
				var eventArg = new nHydrate.EFCore.EventArgs.ChangingEventArgs<string>(value, "Fax");
				//this.OnFaxChanging(eventArg);
				if (eventArg.Cancel) return;
				ReportPropertyChanging("Fax");
				_fax = eventArg.Value;
				ReportPropertyChanged("Fax");
				//this.OnFaxChanged(eventArg);
			}
		}

		/// <summary>
		/// The property that maps back to the database 'Suppliers.HomePage' field.
		/// </summary>
		/// <remarks>Field: [Suppliers].[HomePage], Nullable</remarks>
		[System.ComponentModel.Browsable(true)]
		[EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = true)]
		[DataMemberAttribute()]
		[System.ComponentModel.DisplayName("HomePage")]
		[System.Diagnostics.DebuggerNonUserCode]
		public virtual string HomePage
		{
			get { return _homePage; }
			set
			{
				if (value == _homePage) return;
				if ((value != null) && (value.Length > GetMaxLength(FieldNameConstants.HomePage))) throw new Exception(string.Format(GlobalValues.ERROR_DATA_TOO_BIG, value, "Supplier.HomePage", GetMaxLength(FieldNameConstants.HomePage)));
				var eventArg = new nHydrate.EFCore.EventArgs.ChangingEventArgs<string>(value, "HomePage");
				//this.OnHomePageChanging(eventArg);
				if (eventArg.Cancel) return;
				ReportPropertyChanging("HomePage");
				_homePage = eventArg.Value;
				ReportPropertyChanged("HomePage");
				//this.OnHomePageChanged(eventArg);
			}
		}

		/// <summary>
		/// The property that maps back to the database 'Suppliers.Phone' field.
		/// </summary>
		/// <remarks>Field: [Suppliers].[Phone], Field Length: 24, Nullable</remarks>
		[System.ComponentModel.Browsable(true)]
		[EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = true)]
		[DataMemberAttribute()]
		[System.ComponentModel.DisplayName("Phone")]
		[System.Diagnostics.DebuggerNonUserCode]
		public virtual string Phone
		{
			get { return _phone; }
			set
			{
				if (value == _phone) return;
				if ((value != null) && (value.Length > GetMaxLength(FieldNameConstants.Phone))) throw new Exception(string.Format(GlobalValues.ERROR_DATA_TOO_BIG, value, "Supplier.Phone", GetMaxLength(FieldNameConstants.Phone)));
				var eventArg = new nHydrate.EFCore.EventArgs.ChangingEventArgs<string>(value, "Phone");
				//this.OnPhoneChanging(eventArg);
				if (eventArg.Cancel) return;
				ReportPropertyChanging("Phone");
				_phone = eventArg.Value;
				ReportPropertyChanged("Phone");
				//this.OnPhoneChanged(eventArg);
			}
		}

		/// <summary>
		/// The property that maps back to the database 'Suppliers.PostalCode' field.
		/// </summary>
		/// <remarks>Field: [Suppliers].[PostalCode], Field Length: 10, Nullable, Indexed</remarks>
		[System.ComponentModel.Browsable(true)]
		[EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = true)]
		[DataMemberAttribute()]
		[System.ComponentModel.DisplayName("PostalCode")]
		[System.Diagnostics.DebuggerNonUserCode]
		public virtual string PostalCode
		{
			get { return _postalCode; }
			set
			{
				if (value == _postalCode) return;
				if ((value != null) && (value.Length > GetMaxLength(FieldNameConstants.PostalCode))) throw new Exception(string.Format(GlobalValues.ERROR_DATA_TOO_BIG, value, "Supplier.PostalCode", GetMaxLength(FieldNameConstants.PostalCode)));
				var eventArg = new nHydrate.EFCore.EventArgs.ChangingEventArgs<string>(value, "PostalCode");
				//this.OnPostalCodeChanging(eventArg);
				if (eventArg.Cancel) return;
				ReportPropertyChanging("PostalCode");
				_postalCode = eventArg.Value;
				ReportPropertyChanged("PostalCode");
				//this.OnPostalCodeChanged(eventArg);
			}
		}

		/// <summary>
		/// The property that maps back to the database 'Suppliers.Region' field.
		/// </summary>
		/// <remarks>Field: [Suppliers].[Region], Field Length: 15, Nullable</remarks>
		[System.ComponentModel.Browsable(true)]
		[EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = true)]
		[DataMemberAttribute()]
		[System.ComponentModel.DisplayName("Region")]
		[System.Diagnostics.DebuggerNonUserCode]
		public virtual string Region
		{
			get { return _region; }
			set
			{
				if (value == _region) return;
				if ((value != null) && (value.Length > GetMaxLength(FieldNameConstants.Region))) throw new Exception(string.Format(GlobalValues.ERROR_DATA_TOO_BIG, value, "Supplier.Region", GetMaxLength(FieldNameConstants.Region)));
				var eventArg = new nHydrate.EFCore.EventArgs.ChangingEventArgs<string>(value, "Region");
				//this.OnRegionChanging(eventArg);
				if (eventArg.Cancel) return;
				ReportPropertyChanging("Region");
				_region = eventArg.Value;
				ReportPropertyChanged("Region");
				//this.OnRegionChanged(eventArg);
			}
		}

		/// <summary>
		/// The property that maps back to the database 'Suppliers.SupplierID' field.
		/// </summary>
		/// <remarks>Field: [Suppliers].[SupplierID], Not Nullable, Primary Key, Unique, Indexed</remarks>
		[System.ComponentModel.Browsable(true)]
		[EdmScalarPropertyAttribute(EntityKeyProperty = true, IsNullable = false)]
		[DataMemberAttribute()]
		[System.ComponentModel.DisplayName("SupplierID")]
		[System.ComponentModel.DataAnnotations.Key()]
		[System.ComponentModel.ReadOnly(true)]
		[System.Diagnostics.DebuggerNonUserCode]
		public virtual int SupplierID
		{
			get { return _supplierID; }
			set
			{
				if (value == _supplierID) return;
				ReportPropertyChanging("SupplierID");
				_supplierID = value;
				ReportPropertyChanged("SupplierID");
			}
		}

		/// <summary>
		/// The audit field for the 'Created By' parameter.
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = true)]
		[DataMemberAttribute()]
		[System.Diagnostics.DebuggerNonUserCode]
		public virtual string CreatedBy
		{
			get { return _createdby; }
			protected internal set
			{
				var eventArg = new nHydrate.EFCore.EventArgs.ChangingEventArgs<string>(value, "CreatedBy");
				//OnCreatedByChanging(eventArg);
				if (eventArg.Cancel) return;
				ReportPropertyChanging("CreatedBy");
				_createdby = eventArg.Value;
				ReportPropertyChanged("CreatedBy");
				//OnCreatedByChanged(eventArg);
			}
		}

		/// <summary />
		protected string _createdby;

		/// <summary>
		/// The audit field for the 'Created Date' parameter.
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = true)]
		[DataMemberAttribute()]
		[System.Diagnostics.DebuggerNonUserCode]
		public virtual DateTime? CreatedDate
		{
			get { return _createddate; }
			protected internal set
			{
				var eventArg = new nHydrate.EFCore.EventArgs.ChangingEventArgs<DateTime?>(value, "CreatedDate");
				//OnCreatedDateChanging(eventArg);
				if (eventArg.Cancel) return;
				ReportPropertyChanging("CreatedDate");
				_createddate = eventArg.Value;
				ReportPropertyChanged("CreatedDate");
				//OnCreatedDateChanged(eventArg);
			}
		}

		/// <summary />
		protected DateTime? _createddate;

		/// <summary>
		/// The audit field for the 'Modified By' parameter.
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = true)]
		[DataMemberAttribute()]
		[System.Diagnostics.DebuggerNonUserCode]
		public virtual string ModifiedBy
		{
			get { return _modifiedby; }
			protected internal set
			{
				var eventArg = new nHydrate.EFCore.EventArgs.ChangingEventArgs<string>(value, "ModifiedBy");
				//OnModifiedByChanging(eventArg);
				if (eventArg.Cancel) return;
				ReportPropertyChanging("ModifiedBy");
				_modifiedby = eventArg.Value;
				ReportPropertyChanged("ModifiedBy");
				//OnModifiedByChanged(eventArg);
			}
		}

		/// <summary />
		protected string _modifiedby;

		/// <summary>
		/// The audit field for the 'Modified Date' parameter.
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = true)]
		[DataMemberAttribute()]
		[System.Diagnostics.DebuggerNonUserCode]
		public virtual DateTime? ModifiedDate
		{
			get { return _modifieddate; }
			protected internal set
			{
				var eventArg = new nHydrate.EFCore.EventArgs.ChangingEventArgs<DateTime?>(value, "ModifiedDate");
				//OnModifiedDateChanging(eventArg);
				if (eventArg.Cancel) return;
				ReportPropertyChanging("ModifiedDate");
				_modifieddate = eventArg.Value;
				ReportPropertyChanged("ModifiedDate");
				//OnModifiedDateChanged(eventArg);
			}
		}

		/// <summary />
		protected DateTime? _modifieddate;

		/// <summary>
		/// The audit field for the 'Timestamp' parameter.
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		[EdmScalarPropertyAttribute(EntityKeyProperty = false, IsNullable = true)]
		[DataMemberAttribute()]
		[System.Diagnostics.DebuggerNonUserCode]
		public virtual byte[] Timestamp
		{
			get { return _timestamp; }
			protected internal set
			{
				var eventArg = new nHydrate.EFCore.EventArgs.ChangingEventArgs<byte[]>(value, "Timestamp");
				//OnTimestampChanging(eventArg);
				if (eventArg.Cancel) return;
				ReportPropertyChanging("Timestamp");
				_timestamp = eventArg.Value;
				ReportPropertyChanged("Timestamp");
				//OnTimestampChanged(eventArg);
			}
		}

		/// <summary />
		protected byte[] _timestamp;

		#endregion

		#region Property Holders

		/// <summary />
		protected string _address;
		/// <summary />
		protected string _city;
		/// <summary />
		protected string _companyName;
		/// <summary />
		protected string _contactName;
		/// <summary />
		protected string _contactTitle;
		/// <summary />
		protected string _country;
		/// <summary />
		protected string _fax;
		/// <summary />
		protected string _homePage;
		/// <summary />
		protected string _phone;
		/// <summary />
		protected string _postalCode;
		/// <summary />
		protected string _region;
		/// <summary />
		protected int _supplierID;

		#endregion

		#region GetMaxLength

		/// <summary>
		/// Gets the maximum size of the field value.
		/// </summary>
		public static int GetMaxLength(FieldNameConstants field)
		{
			switch (field)
			{
				case FieldNameConstants.Address:
					return 60;
				case FieldNameConstants.City:
					return 15;
				case FieldNameConstants.CompanyName:
					return 40;
				case FieldNameConstants.ContactName:
					return 30;
				case FieldNameConstants.ContactTitle:
					return 30;
				case FieldNameConstants.Country:
					return 15;
				case FieldNameConstants.Fax:
					return 24;
				case FieldNameConstants.HomePage:
					return int.MaxValue;
				case FieldNameConstants.Phone:
					return 24;
				case FieldNameConstants.PostalCode:
					return 10;
				case FieldNameConstants.Region:
					return 15;
				case FieldNameConstants.SupplierID:
					return 0;
			}
			return 0;
		}

		int nHydrate.EFCore.DataAccess.IReadOnlyBusinessObject.GetMaxLength(Enum field)
		{
			return GetMaxLength((FieldNameConstants)field);
		}

		#endregion

		#region GetFieldNameConstants

		System.Type nHydrate.EFCore.DataAccess.IReadOnlyBusinessObject.GetFieldNameConstants()
		{
			return typeof(FieldNameConstants);
		}

		#endregion

		#region GetFieldType

		/// <summary>
		/// Gets the system type of a field on this object
		/// </summary>
		public static System.Type GetFieldType(FieldNameConstants field)
		{
			if (field.GetType() != typeof(FieldNameConstants))
				throw new Exception("The '" + field.GetType().ReflectedType.ToString() + ".FieldNameConstants' value is not valid. The field parameter must be of type 'Acme.Northwind.EFDAL.Entity.Supplier.FieldNameConstants'.");

			switch ((FieldNameConstants)field)
			{
				case FieldNameConstants.Address: return typeof(string);
				case FieldNameConstants.City: return typeof(string);
				case FieldNameConstants.CompanyName: return typeof(string);
				case FieldNameConstants.ContactName: return typeof(string);
				case FieldNameConstants.ContactTitle: return typeof(string);
				case FieldNameConstants.Country: return typeof(string);
				case FieldNameConstants.Fax: return typeof(string);
				case FieldNameConstants.HomePage: return typeof(string);
				case FieldNameConstants.Phone: return typeof(string);
				case FieldNameConstants.PostalCode: return typeof(string);
				case FieldNameConstants.Region: return typeof(string);
				case FieldNameConstants.SupplierID: return typeof(int);
			}
			return null;
		}

		System.Type nHydrate.EFCore.DataAccess.IReadOnlyBusinessObject.GetFieldType(Enum field)
		{
			if (field.GetType() != typeof(FieldNameConstants))
				throw new Exception("The '" + field.GetType().ReflectedType.ToString() + ".FieldNameConstants' value is not valid. The field parameter must be of type 'Acme.Northwind.EFDAL.Entity.Supplier.FieldNameConstants'.");

			return GetFieldType((Acme.Northwind.EFDAL.Entity.Supplier.FieldNameConstants)field);
		}

		#endregion

		#region Get/Set Value

		object nHydrate.EFCore.DataAccess.IReadOnlyBusinessObject.GetValue(System.Enum field)
		{
			return ((nHydrate.EFCore.DataAccess.IReadOnlyBusinessObject)this).GetValue(field, null);
		}

		object nHydrate.EFCore.DataAccess.IReadOnlyBusinessObject.GetValue(System.Enum field, object defaultValue)
		{
			if (field.GetType() != typeof(FieldNameConstants))
				throw new Exception("The '" + field.GetType().ReflectedType.ToString() + ".FieldNameConstants' value is not valid. The field parameter must be of type '" + this.GetType().ToString() + ".FieldNameConstants'.");
			return this.GetValue((FieldNameConstants)field, defaultValue);
		}

		void nHydrate.EFCore.DataAccess.IBusinessObject.SetValue(System.Enum field, object newValue)
		{
			if (field.GetType() != typeof(FieldNameConstants))
				throw new Exception("The '" + field.GetType().ReflectedType.ToString() + ".FieldNameConstants' value is not valid. The field parameter must be of type '" + this.GetType().ToString() + ".FieldNameConstants'.");
			this.SetValue((FieldNameConstants)field, newValue);
		}

		#endregion

		#region PrimaryKey

		/// <summary>
		/// Hold the primary key for this object
		/// </summary>
		protected nHydrate.EFCore.DataAccess.IPrimaryKey _primaryKey = null;
		nHydrate.EFCore.DataAccess.IPrimaryKey nHydrate.EFCore.DataAccess.IReadOnlyBusinessObject.PrimaryKey
		{
			get { return null; }
		}

		#endregion

		#region IsParented

		/// <summary>
		/// Determines if this object is part of a collection or is detached
		/// </summary>
		[System.ComponentModel.Browsable(false)]
		public virtual bool IsParented
		{
			get { return (this.EntityState != System.Data.EntityState.Detached); }
		}

		#endregion

		#region Clone

		/// <summary>
		/// Creates a shallow copy of this object
		/// </summary>
		public virtual object Clone()
		{
			var newItem = new Supplier();
			newItem._address = this._address;
			newItem._city = this._city;
			newItem._companyName = this._companyName;
			newItem._contactName = this._contactName;
			newItem._contactTitle = this._contactTitle;
			newItem._country = this._country;
			newItem._fax = this._fax;
			newItem._homePage = this._homePage;
			newItem._phone = this._phone;
			newItem._postalCode = this._postalCode;
			newItem._region = this._region;
			newItem._supplierID = this._supplierID;
			return newItem;
		}

		/// <summary>
		/// Creates a shallow copy of this object
		/// </summary>
		public static Supplier Clone(Acme.Northwind.EFDAL.Interfaces.Entity.ISupplier item)
		{
			var newItem = new Supplier();
			newItem.Address = item.Address;
			newItem.City = item.City;
			newItem.CompanyName = item.CompanyName;
			newItem.ContactName = item.ContactName;
			newItem.ContactTitle = item.ContactTitle;
			newItem.Country = item.Country;
			newItem.Fax = item.Fax;
			newItem.HomePage = item.HomePage;
			newItem.Phone = item.Phone;
			newItem.PostalCode = item.PostalCode;
			newItem.Region = item.Region;
			newItem.SupplierID = item.SupplierID;
			return newItem;
		}

		#endregion

		#region IsEquivalent

		/// <summary>
		/// Determines if all of the fields for the specified object exactly matches the current object.
		/// </summary>
		/// <param name="item">The object to compare</param>
		public override bool IsEquivalent(nHydrate.EFCore.DataAccess.INHEntityObject item)
		{
			return ((System.IEquatable<Acme.Northwind.EFDAL.Interfaces.Entity.ISupplier>)this).Equals(item as Acme.Northwind.EFDAL.Interfaces.Entity.ISupplier);
		}

		#endregion

		#region GetValue

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		public object GetValue(FieldNameConstants field)
		{
			return GetValue(field, null);
		}

		/// <summary>
		/// Gets the value of one of this object's properties.
		/// </summary>
		public object GetValue(FieldNameConstants field, object defaultValue)
		{
			if (field == FieldNameConstants.Address)
				return ((this.Address == null) ? defaultValue : this.Address);
			if (field == FieldNameConstants.City)
				return ((this.City == null) ? defaultValue : this.City);
			if (field == FieldNameConstants.CompanyName)
				return this.CompanyName;
			if (field == FieldNameConstants.ContactName)
				return ((this.ContactName == null) ? defaultValue : this.ContactName);
			if (field == FieldNameConstants.ContactTitle)
				return ((this.ContactTitle == null) ? defaultValue : this.ContactTitle);
			if (field == FieldNameConstants.Country)
				return ((this.Country == null) ? defaultValue : this.Country);
			if (field == FieldNameConstants.Fax)
				return ((this.Fax == null) ? defaultValue : this.Fax);
			if (field == FieldNameConstants.HomePage)
				return ((this.HomePage == null) ? defaultValue : this.HomePage);
			if (field == FieldNameConstants.Phone)
				return ((this.Phone == null) ? defaultValue : this.Phone);
			if (field == FieldNameConstants.PostalCode)
				return ((this.PostalCode == null) ? defaultValue : this.PostalCode);
			if (field == FieldNameConstants.Region)
				return ((this.Region == null) ? defaultValue : this.Region);
			if (field == FieldNameConstants.SupplierID)
				return this.SupplierID;
			if (field == FieldNameConstants.CreatedBy)
				return ((this.CreatedBy == null) ? defaultValue : this.CreatedBy);
			if (field == FieldNameConstants.CreatedDate)
				return ((this.CreatedDate == null) ? defaultValue : this.CreatedDate);
			if (field == FieldNameConstants.ModifiedBy)
				return ((this.ModifiedBy == null) ? defaultValue : this.ModifiedBy);
			if (field == FieldNameConstants.ModifiedDate)
				return ((this.ModifiedDate == null) ? defaultValue : this.ModifiedDate);
			throw new Exception("Field '" + field.ToString() + "' not found!");
		}

		#endregion

		#region SetValue

		/// <summary>
		/// Assigns a value to a field on this object.
		/// </summary>
		/// <param name="field">The field to set</param>
		/// <param name="newValue">The new value to assign to the field</param>
		public virtual void SetValue(FieldNameConstants field, object newValue)
		{
			SetValue(field, newValue, false);
		}

		/// <summary>
		/// Assigns a value to a field on this object.
		/// </summary>
		/// <param name="field">The field to set</param>
		/// <param name="newValue">The new value to assign to the field</param>
		/// <param name="fixLength">Determines if the length should be truncated if too long. When false, an error will be raised if data is too large to be assigned to the field.</param>
		public virtual void SetValue(FieldNameConstants field, object newValue, bool fixLength)
		{
			if (field == FieldNameConstants.Address)
			{
				this.Address = GlobalValues.SetValueHelperInternal((string)newValue, fixLength, GetMaxLength(field));
			}
			else if (field == FieldNameConstants.City)
			{
				this.City = GlobalValues.SetValueHelperInternal((string)newValue, fixLength, GetMaxLength(field));
			}
			else if (field == FieldNameConstants.CompanyName)
			{
				this.CompanyName = GlobalValues.SetValueHelperInternal((string)newValue, fixLength, GetMaxLength(field));
			}
			else if (field == FieldNameConstants.ContactName)
			{
				this.ContactName = GlobalValues.SetValueHelperInternal((string)newValue, fixLength, GetMaxLength(field));
			}
			else if (field == FieldNameConstants.ContactTitle)
			{
				this.ContactTitle = GlobalValues.SetValueHelperInternal((string)newValue, fixLength, GetMaxLength(field));
			}
			else if (field == FieldNameConstants.Country)
			{
				this.Country = GlobalValues.SetValueHelperInternal((string)newValue, fixLength, GetMaxLength(field));
			}
			else if (field == FieldNameConstants.Fax)
			{
				this.Fax = GlobalValues.SetValueHelperInternal((string)newValue, fixLength, GetMaxLength(field));
			}
			else if (field == FieldNameConstants.HomePage)
			{
				this.HomePage = GlobalValues.SetValueHelperInternal((string)newValue, fixLength, GetMaxLength(field));
			}
			else if (field == FieldNameConstants.Phone)
			{
				this.Phone = GlobalValues.SetValueHelperInternal((string)newValue, fixLength, GetMaxLength(field));
			}
			else if (field == FieldNameConstants.PostalCode)
			{
				this.PostalCode = GlobalValues.SetValueHelperInternal((string)newValue, fixLength, GetMaxLength(field));
			}
			else if (field == FieldNameConstants.Region)
			{
				this.Region = GlobalValues.SetValueHelperInternal((string)newValue, fixLength, GetMaxLength(field));
			}
			else if (field == FieldNameConstants.SupplierID)
			{
				throw new Exception("Field '" + field.ToString() + "' is a primary key and cannot be set!");
			}
			else
				throw new Exception("Field '" + field.ToString() + "' not found!");
		}

		#endregion

		#region Navigation Properties

		/// <summary>
		/// The back navigation definition for walking [Supplier]->[Product]
		/// Relationship Links: 
		/// [Suppliers.SupplierID = Products.SupplierID] (Optional)
		/// </summary>
		[XmlIgnoreAttribute()]
		[SoapIgnoreAttribute()]
		[EdmRelationshipNavigationPropertyAttribute("Acme.Northwind.EFDAL.Entity", "FK__Product_Supplier", "ProductList")]
		public virtual EntityCollection<Acme.Northwind.EFDAL.Entity.Product> ProductList
		{
			get
			{
				//Eager load
				var retval = ((System.Data.Objects.DataClasses.IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Acme.Northwind.EFDAL.Entity.Product>("Acme.Northwind.EFDAL.Entity.FK__Product_Supplier", "ProductList");
				if (!retval.IsLoaded  && this.EntityState != System.Data.EntityState.Added && this.EntityState != System.Data.EntityState.Detached)
				{
					retval.Load();
				}
				return retval;
			}
		}

		#region ISupplier Interface

		System.Collections.Generic.ICollection<Acme.Northwind.EFDAL.Interfaces.Entity.IProduct> Acme.Northwind.EFDAL.Interfaces.Entity.ISupplier.ProductList
		{
			get { return (System.Collections.Generic.ICollection<Acme.Northwind.EFDAL.Interfaces.Entity.IProduct>)(System.Collections.Generic.ICollection<Product>)this.ProductList; }
		}

		#endregion

		#endregion

		#region Static SQL Methods

		internal static string GetFieldAliasFromFieldNameSqlMapping(string alias)
		{
			alias = alias.Replace("[", string.Empty).Replace("]", string.Empty);
			switch (alias.ToLower())
			{
				case "address": return "address";
				case "city": return "city";
				case "companyname": return "companyname";
				case "contactname": return "contactname";
				case "contacttitle": return "contacttitle";
				case "country": return "country";
				case "fax": return "fax";
				case "homepage": return "homepage";
				case "phone": return "phone";
				case "postalcode": return "postalcode";
				case "region": return "region";
				case "supplierid": return "supplierid";
				case "createddate": return "createddate";
				case "createdby": return "createdby";
				case "modifieddate": return "modifieddate";
				case "modifiedby": return "modifiedby";
				case "timestamp": return "timestamp";
				default: throw new Exception("The select clause is not valid.");
			}
		}

		internal static string GetTableFromFieldAliasSqlMapping(string alias)
		{
			switch (alias.ToLower())
			{
				case "address": return "Suppliers";
				case "city": return "Suppliers";
				case "companyname": return "Suppliers";
				case "contactname": return "Suppliers";
				case "contacttitle": return "Suppliers";
				case "country": return "Suppliers";
				case "fax": return "Suppliers";
				case "homepage": return "Suppliers";
				case "phone": return "Suppliers";
				case "postalcode": return "Suppliers";
				case "region": return "Suppliers";
				case "supplierid": return "Suppliers";
				case "createdby": return "Suppliers";
				case "createddate": return "Suppliers";
				case "modifiedby": return "Suppliers";
				case "modifieddate": return "Suppliers";
				case "timestamp": return "Suppliers";
				default: throw new Exception("The select clause is not valid.");
			}
		}

		internal static string GetTableFromFieldNameSqlMapping(string field)
		{
			switch (field.ToLower())
			{
				case "address": return "Suppliers";
				case "city": return "Suppliers";
				case "companyname": return "Suppliers";
				case "contactname": return "Suppliers";
				case "contacttitle": return "Suppliers";
				case "country": return "Suppliers";
				case "fax": return "Suppliers";
				case "homepage": return "Suppliers";
				case "phone": return "Suppliers";
				case "postalcode": return "Suppliers";
				case "region": return "Suppliers";
				case "supplierid": return "Suppliers";
				case "createdby": return "Suppliers";
				case "createddate": return "Suppliers";
				case "modifiedby": return "Suppliers";
				case "modifieddate": return "Suppliers";
				case "timestamp": return "Suppliers";
				default: throw new Exception("The select clause is not valid.");
			}
		}

		internal static string GetRemappedLinqSql(string sql, string parentAlias, LinqSQLFromClauseCollection childTables)
		{
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[address\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "Suppliers") + "].[address]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[city\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "Suppliers") + "].[city]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[companyname\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "Suppliers") + "].[companyname]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[contactname\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "Suppliers") + "].[contactname]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[contacttitle\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "Suppliers") + "].[contacttitle]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[country\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "Suppliers") + "].[country]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[fax\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "Suppliers") + "].[fax]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[homepage\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "Suppliers") + "].[homepage]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[phone\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "Suppliers") + "].[phone]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[postalcode\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "Suppliers") + "].[postalcode]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[region\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "Suppliers") + "].[region]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[supplierid\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "Suppliers") + "].[supplierid]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[createdby\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "Suppliers") + "].[createdby]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[createddate\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "Suppliers") + "].[createddate]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[modifiedby\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "Suppliers") + "].[modifiedby]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[modifieddate\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "Suppliers") + "].[modifieddate]", RegexOptions.IgnoreCase);
			sql = System.Text.RegularExpressions.Regex.Replace(sql, "\\[" + parentAlias + "\\]\\.\\[timestamp\\]", "[" + childTables.GetBaseAliasTable(parentAlias, "Suppliers") + "].[timestamp]", RegexOptions.IgnoreCase);
			return sql;
		}

		#endregion

		#region DeleteData

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		/// <param name="where">The expression that determines the records deleted</param>
		/// <returns>The number of rows deleted</returns>
		public static int DeleteData(Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, bool>> where)
		{
			return DeleteData(where, new nHydrate.EFCore.DataAccess.QueryOptimizer(), Acme.Northwind.EFDAL.NorthwindEntities.GetConnectionString());
		}

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		/// <param name="where">The expression that determines the records deleted</param>
		/// <param name="connectionString">The database connection string to use for this access</param>
		/// <returns>The number of rows deleted</returns>
		public static int DeleteData(Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, bool>> where, string connectionString)
		{
			return DeleteData(where, new nHydrate.EFCore.DataAccess.QueryOptimizer(), connectionString);
		}

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		/// <param name="where">The expression that determines the records deleted</param>
		/// <param name="optimizer">The optimization object to use for running queries</param>
		/// <returns>The number of rows deleted</returns>
		public static int DeleteData(Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, bool>> where, nHydrate.EFCore.DataAccess.QueryOptimizer optimizer)
		{
			return DeleteData(where, optimizer, Acme.Northwind.EFDAL.NorthwindEntities.GetConnectionString());
		}

		/// <summary>
		/// Delete all records that match a where condition
		/// </summary>
		/// <param name="where">The expression that determines the records deleted</param>
		/// <param name="optimizer">The optimization object to use for running queries</param>
		/// <param name="connectionString">The database connection string to use for this access</param>
		/// <returns>The number of rows deleted</returns>
		public static int DeleteData(Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, bool>> where, nHydrate.EFCore.DataAccess.QueryOptimizer optimizer, string connectionString)
		{
			if (optimizer == null)
				optimizer = new nHydrate.EFCore.DataAccess.QueryOptimizer();

			var dc = new DataContext(Acme.Northwind.EFDAL.DBHelper.GetConnection(Acme.Northwind.EFDAL.Util.StripEFCS2Normal(connectionString)));
			var template = dc.GetTable<Acme.Northwind.EFDAL.SupplierQuery>();
			var cmd = nHydrate.EFCore.DataAccess.BusinessEntityQuery.GetCommand<Acme.Northwind.EFDAL.SupplierQuery>(dc, template, where);
			cmd.CommandTimeout = 30;

			var parser = LinqSQLParser.Create(cmd.CommandText, LinqSQLParser.ObjectTypeConstants.Table);
			string sql = "SELECT [t0].[SupplierID] INTO #t\r\n";
			sql += parser.GetFromClause(optimizer) + "\r\n";
			sql += parser.GetWhereClause();
			sql += "\r\n";

			var noLock = string.Empty;
			noLock = (optimizer.NoLocking ? "WITH (NOLOCK) " : string.Empty);
			sql += "DELETE [Suppliers] FROM [dbo].[Suppliers] " + noLock + "INNER JOIN #t ON [dbo].[Suppliers].[SupplierID] = #t.[SupplierID]\r\n";
			sql += ";select @@rowcount";
			cmd.CommandText = sql;
			dc.Connection.Open();
			var startTime = DateTime.Now;
			object p = cmd.ExecuteScalar();
			var endTime = DateTime.Now;
			optimizer.TotalMilliseconds = (long)endTime.Subtract(startTime).TotalMilliseconds;
			dc.Connection.Close();
			return (int)p;
		}

		#endregion

		#region UpdateData

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, int>> select, Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, bool>> where, int newValue)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Supplier, Acme.Northwind.EFDAL.SupplierQuery, int>.UpdateData(select, where, newValue, "Suppliers", GetDatabaseFieldName, true);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, int?>> select, Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, bool>> where, int? newValue)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Supplier, Acme.Northwind.EFDAL.SupplierQuery, int?>.UpdateData(select, where, newValue, "Suppliers", GetDatabaseFieldName, true);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The daatbase connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, int>> select, Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, bool>> where, int newValue, string connectionString)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Supplier, Acme.Northwind.EFDAL.SupplierQuery, int>.UpdateData(select, where, newValue, "Suppliers", GetDatabaseFieldName, true, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The daatbase connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, int?>> select, Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, bool>> where, int? newValue, string connectionString)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Supplier, Acme.Northwind.EFDAL.SupplierQuery, int?>.UpdateData(select, where, newValue, "Suppliers", GetDatabaseFieldName, true, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, Single>> select, Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, bool>> where, Single newValue)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Supplier, Acme.Northwind.EFDAL.SupplierQuery, Single>.UpdateData(select, where, newValue, "Suppliers", GetDatabaseFieldName, true);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, Single?>> select, Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, bool>> where, Single? newValue)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Supplier, Acme.Northwind.EFDAL.SupplierQuery, Single?>.UpdateData(select, where, newValue, "Suppliers", GetDatabaseFieldName, true);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The daatbase connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, Single>> select, Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, bool>> where, Single newValue, string connectionString)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Supplier, Acme.Northwind.EFDAL.SupplierQuery, Single>.UpdateData(select, where, newValue, "Suppliers", GetDatabaseFieldName, true, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The daatbase connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, Single?>> select, Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, bool>> where, Single? newValue, string connectionString)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Supplier, Acme.Northwind.EFDAL.SupplierQuery, Single?>.UpdateData(select, where, newValue, "Suppliers", GetDatabaseFieldName, true, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, decimal>> select, Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, bool>> where, decimal newValue)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Supplier, Acme.Northwind.EFDAL.SupplierQuery, decimal>.UpdateData(select, where, newValue, "Suppliers", GetDatabaseFieldName, true);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, decimal?>> select, Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, bool>> where, decimal? newValue)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Supplier, Acme.Northwind.EFDAL.SupplierQuery, decimal?>.UpdateData(select, where, newValue, "Suppliers", GetDatabaseFieldName, true);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The daatbase connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, decimal>> select, Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, bool>> where, decimal newValue, string connectionString)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Supplier, Acme.Northwind.EFDAL.SupplierQuery, decimal>.UpdateData(select, where, newValue, "Suppliers", GetDatabaseFieldName, true, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The daatbase connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, decimal?>> select, Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, bool>> where, decimal? newValue, string connectionString)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Supplier, Acme.Northwind.EFDAL.SupplierQuery, decimal?>.UpdateData(select, where, newValue, "Suppliers", GetDatabaseFieldName, true, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, double>> select, Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, bool>> where, double newValue)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Supplier, Acme.Northwind.EFDAL.SupplierQuery, double>.UpdateData(select, where, newValue, "Suppliers", GetDatabaseFieldName, true);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, double?>> select, Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, bool>> where, double? newValue)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Supplier, Acme.Northwind.EFDAL.SupplierQuery, double?>.UpdateData(select, where, newValue, "Suppliers", GetDatabaseFieldName, true);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The daatbase connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, double>> select, Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, bool>> where, double newValue, string connectionString)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Supplier, Acme.Northwind.EFDAL.SupplierQuery, double>.UpdateData(select, where, newValue, "Suppliers", GetDatabaseFieldName, true, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The daatbase connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, double?>> select, Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, bool>> where, double? newValue, string connectionString)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Supplier, Acme.Northwind.EFDAL.SupplierQuery, double?>.UpdateData(select, where, newValue, "Suppliers", GetDatabaseFieldName, true, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, short>> select, Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, bool>> where, short newValue)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Supplier, Acme.Northwind.EFDAL.SupplierQuery, short>.UpdateData(select, where, newValue, "Suppliers", GetDatabaseFieldName, true);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, short?>> select, Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, bool>> where, short? newValue)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Supplier, Acme.Northwind.EFDAL.SupplierQuery, short?>.UpdateData(select, where, newValue, "Suppliers", GetDatabaseFieldName, true);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The daatbase connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, short>> select, Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, bool>> where, short newValue, string connectionString)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Supplier, Acme.Northwind.EFDAL.SupplierQuery, short>.UpdateData(select, where, newValue, "Suppliers", GetDatabaseFieldName, true, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The daatbase connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, short?>> select, Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, bool>> where, short? newValue, string connectionString)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Supplier, Acme.Northwind.EFDAL.SupplierQuery, short?>.UpdateData(select, where, newValue, "Suppliers", GetDatabaseFieldName, true, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, string>> select, Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, bool>> where, string newValue)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Supplier, Acme.Northwind.EFDAL.SupplierQuery, string>.UpdateData(select, where, newValue, "Suppliers", GetDatabaseFieldName, true);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The daatbase connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, string>> select, Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, bool>> where, string newValue, string connectionString)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Supplier, Acme.Northwind.EFDAL.SupplierQuery, string>.UpdateData(select, where, newValue, "Suppliers", GetDatabaseFieldName, true, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, DateTime>> select, Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, bool>> where, DateTime newValue)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Supplier, Acme.Northwind.EFDAL.SupplierQuery, DateTime>.UpdateData(select, where, newValue, "Suppliers", GetDatabaseFieldName, true);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, DateTime?>> select, Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, bool>> where, DateTime? newValue)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Supplier, Acme.Northwind.EFDAL.SupplierQuery, DateTime?>.UpdateData(select, where, newValue, "Suppliers", GetDatabaseFieldName, true);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The daatbase connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, DateTime>> select, Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, bool>> where, DateTime newValue, string connectionString)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Supplier, Acme.Northwind.EFDAL.SupplierQuery, DateTime>.UpdateData(select, where, newValue, "Suppliers", GetDatabaseFieldName, true, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The daatbase connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, DateTime?>> select, Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, bool>> where, DateTime? newValue, string connectionString)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Supplier, Acme.Northwind.EFDAL.SupplierQuery, DateTime?>.UpdateData(select, where, newValue, "Suppliers", GetDatabaseFieldName, true, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, bool>> select, Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, bool>> where, bool newValue)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Supplier, Acme.Northwind.EFDAL.SupplierQuery, bool>.UpdateData(select, where, newValue, "Suppliers", GetDatabaseFieldName, true);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, bool?>> select, Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, bool>> where, bool? newValue)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Supplier, Acme.Northwind.EFDAL.SupplierQuery, bool?>.UpdateData(select, where, newValue, "Suppliers", GetDatabaseFieldName, true);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The daatbase connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, bool>> select, Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, bool>> where, bool newValue, string connectionString)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Supplier, Acme.Northwind.EFDAL.SupplierQuery, bool>.UpdateData(select, where, newValue, "Suppliers", GetDatabaseFieldName, true, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The daatbase connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, bool?>> select, Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, bool>> where, bool? newValue, string connectionString)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Supplier, Acme.Northwind.EFDAL.SupplierQuery, bool?>.UpdateData(select, where, newValue, "Suppliers", GetDatabaseFieldName, true, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, Guid>> select, Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, bool>> where, Guid newValue)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Supplier, Acme.Northwind.EFDAL.SupplierQuery, Guid>.UpdateData(select, where, newValue, "Suppliers", GetDatabaseFieldName, true);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, Guid?>> select, Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, bool>> where, Guid? newValue)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Supplier, Acme.Northwind.EFDAL.SupplierQuery, Guid?>.UpdateData(select, where, newValue, "Suppliers", GetDatabaseFieldName, true);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The daatbase connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, Guid>> select, Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, bool>> where, Guid newValue, string connectionString)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Supplier, Acme.Northwind.EFDAL.SupplierQuery, Guid>.UpdateData(select, where, newValue, "Suppliers", GetDatabaseFieldName, true, connectionString);
		}

		/// <summary>
		/// Update the specified field that matches the Where expression with the new data value
		/// </summary>
		/// <param name="select">The field to update</param>
		/// <param name="where">The expression that determines the records selected</param>
		/// <param name="newValue">The new value to set the specified field in all matching records</param>
		/// <param name="connectionString">The daatbase connection string</param>
		/// <returns>The number of records affected</returns>
		public static int UpdateData(Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, Guid?>> select, Expression<Func<Acme.Northwind.EFDAL.SupplierQuery, bool>> where, Guid? newValue, string connectionString)
		{
			return BusinessObjectQuery<Acme.Northwind.EFDAL.Entity.Supplier, Acme.Northwind.EFDAL.SupplierQuery, Guid?>.UpdateData(select, where, newValue, "Suppliers", GetDatabaseFieldName, true, connectionString);
		}

		#endregion

		#region GetDatabaseFieldName

		/// <summary>
		/// Returns the actual database name of the specified field.
		/// </summary>
		internal static string GetDatabaseFieldName(Supplier.FieldNameConstants field)
		{
			return GetDatabaseFieldName(field.ToString());
		}

		/// <summary>
		/// Returns the actual database name of the specified field.
		/// </summary>
		internal static string GetDatabaseFieldName(string field)
		{
			switch (field)
			{
				case "Address": return "Address";
				case "City": return "City";
				case "CompanyName": return "CompanyName";
				case "ContactName": return "ContactName";
				case "ContactTitle": return "ContactTitle";
				case "Country": return "Country";
				case "Fax": return "Fax";
				case "HomePage": return "HomePage";
				case "Phone": return "Phone";
				case "PostalCode": return "PostalCode";
				case "Region": return "Region";
				case "SupplierID": return "SupplierID";
				case "CreatedBy": return "CreatedBy";
				case "CreatedDate": return "CreatedDate";
				case "ModifiedBy": return "ModifiedBy";
				case "ModifiedDate": return "ModifiedDate";
				case "Timestamp": return "Timestamp";
			}
			return string.Empty;
		}

		#endregion

		#region Context

		NorthwindEntities IEntityWithContext.Context
		{
			get { return _internalContext; }
			set { _internalContext = value; }
		}
		private NorthwindEntities _internalContext = null;

		#endregion

		#region Auditing
		string nHydrate.EFCore.DataAccess.IAuditable.CreatedBy
		{
			get { return this.CreatedBy; }
		}

		System.DateTime? nHydrate.EFCore.DataAccess.IAuditable.CreatedDate
		{
			get { return this.CreatedDate; }
		}

		bool nHydrate.EFCore.DataAccess.IAuditable.IsCreateAuditImplemented
		{
			get { return true; }
		}

		bool nHydrate.EFCore.DataAccess.IAuditable.IsModifyAuditImplemented
		{
			get { return true; }
		}

		bool nHydrate.EFCore.DataAccess.IAuditable.IsTimestampAuditImplemented
		{
			get { return true; }
		}

		string nHydrate.EFCore.DataAccess.IAuditable.ModifiedBy
		{
			get { return this.ModifiedBy; }
		}

		System.DateTime? nHydrate.EFCore.DataAccess.IAuditable.ModifiedDate
		{
			get { return this.ModifiedDate; }
		}

		byte[] nHydrate.EFCore.DataAccess.IAuditable.TimeStamp
		{
			get { return this.Timestamp; }
		}

		internal virtual void ResetModifiedBy(string modifier)
		{
			if (this.ModifiedBy != modifier)
				this.ModifiedBy = modifier;
		}

		internal virtual void ResetCreatedBy(string modifier)
		{
			if (this.CreatedBy != modifier)
				this.CreatedBy = modifier;
			this.ResetModifiedBy(modifier);
		}
		#endregion

		#region Static Methods

		/// <summary>
		/// Creates and returns a metadata object for an entity type
		/// </summary>
		/// <returns>A metadata object for the entity types in this assembly</returns>
		public static Acme.Northwind.EFDAL.Interfaces.Entity.Metadata.SupplierMetadata GetMetadata()
		{
			var a = typeof(Supplier).GetCustomAttributes(typeof(System.ComponentModel.DataAnnotations.MetadataTypeAttribute), true).FirstOrDefault();
			if (a == null) return null;
			var t = ((System.ComponentModel.DataAnnotations.MetadataTypeAttribute)a).MetadataClassType;
			if (t == null) return null;
			return Activator.CreateInstance(t) as Acme.Northwind.EFDAL.Interfaces.IMetadata as Acme.Northwind.EFDAL.Interfaces.Entity.Metadata.SupplierMetadata;
		}

		#endregion

		#region Equals
		/// <summary>
		/// Compares two objects of 'Supplier' type and determines if all properties match
		/// </summary>
		/// <returns>True if all properties match, false otherwise</returns>
		bool System.IEquatable<Acme.Northwind.EFDAL.Interfaces.Entity.ISupplier>.Equals(Acme.Northwind.EFDAL.Interfaces.Entity.ISupplier other)
		{
			return this.Equals(other);
		}

		/// <summary>
		/// Compares two objects of 'Supplier' type and determines if all properties match
		/// </summary>
		/// <returns>True if all properties match, false otherwise</returns>
		public override bool Equals(object obj)
		{
			var other = obj as Acme.Northwind.EFDAL.Entity.Supplier;
			if (other == null) return false;
			return (
				other.Address == this.Address &&
				other.City == this.City &&
				other.CompanyName == this.CompanyName &&
				other.ContactName == this.ContactName &&
				other.ContactTitle == this.ContactTitle &&
				other.Country == this.Country &&
				other.Fax == this.Fax &&
				other.HomePage == this.HomePage &&
				other.Phone == this.Phone &&
				other.PostalCode == this.PostalCode &&
				other.Region == this.Region &&
				other.SupplierID == this.SupplierID
				);
		}

		/// <summary>
		/// Serves as a hash function for this type.
		/// </summary>
		public override int GetHashCode()
		{
			return base.GetHashCode();
		}

		#endregion

		#region IDataErrorInfo
		/// <summary />
		string System.ComponentModel.IDataErrorInfo.Error
		{
			get { return this.GetObjectDataErrorInfo(); }
		}

		/// <summary />
		/// <param name="columnName"></param>
		/// <returns></returns>
		string System.ComponentModel.IDataErrorInfo.this[string columnName]
		{
			get
			{
				if (string.IsNullOrEmpty(columnName))
					return string.Empty;

				var retval = GetObjectPropertyDataErrorInfo(columnName);
				if (string.IsNullOrEmpty(retval))
				{
					switch (columnName.ToLower())
					{
						case "companyname":
							if (string.IsNullOrEmpty(this.CompanyName) || string.IsNullOrEmpty(this.CompanyName.Trim()))
								retval = "CompanyName is required!";
							break;
						default:
							break;
					}

				}
				return retval;
			}
		}
		#endregion

	}

	partial class Supplier : nHydrate.EFCore.DataAccess.ICreatedAudit, nHydrate.EFCore.DataAccess.IModifiedAudit, nHydrate.EFCore.DataAccess.IConcurrencyAudit
	{
		#region ICreatedAudit Members

		string ICreatedAudit.CreatedBy
		{
			get { return this.CreatedBy; }
		}

		DateTime? ICreatedAudit.CreatedDate
		{
			get { return this.CreatedDate; }
		}

		#endregion

		#region IModifiedAudit Members

		string IModifiedAudit.ModifiedBy
		{
			get { return this.ModifiedBy; }
		}

		DateTime? IModifiedAudit.ModifiedDate
		{
			get { return this.ModifiedDate; }
		}

		#endregion

		#region IConcurrencyAudit Members

		byte[] IConcurrencyAudit.TimeStamp
		{
			get { return this.Timestamp; }
		}

		#endregion

	}

}

