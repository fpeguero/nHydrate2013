//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects.DataClasses;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;

namespace Acme.Northwind.EFDAL
{
	internal class DBHelper
	{
		internal static IDbConnection GetConnection()
		{
			return GetConnection(Acme.Northwind.EFDAL.NorthwindEntities.GetConnectionString());
		}

		internal static IDbConnection GetConnection(string connectionString)
		{
			return new SqlConnection(connectionString);
		}

		internal static IDbCommand GetCommand(string commandText, CommandType commandType, IDbConnection connection)
		{
			var cmd = new SqlCommand(commandText);
			cmd.CommandType = commandType;
			cmd.Connection = (SqlConnection)connection;
			return cmd;
		}

		internal static void AddParameter(IDbCommand cmd, string parameterName, object value)
		{
			var sqlParam = new SqlParameter(parameterName, value);
			cmd.Parameters.Add(sqlParam);
		}

		internal static void AddReturnParameter(IDbCommand cmd)
		{
			var sqlParam = new SqlParameter();
			sqlParam.ParameterName = "@RETURN_VALUE";
			sqlParam.Direction = ParameterDirection.ReturnValue;
			cmd.Parameters.Add(sqlParam);
		}

	}

	internal interface IEntityWithContext
	{
		NorthwindEntities Context { get; set; }
	}

	internal class Util
	{
		internal static DatabasePlatformConstants GetDefinedPlatform()
		{
			var tempPlatform = System.Configuration.ConfigurationManager.AppSettings["NorthwindEntities.Platform"];
			var platformValue = DatabasePlatformConstants.SQLServer;
			if (!Enum.TryParse(tempPlatform, true, out platformValue)) platformValue = DatabasePlatformConstants.SQLServer;
			return platformValue;
		}

		internal static string ConvertNormalCS2EFFromConfig(string configSettings)
		{
			return ConvertNormalCS2EFFromConfig(configSettings, GetDefinedPlatform());
		}

		internal static string ConvertNormalCS2EFFromConfig(string configSettings, DatabasePlatformConstants platform)
		{
			if (string.IsNullOrEmpty(configSettings)) return configSettings;
			var arr = configSettings.Split('=');
			if (arr.Length != 2) return configSettings;
			if (arr[0] != "name") return configSettings;
			try
			{
				var cs = System.Configuration.ConfigurationManager.ConnectionStrings[arr[1]].ConnectionString;
				if (!cs.StartsWith("metadata=")) return ConvertNormalCS2EF(cs, platform);
				return configSettings;
			}
			catch
			{
				return configSettings;
			}
		}

		internal static string ConvertNormalCS2EF(string connectionString)
		{
			return ConvertNormalCS2EF(connectionString, GetDefinedPlatform());
		}

		internal static string ConvertNormalCS2EF(string connectionString, DatabasePlatformConstants platform)
		{
			if (string.IsNullOrEmpty(connectionString)) return connectionString;
			if (connectionString.StartsWith("metadata=")) return connectionString;

			if (platform == DatabasePlatformConstants.MySql)
				return @"metadata=res://*/Acme.Northwind.EFDAL.Northwind.MySql.csdl|res://*/Acme.Northwind.EFDAL.Northwind.MySql.ssdl|res://*/Acme.Northwind.EFDAL.Northwind.msl;provider=MySql.Data.MySqlClient;provider connection string='" + connectionString + "'";
			else if (platform == DatabasePlatformConstants.SQLServer)
				return @"metadata=res://*/Acme.Northwind.EFDAL.Northwind.csdl|res://*/Acme.Northwind.EFDAL.Northwind.ssdl|res://*/Acme.Northwind.EFDAL.Northwind.msl;provider=System.Data.SqlClient;provider connection string='" + connectionString + "'";
			else
				throw new Exception("Unknown platform!");
		}

		internal static string StripEFCS2Normal(string connectionString)
		{
			const string PROVIDER = "provider connection string";
			if (connectionString.StartsWith("metadata="))
			{
				var retval = string.Empty;
				var index = connectionString.IndexOf(PROVIDER);

				var index1 = -1;
				var index2 = -1;
				if (index == -1) return connectionString;

				var foundEQ = false;
				for (var ii = index + PROVIDER.Length; ii < connectionString.Length; ii++)
				{
					if (connectionString[ii] == '=')
					{
						foundEQ = true;
					}
					else if (foundEQ)
					{
						if (connectionString.Substring(ii, 1) == "\"")
						{
							index1 = ii + 1;
							index2 = connectionString.IndexOf("\"", ii + 1);
						}
						else if (connectionString.Substring(ii, 1) == "'")
						{
							index1 = ii + 1;
							index2 = connectionString.IndexOf("'", ii + 1);
						}
						else if (connectionString.Substring(ii, 6) == "&quot;")
						{
							index1 = ii + 6;
							index2 = connectionString.IndexOf("&quot;", ii + 1);
						}
					}

					if (index1 != -1 && index2 != -1)
					{
						return connectionString.Substring(index1, index2 - index1);
					}

				}

			}
			return connectionString;
		}

	}

}

