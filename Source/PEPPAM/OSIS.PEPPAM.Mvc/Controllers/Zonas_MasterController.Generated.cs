//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Creador : Administrator
//    Dominio : OSISPC
//    Pc      : OSISPC
//    Fecha   : 6/19/2014 1:29:11 PM
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System; 
using System.Collections.Generic; 
using System.Linq; 
using System.Web.Mvc; 
using System.Web; 
using System.Web.UI; 
using CodeFluent.Runtime; 
using OSIS.PEPPAM.Mvc.Models; 
using OSIS.PEPPAM.Mvc.Extensions.Controllers; 
using OSIS.PEPPAM.Mvc.Models.Shared; 
using OSIS.PEPPAM.Mvc.Extensions.ActionResults; 
using OSIS.PEPPAM.Mvc.Extensions.Controllers; 
using OSIS.PEPPAM.Mvc.Extensions.Helpers; 
using OSIS.PEPPAM.Mvc.Models.Shared; 
using OSIS.PEPPAM.Mvc.Models; 
using OSIS.PEPPAM.Mvc.UI; 
 
namespace OSIS.PEPPAM.Mvc.Controllers 
{ 
    public partial class Zonas_MasterController : Zonas_MasterControllerBase 
    { 

    } 
 
	public partial class Zonas_MasterControllerBase : BaseController 
	{ 
		#region Members 
 

 
        #endregion 
 
        #region Constructors 
 

 
        #endregion 
 
		#region Index 
 

public virtual ActionResult Index()
{
    var model = new Zonas_MasterModel();

    ViewBag.PageIndex = this.GetPageIndex();
    ViewBag.PageSize = this.GetPageSize();
    ViewBag.SearchValue = this.GetSearchValue();

    return View(model);
}


[HttpPost]
public virtual ActionResult Load(GridRequestViewModel gridRequest)
{
    OrderByArgumentCollection orderByArguments = new OrderByArgumentCollection();
    orderByArguments.Add("[" + gridRequest.SortColumnName + "]", gridRequest.SortDirection);

    PageOptions pageOptions = new PageOptions();
    pageOptions.OrderByArguments = orderByArguments;

    var totalCount = 0;

    var allzonasMaster = Zonas_MasterModel.PageLoadAllPaging(1 + gridRequest.RowStartIndex/gridRequest.RowCount,
        gridRequest.RowCount, gridRequest.Search, pageOptions, out totalCount);

    var displayRecords = allzonasMaster.Count;
    var totalRecords = totalCount;

    var dateFormat = System.Globalization.CultureInfo.CurrentCulture.TwoLetterISOLanguageName == "en"
        ? "MM/dd/yyyy"
        : "dd/MM/yyyy";
    System.Globalization.DateTimeFormatInfo dtfi =
        System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat;
    dtfi.DateSeparator = "/";

    return Json(new
    {
        iTotalDisplayRecords = displayRecords,
        iTotalRecords = totalRecords,
        sEcho = gridRequest.GridCustomData,
        aaData =
            allzonasMaster.Select(
                d =>
                    new
                    {
d.Zona_Secuencia,d.Zona_Descripcion,d.Zona_Nota,d.Registro_Estado,Registro_Fecha = d.Registro_Fecha.ToString(dateFormat, dtfi),d.Registro_Usuario
                    })
    });

}

public virtual ActionResult Report()
{
    var totalCount = 0;
    var allzonasMaster = Zonas_MasterModel.LoadAllPaging(this.GetSearchValue(), out totalCount);

    var dateFormat = System.Globalization.CultureInfo.CurrentCulture.TwoLetterISOLanguageName == "en"
        ? "MM/dd/yyyy"
        : "dd/MM/yyyy";
    System.Globalization.DateTimeFormatInfo dtfi =
        System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat;
    dtfi.DateSeparator = "/";
    return new CsvReportResult("Zonas_Master",
        allzonasMaster.Select(
            d =>
                new
                {
d.Zona_Secuencia,d.Zona_Descripcion,d.Zona_Nota,d.Registro_Estado,Registro_Fecha = d.Registro_Fecha.ToString(dateFormat, dtfi),d.Registro_Usuario
                }));
}


[HttpPost]
public virtual ActionResult Delete( string entityKey)

{
    try
    {
        var deleteModel  = Zonas_MasterModel.LoadByEntityKey(entityKey);
       if (deleteModel.Delete())
       {
          return Json(new { cssMainClass = "success", title = Messages.GetOrSetMensaje("MENSAJE_OPERACION_REALIZDA_SASTIFACTORIAMENTE_HEADER"), body = Messages.GetOrSetMensaje("MENSAJE_NOTIFICACION_REGISTRO_BORRADO") }, JsonRequestBehavior.AllowGet);
       }
       else
       {
          return Json(new { cssMainClass = "warning", title = Messages.GetOrSetMensaje("MENSAJE_PRECAUSION_HEADER"), body = Messages.GetOrSetMensaje("MENSAJE_NOTIFICACION_REGISTRO_NO_BORRADO") }, JsonRequestBehavior.AllowGet);
       }
    }
    catch (Exception ex)
    {
          return Json(new { cssMainClass = "success", title = Messages.GetOrSetMensaje("MENSAJE_PRECAUSION_HEADER"), body = Messages.GetOrSetMensaje("MENSAJE_NOTIFICACION_REGISTRO_BORRADO") }, JsonRequestBehavior.AllowGet);
    }
    return Content(string.Empty);
}
		 
 
		#endregion 
 
		#region Create 
 

		// ******************************************* 
        // URL: /Zonas_Master/Create 
        // ******************************************* 

public virtual ActionResult Create()
{
    var zonasMaster = new Zonas_MasterModel();
    ViewBag.IsNew = true;
    zonasMaster.Registro_Estado = "A";

    return View(zonasMaster);
}

//
// POST: /Usuarios/Create
[HttpPost]
public virtual ActionResult Create(Zonas_MasterModel zonasMaster)
{
    if (ModelState.IsValid)
    {

        //Campos Auditorias
        zonasMaster.Registro_Fecha = DateTime.Now;
        zonasMaster.Registro_Usuario = User.Identity.Name;
                
        var result = zonasMaster.Save();

        if (result)
        {
            return RedirectToAction("Edit", new { 
zona_Secuencia = zonasMaster.Zona_Secuencia});
        }

    }

    ViewBag.IsNew = true;
    return View(zonasMaster);
            
}

		 
 
		#endregion 
 
		#region Edit 
 

		// ******************************************* 
        // URL: /Zonas_Master/Edit/id 
        // ******************************************* 

public virtual ActionResult Edit(int zona_Secuencia)
{

    var zonasMaster = Zonas_MasterModel.LoadByEntityKey(zona_Secuencia.ToString());

    ViewBag.IsNew = false;
            
    return View(zonasMaster);
}

[HttpPost]
public virtual ActionResult Edit(Zonas_MasterModel zonasMaster)
{
           
        if (ModelState.IsValid)
        {
        //Campos Auditorias
        zonasMaster.Registro_Fecha = DateTime.Now;
        zonasMaster.Registro_Usuario = User.Identity.Name;
                

            var result = zonasMaster.Save();

            if (result)
            {
                return RedirectToAction("Index");
            }
        }

        ViewBag.IsNew = false;
        return View(zonasMaster);
}

public virtual ActionResult LoadDocumentosObjetivosTrans(GridRequestViewModel gridRequest,int zona_Secuencia){
    var documentos_Objetivos_Trans = Zonas_MasterModel.LoadByEntityKey(zona_Secuencia.ToString());

    int count = documentos_Objetivos_Trans.DocumentosObjetivosTrans.Count;

    var dateFormat = System.Globalization.CultureInfo.CurrentCulture.TwoLetterISOLanguageName == "en" ? "MM/dd/yyyy" : "dd/MM/yyyy";
    System.Globalization.DateTimeFormatInfo dtfi = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat;
    dtfi.DateSeparator = "/";

    return Json(new
    {
        iTotalDisplayRecords = count,
        iTotalRecords = count,
        sEcho = gridRequest.GridCustomData,
        aaData = documentos_Objetivos_Trans.DocumentosObjetivosTrans.Skip(gridRequest.RowStartIndex)
                        .Take(gridRequest.RowCount)
                        .Select(d => new { 
d.EntityKey,d.Registro_Estado,Registro_Fecha = d.Registro_Fecha.ToString(dateFormat, dtfi),d.Registro_Usuario,Zona_Secuencia = d.ZonasMaster != null ? d.ZonasMaster.EntityDisplayName : string.Empty,Ruta_Secuencia = d.RutasMaster != null ? d.RutasMaster.EntityDisplayName : string.Empty,Role_Numero = d.RolesCata != null ? d.RolesCata.EntityDisplayName : string.Empty,Documento_Secuencia = d.DocumentosMaster != null ? d.DocumentosMaster.EntityDisplayName : string.Empty
    })
 });

}

public virtual ActionResult AddDocumentosObjetivosTrans(int zona_Secuencia){
    var zonas_Master = Zonas_MasterModel.LoadByEntityKey(zona_Secuencia.ToString());

    var documentos_Objetivos_Trans = new Documentos_Objetivos_TransModel();

 documentos_Objetivos_Trans.Zona_Secuencia =zonas_Master.Zona_Secuencia;            

    ViewBag.MasterProperty = "Zonas_Master_Documentos_Objetivos_Trans";

    //relations

    ViewBag.Name = "AddDocumentos_Objetivos_Trans";
    ViewBag.IsNew = true;
    documentos_Objetivos_Trans.Registro_Estado = "A";

    return PartialView("~/Views/Documentos_Objetivos_Trans/PopUp.cshtml", documentos_Objetivos_Trans);
}

[HttpPost]
public virtual ActionResult AddDocumentosObjetivosTrans(Documentos_Objetivos_TransModel documentos_Objetivos_Trans)
{
    if (ModelState.IsValid)
    {

        //Campos Auditorias
        documentos_Objetivos_Trans.Registro_Fecha = DateTime.Now;
        documentos_Objetivos_Trans.Registro_Usuario = User.Identity.Name;

        documentos_Objetivos_Trans.Save();
                
        return new HttpStatusCodeResult(200);
    }
    return new HttpStatusCodeResult(500);
}

//Columna por las cuales estan relacionadas
public virtual ActionResult EditDocumentosObjetivosTrans(int zona_Secuencia_parent, string entityKey_child )
{
    var documentos_Objetivos_Trans =  Documentos_Objetivos_TransModel.LoadByEntityKey(entityKey_child.ToString());
            
    ViewBag.MasterProperty = "Zonas_Master_Documentos_Objetivos_Trans";
    ViewBag.Name = "EditDocumentos_Objetivos_Trans";
    ViewBag.IsNew = false;

    return PartialView("~/Views/Documentos_Objetivos_Trans/PopUp.cshtml", documentos_Objetivos_Trans);
}

[HttpPost]
public virtual ActionResult EditDocumentosObjetivosTrans(Documentos_Objetivos_TransModel documentos_Objetivos_Trans)
{
    if (ModelState.IsValid)
    {
        //Campos Auditorias
        documentos_Objetivos_Trans.Registro_Fecha = DateTime.Now;
        documentos_Objetivos_Trans.Registro_Usuario = User.Identity.Name;
        documentos_Objetivos_Trans.Save();

        return new HttpStatusCodeResult(200);
    }
    return new HttpStatusCodeResult(500);
}

[HttpPost]
public virtual ActionResult DeleteDocumentosObjetivosTrans(int zona_Secuencia_parent, string entityKey_child ){
    var documentos_Objetivos_Trans = Documentos_Objetivos_TransModel.LoadByEntityKey(entityKey_child.ToString());
       if (documentos_Objetivos_Trans.Delete())
       {
          return Json(new { cssMainClass = "success", title = Messages.GetOrSetMensaje("MENSAJE_OPERACION_REALIZDA_SASTIFACTORIAMENTE_HEADER"), body = Messages.GetOrSetMensaje("MENSAJE_NOTIFICACION_REGISTRO_BORRADO") }, JsonRequestBehavior.AllowGet);
       }
       else
       {
          return Json(new { cssMainClass = "warning", title = Messages.GetOrSetMensaje("MENSAJE_PRECAUSION_HEADER"), body = Messages.GetOrSetMensaje("MENSAJE_NOTIFICACION_REGISTRO_NO_BORRADO") }, JsonRequestBehavior.AllowGet);
       }

}

public virtual ActionResult ReportDocumentosObjetivosTrans(int zona_Secuencia){
    var documentos_Objetivos_Trans = Zonas_MasterModel.LoadByEntityKey(zona_Secuencia.ToString());            
    return new CsvReportResult("Documentos_Objetivos_Trans", documentos_Objetivos_Trans.DocumentosObjetivosTrans);
}

public virtual ActionResult LoadNotificacionesObjetivoTrans(GridRequestViewModel gridRequest,int zona_Secuencia){
    var notificaciones_Objetivo_Trans = Zonas_MasterModel.LoadByEntityKey(zona_Secuencia.ToString());

    int count = notificaciones_Objetivo_Trans.NotificacionesObjetivoTrans.Count;

    var dateFormat = System.Globalization.CultureInfo.CurrentCulture.TwoLetterISOLanguageName == "en" ? "MM/dd/yyyy" : "dd/MM/yyyy";
    System.Globalization.DateTimeFormatInfo dtfi = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat;
    dtfi.DateSeparator = "/";

    return Json(new
    {
        iTotalDisplayRecords = count,
        iTotalRecords = count,
        sEcho = gridRequest.GridCustomData,
        aaData = notificaciones_Objetivo_Trans.NotificacionesObjetivoTrans.Skip(gridRequest.RowStartIndex)
                        .Take(gridRequest.RowCount)
                        .Select(d => new { 
d.EntityKey,d.Registro_Estado,Registro_Fecha = d.Registro_Fecha.ToString(dateFormat, dtfi),d.Registro_Usuario,Zona_Secuencia = d.ZonasMaster != null ? d.ZonasMaster.EntityDisplayName : string.Empty,Ruta_Secuencia = d.RutasMaster != null ? d.RutasMaster.EntityDisplayName : string.Empty,Role_Numero = d.RolesCata != null ? d.RolesCata.EntityDisplayName : string.Empty,Notificacion_Numero = d.NotificacionesMaster != null ? d.NotificacionesMaster.EntityDisplayName : string.Empty
    })
 });

}

public virtual ActionResult AddNotificacionesObjetivoTrans(int zona_Secuencia){
    var zonas_Master = Zonas_MasterModel.LoadByEntityKey(zona_Secuencia.ToString());

    var notificaciones_Objetivo_Trans = new Notificaciones_Objetivo_TransModel();

 notificaciones_Objetivo_Trans.Zona_Secuencia =zonas_Master.Zona_Secuencia;            

    ViewBag.MasterProperty = "Zonas_Master_Notificaciones_Objetivo_Trans";

    //relations

    ViewBag.Name = "AddNotificaciones_Objetivo_Trans";
    ViewBag.IsNew = true;
    notificaciones_Objetivo_Trans.Registro_Estado = "A";

    return PartialView("~/Views/Notificaciones_Objetivo_Trans/PopUp.cshtml", notificaciones_Objetivo_Trans);
}

[HttpPost]
public virtual ActionResult AddNotificacionesObjetivoTrans(Notificaciones_Objetivo_TransModel notificaciones_Objetivo_Trans)
{
    if (ModelState.IsValid)
    {

        //Campos Auditorias
        notificaciones_Objetivo_Trans.Registro_Fecha = DateTime.Now;
        notificaciones_Objetivo_Trans.Registro_Usuario = User.Identity.Name;

        notificaciones_Objetivo_Trans.Save();
                
        return new HttpStatusCodeResult(200);
    }
    return new HttpStatusCodeResult(500);
}

//Columna por las cuales estan relacionadas
public virtual ActionResult EditNotificacionesObjetivoTrans(int zona_Secuencia_parent, string entityKey_child )
{
    var notificaciones_Objetivo_Trans =  Notificaciones_Objetivo_TransModel.LoadByEntityKey(entityKey_child.ToString());
            
    ViewBag.MasterProperty = "Zonas_Master_Notificaciones_Objetivo_Trans";
    ViewBag.Name = "EditNotificaciones_Objetivo_Trans";
    ViewBag.IsNew = false;

    return PartialView("~/Views/Notificaciones_Objetivo_Trans/PopUp.cshtml", notificaciones_Objetivo_Trans);
}

[HttpPost]
public virtual ActionResult EditNotificacionesObjetivoTrans(Notificaciones_Objetivo_TransModel notificaciones_Objetivo_Trans)
{
    if (ModelState.IsValid)
    {
        //Campos Auditorias
        notificaciones_Objetivo_Trans.Registro_Fecha = DateTime.Now;
        notificaciones_Objetivo_Trans.Registro_Usuario = User.Identity.Name;
        notificaciones_Objetivo_Trans.Save();

        return new HttpStatusCodeResult(200);
    }
    return new HttpStatusCodeResult(500);
}

[HttpPost]
public virtual ActionResult DeleteNotificacionesObjetivoTrans(int zona_Secuencia_parent, string entityKey_child ){
    var notificaciones_Objetivo_Trans = Notificaciones_Objetivo_TransModel.LoadByEntityKey(entityKey_child.ToString());
       if (notificaciones_Objetivo_Trans.Delete())
       {
          return Json(new { cssMainClass = "success", title = Messages.GetOrSetMensaje("MENSAJE_OPERACION_REALIZDA_SASTIFACTORIAMENTE_HEADER"), body = Messages.GetOrSetMensaje("MENSAJE_NOTIFICACION_REGISTRO_BORRADO") }, JsonRequestBehavior.AllowGet);
       }
       else
       {
          return Json(new { cssMainClass = "warning", title = Messages.GetOrSetMensaje("MENSAJE_PRECAUSION_HEADER"), body = Messages.GetOrSetMensaje("MENSAJE_NOTIFICACION_REGISTRO_NO_BORRADO") }, JsonRequestBehavior.AllowGet);
       }

}

public virtual ActionResult ReportNotificacionesObjetivoTrans(int zona_Secuencia){
    var notificaciones_Objetivo_Trans = Zonas_MasterModel.LoadByEntityKey(zona_Secuencia.ToString());            
    return new CsvReportResult("Notificaciones_Objetivo_Trans", notificaciones_Objetivo_Trans.NotificacionesObjetivoTrans);
}

public virtual ActionResult LoadCongregaciones(GridRequestViewModel gridRequest,int zona_Secuencia){
    var congregaciones = Zonas_MasterModel.LoadByEntityKey(zona_Secuencia.ToString());

    int count = congregaciones.Congregaciones.Count;

    var dateFormat = System.Globalization.CultureInfo.CurrentCulture.TwoLetterISOLanguageName == "en" ? "MM/dd/yyyy" : "dd/MM/yyyy";
    System.Globalization.DateTimeFormatInfo dtfi = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat;
    dtfi.DateSeparator = "/";

    return Json(new
    {
        iTotalDisplayRecords = count,
        iTotalRecords = count,
        sEcho = gridRequest.GridCustomData,
        aaData = congregaciones.Congregaciones.Skip(gridRequest.RowStartIndex)
                        .Take(gridRequest.RowCount)
                        .Select(d => new { 
d.Congregacion_Secuencia,d.Congregacion_Nombre,d.Congregacion_Direccion,d.Registro_Estado,Registro_Fecha = d.Registro_Fecha.ToString(dateFormat, dtfi),d.Registro_Usuario,Zona_Secuencia = d.Zona != null ? d.Zona.EntityDisplayName : string.Empty,Circuito_Numero = d.Circuito != null ? d.Circuito.EntityDisplayName : string.Empty
    })
 });

}

public virtual ActionResult AddCongregaciones(int zona_Secuencia){
    var zonas_Master = Zonas_MasterModel.LoadByEntityKey(zona_Secuencia.ToString());

    var congregaciones = new Congregaciones_MasterModel();

 congregaciones.Zona_Secuencia =zonas_Master.Zona_Secuencia;            

    ViewBag.MasterProperty = "Zonas_Master_Congregaciones";

    //relations

    ViewBag.Name = "AddCongregaciones_Master";
    ViewBag.IsNew = true;
    congregaciones.Registro_Estado = "A";

    return PartialView("~/Views/Congregaciones_Master/PopUp.cshtml", congregaciones);
}

[HttpPost]
public virtual ActionResult AddCongregaciones(Congregaciones_MasterModel congregaciones)
{
    if (ModelState.IsValid)
    {

        //Campos Auditorias
        congregaciones.Registro_Fecha = DateTime.Now;
        congregaciones.Registro_Usuario = User.Identity.Name;

        congregaciones.Save();
                
        return new HttpStatusCodeResult(200);
    }
    return new HttpStatusCodeResult(500);
}

//Columna por las cuales estan relacionadas
public virtual ActionResult EditCongregaciones(int zona_Secuencia_parent, int congregacion_Secuencia_child )
{
    var congregaciones =  Congregaciones_MasterModel.LoadByEntityKey(congregacion_Secuencia_child.ToString());
            
    ViewBag.MasterProperty = "Zonas_Master_Congregaciones";
    ViewBag.Name = "EditCongregaciones_Master";
    ViewBag.IsNew = false;

    return PartialView("~/Views/Congregaciones_Master/PopUp.cshtml", congregaciones);
}

[HttpPost]
public virtual ActionResult EditCongregaciones(Congregaciones_MasterModel congregaciones)
{
    if (ModelState.IsValid)
    {
        //Campos Auditorias
        congregaciones.Registro_Fecha = DateTime.Now;
        congregaciones.Registro_Usuario = User.Identity.Name;
        congregaciones.Save();

        return new HttpStatusCodeResult(200);
    }
    return new HttpStatusCodeResult(500);
}

[HttpPost]
public virtual ActionResult DeleteCongregaciones(int zona_Secuencia_parent, int congregacion_Secuencia_child ){
    var congregaciones = Congregaciones_MasterModel.LoadByEntityKey(congregacion_Secuencia_child.ToString());
       if (congregaciones.Delete())
       {
          return Json(new { cssMainClass = "success", title = Messages.GetOrSetMensaje("MENSAJE_OPERACION_REALIZDA_SASTIFACTORIAMENTE_HEADER"), body = Messages.GetOrSetMensaje("MENSAJE_NOTIFICACION_REGISTRO_BORRADO") }, JsonRequestBehavior.AllowGet);
       }
       else
       {
          return Json(new { cssMainClass = "warning", title = Messages.GetOrSetMensaje("MENSAJE_PRECAUSION_HEADER"), body = Messages.GetOrSetMensaje("MENSAJE_NOTIFICACION_REGISTRO_NO_BORRADO") }, JsonRequestBehavior.AllowGet);
       }

}

public virtual ActionResult ReportCongregaciones(int zona_Secuencia){
    var congregaciones = Zonas_MasterModel.LoadByEntityKey(zona_Secuencia.ToString());            
    return new CsvReportResult("Congregaciones_Master", congregaciones.Congregaciones);
}

public virtual ActionResult LoadEncargados(GridRequestViewModel gridRequest,int zona_Secuencia){
    var encargados = Zonas_MasterModel.LoadByEntityKey(zona_Secuencia.ToString());

    int count = encargados.Encargados.Count;

    var dateFormat = System.Globalization.CultureInfo.CurrentCulture.TwoLetterISOLanguageName == "en" ? "MM/dd/yyyy" : "dd/MM/yyyy";
    System.Globalization.DateTimeFormatInfo dtfi = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat;
    dtfi.DateSeparator = "/";

    return Json(new
    {
        iTotalDisplayRecords = count,
        iTotalRecords = count,
        sEcho = gridRequest.GridCustomData,
        aaData = encargados.Encargados.Skip(gridRequest.RowStartIndex)
                        .Take(gridRequest.RowCount)
                        .Select(d => new { 
d.EntityKey,d.Registro_Estado,Registro_Fecha = d.Registro_Fecha.ToString(dateFormat, dtfi),d.Registro_Usuario,Zona_Secuencia = d.Zona != null ? d.Zona.EntityDisplayName : string.Empty,Persona_Secuencia = d.Persona != null ? d.Persona.EntityDisplayName : string.Empty
    })
 });

}

public virtual ActionResult AddEncargados(int zona_Secuencia){
    var zonas_Master = Zonas_MasterModel.LoadByEntityKey(zona_Secuencia.ToString());

    var encargados = new Zonas_Encargados_TransModel();

 encargados.Zona_Secuencia =zonas_Master.Zona_Secuencia;            

    ViewBag.MasterProperty = "Zonas_Master_Encargados";

    //relations

    ViewBag.Name = "AddZonas_Encargados_Trans";
    ViewBag.IsNew = true;
    encargados.Registro_Estado = "A";

    return PartialView("~/Views/Zonas_Encargados_Trans/PopUp.cshtml", encargados);
}

[HttpPost]
public virtual ActionResult AddEncargados(Zonas_Encargados_TransModel encargados)
{
    if (ModelState.IsValid)
    {

        //Campos Auditorias
        encargados.Registro_Fecha = DateTime.Now;
        encargados.Registro_Usuario = User.Identity.Name;

        encargados.Save();
                
        return new HttpStatusCodeResult(200);
    }
    return new HttpStatusCodeResult(500);
}

//Columna por las cuales estan relacionadas
public virtual ActionResult EditEncargados(int zona_Secuencia_parent, string entityKey_child )
{
    var encargados =  Zonas_Encargados_TransModel.LoadByEntityKey(entityKey_child.ToString());
            
    ViewBag.MasterProperty = "Zonas_Master_Encargados";
    ViewBag.Name = "EditZonas_Encargados_Trans";
    ViewBag.IsNew = false;

    return PartialView("~/Views/Zonas_Encargados_Trans/PopUp.cshtml", encargados);
}

[HttpPost]
public virtual ActionResult EditEncargados(Zonas_Encargados_TransModel encargados)
{
    if (ModelState.IsValid)
    {
        //Campos Auditorias
        encargados.Registro_Fecha = DateTime.Now;
        encargados.Registro_Usuario = User.Identity.Name;
        encargados.Save();

        return new HttpStatusCodeResult(200);
    }
    return new HttpStatusCodeResult(500);
}

[HttpPost]
public virtual ActionResult DeleteEncargados(int zona_Secuencia_parent, string entityKey_child ){
    var encargados = Zonas_Encargados_TransModel.LoadByEntityKey(entityKey_child.ToString());
       if (encargados.Delete())
       {
          return Json(new { cssMainClass = "success", title = Messages.GetOrSetMensaje("MENSAJE_OPERACION_REALIZDA_SASTIFACTORIAMENTE_HEADER"), body = Messages.GetOrSetMensaje("MENSAJE_NOTIFICACION_REGISTRO_BORRADO") }, JsonRequestBehavior.AllowGet);
       }
       else
       {
          return Json(new { cssMainClass = "warning", title = Messages.GetOrSetMensaje("MENSAJE_PRECAUSION_HEADER"), body = Messages.GetOrSetMensaje("MENSAJE_NOTIFICACION_REGISTRO_NO_BORRADO") }, JsonRequestBehavior.AllowGet);
       }

}

public virtual ActionResult ReportEncargados(int zona_Secuencia){
    var encargados = Zonas_MasterModel.LoadByEntityKey(zona_Secuencia.ToString());            
    return new CsvReportResult("Zonas_Encargados_Trans", encargados.Encargados);
}

public virtual ActionResult LoadRutas(GridRequestViewModel gridRequest,int zona_Secuencia){
    var rutas = Zonas_MasterModel.LoadByEntityKey(zona_Secuencia.ToString());

    int count = rutas.Rutas.Count;

    var dateFormat = System.Globalization.CultureInfo.CurrentCulture.TwoLetterISOLanguageName == "en" ? "MM/dd/yyyy" : "dd/MM/yyyy";
    System.Globalization.DateTimeFormatInfo dtfi = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat;
    dtfi.DateSeparator = "/";

    return Json(new
    {
        iTotalDisplayRecords = count,
        iTotalRecords = count,
        sEcho = gridRequest.GridCustomData,
        aaData = rutas.Rutas.Skip(gridRequest.RowStartIndex)
                        .Take(gridRequest.RowCount)
                        .Select(d => new { 
d.Ruta_Secuencia,d.Ruta_Descripcion,d.Ruta_Mapa_Url,d.Ruta_Carros_Cantidad,d.Ruta_Publicadores_Cantidad,d.Registro_Estado,Registro_Fecha = d.Registro_Fecha.ToString(dateFormat, dtfi),d.Registro_Usuario,Zona_Secuencia = d.ZonasMaster != null ? d.ZonasMaster.EntityDisplayName : string.Empty,Ruta_Persona_Auxiliar = d.PersonasMasterRutaPersonaAuxiliar != null ? d.PersonasMasterRutaPersonaAuxiliar.EntityDisplayName : string.Empty,Ruta_Persona_Encargado = d.PersonasMaster != null ? d.PersonasMaster.EntityDisplayName : string.Empty
    })
 });

}

public virtual ActionResult AddRutas(int zona_Secuencia){
    var zonas_Master = Zonas_MasterModel.LoadByEntityKey(zona_Secuencia.ToString());

    var rutas = new Rutas_MasterModel();

 rutas.Zona_Secuencia =zonas_Master.Zona_Secuencia;            

    ViewBag.MasterProperty = "Zonas_Master_Rutas";

    //relations

    ViewBag.Name = "AddRutas_Master";
    ViewBag.IsNew = true;
    rutas.Registro_Estado = "A";

    return PartialView("~/Views/Rutas_Master/PopUp.cshtml", rutas);
}

[HttpPost]
public virtual ActionResult AddRutas(Rutas_MasterModel rutas)
{
    if (ModelState.IsValid)
    {

        //Campos Auditorias
        rutas.Registro_Fecha = DateTime.Now;
        rutas.Registro_Usuario = User.Identity.Name;

        rutas.Save();
                
        return new HttpStatusCodeResult(200);
    }
    return new HttpStatusCodeResult(500);
}

//Columna por las cuales estan relacionadas
public virtual ActionResult EditRutas(int zona_Secuencia_parent, int ruta_Secuencia_child )
{
    var rutas =  Rutas_MasterModel.LoadByEntityKey(ruta_Secuencia_child.ToString());
            
    ViewBag.MasterProperty = "Zonas_Master_Rutas";
    ViewBag.Name = "EditRutas_Master";
    ViewBag.IsNew = false;

    return PartialView("~/Views/Rutas_Master/PopUp.cshtml", rutas);
}

[HttpPost]
public virtual ActionResult EditRutas(Rutas_MasterModel rutas)
{
    if (ModelState.IsValid)
    {
        //Campos Auditorias
        rutas.Registro_Fecha = DateTime.Now;
        rutas.Registro_Usuario = User.Identity.Name;
        rutas.Save();

        return new HttpStatusCodeResult(200);
    }
    return new HttpStatusCodeResult(500);
}

[HttpPost]
public virtual ActionResult DeleteRutas(int zona_Secuencia_parent, int ruta_Secuencia_child ){
    var rutas = Rutas_MasterModel.LoadByEntityKey(ruta_Secuencia_child.ToString());
       if (rutas.Delete())
       {
          return Json(new { cssMainClass = "success", title = Messages.GetOrSetMensaje("MENSAJE_OPERACION_REALIZDA_SASTIFACTORIAMENTE_HEADER"), body = Messages.GetOrSetMensaje("MENSAJE_NOTIFICACION_REGISTRO_BORRADO") }, JsonRequestBehavior.AllowGet);
       }
       else
       {
          return Json(new { cssMainClass = "warning", title = Messages.GetOrSetMensaje("MENSAJE_PRECAUSION_HEADER"), body = Messages.GetOrSetMensaje("MENSAJE_NOTIFICACION_REGISTRO_NO_BORRADO") }, JsonRequestBehavior.AllowGet);
       }

}

public virtual ActionResult ReportRutas(int zona_Secuencia){
    var rutas = Zonas_MasterModel.LoadByEntityKey(zona_Secuencia.ToString());            
    return new CsvReportResult("Rutas_Master", rutas.Rutas);
}

		 
 
		#endregion 
 
		#region Details 
 

		 
 
		#endregion 

	} 
} 


