//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Creador : Administrator
//    Dominio : OSISPC
//    Pc      : OSISPC
//    Fecha   : 6/19/2014 1:29:11 PM
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System; 
using System.Collections.Generic; 
using System.Linq; 
using System.Web.Mvc; 
using System.Web; 
using System.Web.UI; 
using CodeFluent.Runtime; 
using OSIS.PEPPAM.Mvc.Models; 
using OSIS.PEPPAM.Mvc.Extensions.Controllers; 
using OSIS.PEPPAM.Mvc.Models.Shared; 
using OSIS.PEPPAM.Mvc.Extensions.ActionResults; 
using OSIS.PEPPAM.Mvc.Extensions.Controllers; 
using OSIS.PEPPAM.Mvc.Extensions.Helpers; 
using OSIS.PEPPAM.Mvc.Models.Shared; 
using OSIS.PEPPAM.Mvc.Models; 
using OSIS.PEPPAM.Mvc.UI; 
 
namespace OSIS.PEPPAM.Mvc.Controllers 
{ 
    public partial class Personas_MasterController : Personas_MasterControllerBase 
    { 

    } 
 
	public partial class Personas_MasterControllerBase : BaseController 
	{ 
		#region Members 
 

 
        #endregion 
 
        #region Constructors 
 

 
        #endregion 
 
		#region Index 
 

public virtual ActionResult Index()
{
    var model = new Personas_MasterModel();

    ViewBag.PageIndex = this.GetPageIndex();
    ViewBag.PageSize = this.GetPageSize();
    ViewBag.SearchValue = this.GetSearchValue();

    return View(model);
}


[HttpPost]
public virtual ActionResult Load(GridRequestViewModel gridRequest)
{
    OrderByArgumentCollection orderByArguments = new OrderByArgumentCollection();
    orderByArguments.Add("[" + gridRequest.SortColumnName + "]", gridRequest.SortDirection);

    PageOptions pageOptions = new PageOptions();
    pageOptions.OrderByArguments = orderByArguments;

    var totalCount = 0;

    var allpersonasMaster = Personas_MasterModel.PageLoadAllPaging(1 + gridRequest.RowStartIndex/gridRequest.RowCount,
        gridRequest.RowCount, gridRequest.Search, pageOptions, out totalCount);

    var displayRecords = allpersonasMaster.Count;
    var totalRecords = totalCount;

    var dateFormat = System.Globalization.CultureInfo.CurrentCulture.TwoLetterISOLanguageName == "en"
        ? "MM/dd/yyyy"
        : "dd/MM/yyyy";
    System.Globalization.DateTimeFormatInfo dtfi =
        System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat;
    dtfi.DateSeparator = "/";

    return Json(new
    {
        iTotalDisplayRecords = displayRecords,
        iTotalRecords = totalRecords,
        sEcho = gridRequest.GridCustomData,
        aaData =
            allpersonasMaster.Select(
                d =>
                    new
                    {
d.Persona_Secuencia,d.Persona_Congregacion,d.Persona_Nombres,d.Persona_Apellidos,d.Persona_Conyuge_Apellido,d.Persona_Sexo,d.Persona_Correo,d.Persona_Clave,d.Persona_Verificacion_Numero,d.Registro_Estado,Registro_Fecha = d.Registro_Fecha.ToString(dateFormat, dtfi),d.Registro_Usuario,Persona_Estado_Secuencia = d.PersonaEstadoCata != null ? d.PersonaEstadoCata.EntityDisplayName : string.Empty,Persona_Tipo_Secuencia = d.PersonasTipoCata != null ? d.PersonasTipoCata.EntityDisplayName : string.Empty,Congregacion_Secuencia = d.Congregacion != null ? d.Congregacion.EntityDisplayName : string.Empty
                    })
    });

}

public virtual ActionResult Report()
{
    var totalCount = 0;
    var allpersonasMaster = Personas_MasterModel.LoadAllPaging(this.GetSearchValue(), out totalCount);

    var dateFormat = System.Globalization.CultureInfo.CurrentCulture.TwoLetterISOLanguageName == "en"
        ? "MM/dd/yyyy"
        : "dd/MM/yyyy";
    System.Globalization.DateTimeFormatInfo dtfi =
        System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat;
    dtfi.DateSeparator = "/";
    return new CsvReportResult("Personas_Master",
        allpersonasMaster.Select(
            d =>
                new
                {
d.Persona_Secuencia,d.Persona_Congregacion,d.Persona_Nombres,d.Persona_Apellidos,d.Persona_Conyuge_Apellido,d.Persona_Sexo,d.Persona_Correo,d.Persona_Clave,d.Persona_Verificacion_Numero,d.Registro_Estado,Registro_Fecha = d.Registro_Fecha.ToString(dateFormat, dtfi),d.Registro_Usuario,Persona_Estado_Secuencia = d.PersonaEstadoCata != null ? d.PersonaEstadoCata.EntityDisplayName : string.Empty,Persona_Tipo_Secuencia = d.PersonasTipoCata != null ? d.PersonasTipoCata.EntityDisplayName : string.Empty,Congregacion_Secuencia = d.Congregacion != null ? d.Congregacion.EntityDisplayName : string.Empty
                }));
}


[HttpPost]
public virtual ActionResult Delete( string entityKey)

{
    try
    {
        var deleteModel  = Personas_MasterModel.LoadByEntityKey(entityKey);
       if (deleteModel.Delete())
       {
          return Json(new { cssMainClass = "success", title = Messages.GetOrSetMensaje("MENSAJE_OPERACION_REALIZDA_SASTIFACTORIAMENTE_HEADER"), body = Messages.GetOrSetMensaje("MENSAJE_NOTIFICACION_REGISTRO_BORRADO") }, JsonRequestBehavior.AllowGet);
       }
       else
       {
          return Json(new { cssMainClass = "warning", title = Messages.GetOrSetMensaje("MENSAJE_PRECAUSION_HEADER"), body = Messages.GetOrSetMensaje("MENSAJE_NOTIFICACION_REGISTRO_NO_BORRADO") }, JsonRequestBehavior.AllowGet);
       }
    }
    catch (Exception ex)
    {
          return Json(new { cssMainClass = "success", title = Messages.GetOrSetMensaje("MENSAJE_PRECAUSION_HEADER"), body = Messages.GetOrSetMensaje("MENSAJE_NOTIFICACION_REGISTRO_BORRADO") }, JsonRequestBehavior.AllowGet);
    }
    return Content(string.Empty);
}
		 
 
		#endregion 
 
		#region Create 
 

		// ******************************************* 
        // URL: /Personas_Master/Create 
        // ******************************************* 

public virtual ActionResult Create()
{
    var personasMaster = new Personas_MasterModel();
    ViewBag.IsNew = true;
    personasMaster.Registro_Estado = "A";

    return View(personasMaster);
}

//
// POST: /Usuarios/Create
[HttpPost]
public virtual ActionResult Create(Personas_MasterModel personasMaster)
{
    if (ModelState.IsValid)
    {

        //Campos Auditorias
        personasMaster.Registro_Fecha = DateTime.Now;
        personasMaster.Registro_Usuario = User.Identity.Name;
                
        var result = personasMaster.Save();

        if (result)
        {
            return RedirectToAction("Edit", new { 
persona_Secuencia = personasMaster.Persona_Secuencia});
        }

    }

    ViewBag.IsNew = true;
    return View(personasMaster);
            
}

		 
 
		#endregion 
 
		#region Edit 
 

		// ******************************************* 
        // URL: /Personas_Master/Edit/id 
        // ******************************************* 

public virtual ActionResult Edit(int persona_Secuencia)
{

    var personasMaster = Personas_MasterModel.LoadByEntityKey(persona_Secuencia.ToString());

    ViewBag.IsNew = false;
            
    return View(personasMaster);
}

[HttpPost]
public virtual ActionResult Edit(Personas_MasterModel personasMaster)
{
           
        if (ModelState.IsValid)
        {
        //Campos Auditorias
        personasMaster.Registro_Fecha = DateTime.Now;
        personasMaster.Registro_Usuario = User.Identity.Name;
                

            var result = personasMaster.Save();

            if (result)
            {
                return RedirectToAction("Index");
            }
        }

        ViewBag.IsNew = false;
        return View(personasMaster);
}

public virtual ActionResult LoadHorarioTurnoInformeTrans(GridRequestViewModel gridRequest,int persona_Secuencia){
    var horario_Turno_Informe_Trans = Personas_MasterModel.LoadByEntityKey(persona_Secuencia.ToString());

    int count = horario_Turno_Informe_Trans.HorarioTurnoInformeTrans.Count;

    var dateFormat = System.Globalization.CultureInfo.CurrentCulture.TwoLetterISOLanguageName == "en" ? "MM/dd/yyyy" : "dd/MM/yyyy";
    System.Globalization.DateTimeFormatInfo dtfi = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat;
    dtfi.DateSeparator = "/";

    return Json(new
    {
        iTotalDisplayRecords = count,
        iTotalRecords = count,
        sEcho = gridRequest.GridCustomData,
        aaData = horario_Turno_Informe_Trans.HorarioTurnoInformeTrans.Skip(gridRequest.RowStartIndex)
                        .Take(gridRequest.RowCount)
                        .Select(d => new { 
d.EntityKey,d.Publicacion_Cantidad,d.Registro_Estado,Registro_Fecha = d.Registro_Fecha.ToString(dateFormat, dtfi),d.Registro_Usuario,Persona_Secuencia = d.PersonasMaster != null ? d.PersonasMaster.EntityDisplayName : string.Empty,Horario_Turno_Secuencia = d.HorarioTurnoDiasTrans != null ? d.HorarioTurnoDiasTrans.EntityDisplayName : string.Empty,Publicacion_Numero = d.PublicacionesCata != null ? d.PublicacionesCata.EntityDisplayName : string.Empty,Idioma_Numero = d.IdiomasCata != null ? d.IdiomasCata.EntityDisplayName : string.Empty,d.Dia_Secuencia
    })
 });

}

public virtual ActionResult AddHorarioTurnoInformeTrans(int persona_Secuencia){
    var personas_Master = Personas_MasterModel.LoadByEntityKey(persona_Secuencia.ToString());

    var horario_Turno_Informe_Trans = new Horario_Turno_Informe_TransModel();

 horario_Turno_Informe_Trans.Persona_Secuencia =personas_Master.Persona_Secuencia;            

    ViewBag.MasterProperty = "Personas_Master_Horario_Turno_Informe_Trans";

    //relations

    ViewBag.Name = "AddHorario_Turno_Informe_Trans";
    ViewBag.IsNew = true;
    horario_Turno_Informe_Trans.Registro_Estado = "A";

    return PartialView("~/Views/Horario_Turno_Informe_Trans/PopUp.cshtml", horario_Turno_Informe_Trans);
}

[HttpPost]
public virtual ActionResult AddHorarioTurnoInformeTrans(Horario_Turno_Informe_TransModel horario_Turno_Informe_Trans)
{
    if (ModelState.IsValid)
    {

        //Campos Auditorias
        horario_Turno_Informe_Trans.Registro_Fecha = DateTime.Now;
        horario_Turno_Informe_Trans.Registro_Usuario = User.Identity.Name;

        horario_Turno_Informe_Trans.Save();
                
        return new HttpStatusCodeResult(200);
    }
    return new HttpStatusCodeResult(500);
}

//Columna por las cuales estan relacionadas
public virtual ActionResult EditHorarioTurnoInformeTrans(int persona_Secuencia_parent, string entityKey_child )
{
    var horario_Turno_Informe_Trans =  Horario_Turno_Informe_TransModel.LoadByEntityKey(entityKey_child.ToString());
            
    ViewBag.MasterProperty = "Personas_Master_Horario_Turno_Informe_Trans";
    ViewBag.Name = "EditHorario_Turno_Informe_Trans";
    ViewBag.IsNew = false;

    return PartialView("~/Views/Horario_Turno_Informe_Trans/PopUp.cshtml", horario_Turno_Informe_Trans);
}

[HttpPost]
public virtual ActionResult EditHorarioTurnoInformeTrans(Horario_Turno_Informe_TransModel horario_Turno_Informe_Trans)
{
    if (ModelState.IsValid)
    {
        //Campos Auditorias
        horario_Turno_Informe_Trans.Registro_Fecha = DateTime.Now;
        horario_Turno_Informe_Trans.Registro_Usuario = User.Identity.Name;
        horario_Turno_Informe_Trans.Save();

        return new HttpStatusCodeResult(200);
    }
    return new HttpStatusCodeResult(500);
}

[HttpPost]
public virtual ActionResult DeleteHorarioTurnoInformeTrans(int persona_Secuencia_parent, string entityKey_child ){
    var horario_Turno_Informe_Trans = Horario_Turno_Informe_TransModel.LoadByEntityKey(entityKey_child.ToString());
       if (horario_Turno_Informe_Trans.Delete())
       {
          return Json(new { cssMainClass = "success", title = Messages.GetOrSetMensaje("MENSAJE_OPERACION_REALIZDA_SASTIFACTORIAMENTE_HEADER"), body = Messages.GetOrSetMensaje("MENSAJE_NOTIFICACION_REGISTRO_BORRADO") }, JsonRequestBehavior.AllowGet);
       }
       else
       {
          return Json(new { cssMainClass = "warning", title = Messages.GetOrSetMensaje("MENSAJE_PRECAUSION_HEADER"), body = Messages.GetOrSetMensaje("MENSAJE_NOTIFICACION_REGISTRO_NO_BORRADO") }, JsonRequestBehavior.AllowGet);
       }

}

public virtual ActionResult ReportHorarioTurnoInformeTrans(int persona_Secuencia){
    var horario_Turno_Informe_Trans = Personas_MasterModel.LoadByEntityKey(persona_Secuencia.ToString());            
    return new CsvReportResult("Horario_Turno_Informe_Trans", horario_Turno_Informe_Trans.HorarioTurnoInformeTrans);
}

public virtual ActionResult LoadPersonasDiponibilidad(GridRequestViewModel gridRequest,int persona_Secuencia){
    var personas_Diponibilidad = Personas_MasterModel.LoadByEntityKey(persona_Secuencia.ToString());

    int count = personas_Diponibilidad.PersonasDiponibilidad.Count;

    var dateFormat = System.Globalization.CultureInfo.CurrentCulture.TwoLetterISOLanguageName == "en" ? "MM/dd/yyyy" : "dd/MM/yyyy";
    System.Globalization.DateTimeFormatInfo dtfi = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat;
    dtfi.DateSeparator = "/";

    return Json(new
    {
        iTotalDisplayRecords = count,
        iTotalRecords = count,
        sEcho = gridRequest.GridCustomData,
        aaData = personas_Diponibilidad.PersonasDiponibilidad.Skip(gridRequest.RowStartIndex)
                        .Take(gridRequest.RowCount)
                        .Select(d => new { 
d.EntityKey,d.Registro_Estado,Registro_Fecha = d.Registro_Fecha.ToString(dateFormat, dtfi),d.Registro_Usuario,Persona_Secuencia = d.PersonasMaster != null ? d.PersonasMaster.EntityDisplayName : string.Empty,Hora_Secuencia = d.HorasCata != null ? d.HorasCata.EntityDisplayName : string.Empty,Dia_Secuencia = d.DiasCata != null ? d.DiasCata.EntityDisplayName : string.Empty
    })
 });

}

public virtual ActionResult AddPersonasDiponibilidad(int persona_Secuencia){
    var personas_Master = Personas_MasterModel.LoadByEntityKey(persona_Secuencia.ToString());

    var personas_Diponibilidad = new Personas_DiponibilidadModel();

 personas_Diponibilidad.Persona_Secuencia =personas_Master.Persona_Secuencia;            

    ViewBag.MasterProperty = "Personas_Master_Personas_Diponibilidad";

    //relations

    ViewBag.Name = "AddPersonas_Diponibilidad";
    ViewBag.IsNew = true;
    personas_Diponibilidad.Registro_Estado = "A";

    return PartialView("~/Views/Personas_Diponibilidad/PopUp.cshtml", personas_Diponibilidad);
}

[HttpPost]
public virtual ActionResult AddPersonasDiponibilidad(Personas_DiponibilidadModel personas_Diponibilidad)
{
    if (ModelState.IsValid)
    {

        //Campos Auditorias
        personas_Diponibilidad.Registro_Fecha = DateTime.Now;
        personas_Diponibilidad.Registro_Usuario = User.Identity.Name;

        personas_Diponibilidad.Save();
                
        return new HttpStatusCodeResult(200);
    }
    return new HttpStatusCodeResult(500);
}

//Columna por las cuales estan relacionadas
public virtual ActionResult EditPersonasDiponibilidad(int persona_Secuencia_parent, string entityKey_child )
{
    var personas_Diponibilidad =  Personas_DiponibilidadModel.LoadByEntityKey(entityKey_child.ToString());
            
    ViewBag.MasterProperty = "Personas_Master_Personas_Diponibilidad";
    ViewBag.Name = "EditPersonas_Diponibilidad";
    ViewBag.IsNew = false;

    return PartialView("~/Views/Personas_Diponibilidad/PopUp.cshtml", personas_Diponibilidad);
}

[HttpPost]
public virtual ActionResult EditPersonasDiponibilidad(Personas_DiponibilidadModel personas_Diponibilidad)
{
    if (ModelState.IsValid)
    {
        //Campos Auditorias
        personas_Diponibilidad.Registro_Fecha = DateTime.Now;
        personas_Diponibilidad.Registro_Usuario = User.Identity.Name;
        personas_Diponibilidad.Save();

        return new HttpStatusCodeResult(200);
    }
    return new HttpStatusCodeResult(500);
}

[HttpPost]
public virtual ActionResult DeletePersonasDiponibilidad(int persona_Secuencia_parent, string entityKey_child ){
    var personas_Diponibilidad = Personas_DiponibilidadModel.LoadByEntityKey(entityKey_child.ToString());
       if (personas_Diponibilidad.Delete())
       {
          return Json(new { cssMainClass = "success", title = Messages.GetOrSetMensaje("MENSAJE_OPERACION_REALIZDA_SASTIFACTORIAMENTE_HEADER"), body = Messages.GetOrSetMensaje("MENSAJE_NOTIFICACION_REGISTRO_BORRADO") }, JsonRequestBehavior.AllowGet);
       }
       else
       {
          return Json(new { cssMainClass = "warning", title = Messages.GetOrSetMensaje("MENSAJE_PRECAUSION_HEADER"), body = Messages.GetOrSetMensaje("MENSAJE_NOTIFICACION_REGISTRO_NO_BORRADO") }, JsonRequestBehavior.AllowGet);
       }

}

public virtual ActionResult ReportPersonasDiponibilidad(int persona_Secuencia){
    var personas_Diponibilidad = Personas_MasterModel.LoadByEntityKey(persona_Secuencia.ToString());            
    return new CsvReportResult("Personas_Diponibilidad", personas_Diponibilidad.PersonasDiponibilidad);
}

public virtual ActionResult LoadNotificacionesPersonasTrans(GridRequestViewModel gridRequest,int persona_Secuencia){
    var notificaciones_Personas_Trans = Personas_MasterModel.LoadByEntityKey(persona_Secuencia.ToString());

    int count = notificaciones_Personas_Trans.NotificacionesPersonasTrans.Count;

    var dateFormat = System.Globalization.CultureInfo.CurrentCulture.TwoLetterISOLanguageName == "en" ? "MM/dd/yyyy" : "dd/MM/yyyy";
    System.Globalization.DateTimeFormatInfo dtfi = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat;
    dtfi.DateSeparator = "/";

    return Json(new
    {
        iTotalDisplayRecords = count,
        iTotalRecords = count,
        sEcho = gridRequest.GridCustomData,
        aaData = notificaciones_Personas_Trans.NotificacionesPersonasTrans.Skip(gridRequest.RowStartIndex)
                        .Take(gridRequest.RowCount)
                        .Select(d => new { 
d.EntityKey,d.Notificacion_Persona_Vista,Notificacion_Persona_Vista_Fecha = d.Notificacion_Persona_Vista_Fecha.ToString(dateFormat, dtfi),d.Registro_Estado,Registro_Fecha = d.Registro_Fecha.ToString(dateFormat, dtfi),d.Registro_Usuario,Persona_Secuencia = d.PersonasMaster != null ? d.PersonasMaster.EntityDisplayName : string.Empty,d.Notifcacion_Secuencia
    })
 });

}

public virtual ActionResult AddNotificacionesPersonasTrans(int persona_Secuencia){
    var personas_Master = Personas_MasterModel.LoadByEntityKey(persona_Secuencia.ToString());

    var notificaciones_Personas_Trans = new Notificaciones_Personas_TransModel();

 notificaciones_Personas_Trans.Persona_Secuencia =personas_Master.Persona_Secuencia;            

    ViewBag.MasterProperty = "Personas_Master_Notificaciones_Personas_Trans";

    //relations

    ViewBag.Name = "AddNotificaciones_Personas_Trans";
    ViewBag.IsNew = true;
    notificaciones_Personas_Trans.Registro_Estado = "A";

    return PartialView("~/Views/Notificaciones_Personas_Trans/PopUp.cshtml", notificaciones_Personas_Trans);
}

[HttpPost]
public virtual ActionResult AddNotificacionesPersonasTrans(Notificaciones_Personas_TransModel notificaciones_Personas_Trans)
{
    if (ModelState.IsValid)
    {

        //Campos Auditorias
        notificaciones_Personas_Trans.Registro_Fecha = DateTime.Now;
        notificaciones_Personas_Trans.Registro_Usuario = User.Identity.Name;

        notificaciones_Personas_Trans.Save();
                
        return new HttpStatusCodeResult(200);
    }
    return new HttpStatusCodeResult(500);
}

//Columna por las cuales estan relacionadas
public virtual ActionResult EditNotificacionesPersonasTrans(int persona_Secuencia_parent, string entityKey_child )
{
    var notificaciones_Personas_Trans =  Notificaciones_Personas_TransModel.LoadByEntityKey(entityKey_child.ToString());
            
    ViewBag.MasterProperty = "Personas_Master_Notificaciones_Personas_Trans";
    ViewBag.Name = "EditNotificaciones_Personas_Trans";
    ViewBag.IsNew = false;

    return PartialView("~/Views/Notificaciones_Personas_Trans/PopUp.cshtml", notificaciones_Personas_Trans);
}

[HttpPost]
public virtual ActionResult EditNotificacionesPersonasTrans(Notificaciones_Personas_TransModel notificaciones_Personas_Trans)
{
    if (ModelState.IsValid)
    {
        //Campos Auditorias
        notificaciones_Personas_Trans.Registro_Fecha = DateTime.Now;
        notificaciones_Personas_Trans.Registro_Usuario = User.Identity.Name;
        notificaciones_Personas_Trans.Save();

        return new HttpStatusCodeResult(200);
    }
    return new HttpStatusCodeResult(500);
}

[HttpPost]
public virtual ActionResult DeleteNotificacionesPersonasTrans(int persona_Secuencia_parent, string entityKey_child ){
    var notificaciones_Personas_Trans = Notificaciones_Personas_TransModel.LoadByEntityKey(entityKey_child.ToString());
       if (notificaciones_Personas_Trans.Delete())
       {
          return Json(new { cssMainClass = "success", title = Messages.GetOrSetMensaje("MENSAJE_OPERACION_REALIZDA_SASTIFACTORIAMENTE_HEADER"), body = Messages.GetOrSetMensaje("MENSAJE_NOTIFICACION_REGISTRO_BORRADO") }, JsonRequestBehavior.AllowGet);
       }
       else
       {
          return Json(new { cssMainClass = "warning", title = Messages.GetOrSetMensaje("MENSAJE_PRECAUSION_HEADER"), body = Messages.GetOrSetMensaje("MENSAJE_NOTIFICACION_REGISTRO_NO_BORRADO") }, JsonRequestBehavior.AllowGet);
       }

}

public virtual ActionResult ReportNotificacionesPersonasTrans(int persona_Secuencia){
    var notificaciones_Personas_Trans = Personas_MasterModel.LoadByEntityKey(persona_Secuencia.ToString());            
    return new CsvReportResult("Notificaciones_Personas_Trans", notificaciones_Personas_Trans.NotificacionesPersonasTrans);
}

public virtual ActionResult LoadPersonaRolesTrans(GridRequestViewModel gridRequest,int persona_Secuencia){
    var persona_Roles_Trans = Personas_MasterModel.LoadByEntityKey(persona_Secuencia.ToString());

    int count = persona_Roles_Trans.PersonaRolesTrans.Count;

    var dateFormat = System.Globalization.CultureInfo.CurrentCulture.TwoLetterISOLanguageName == "en" ? "MM/dd/yyyy" : "dd/MM/yyyy";
    System.Globalization.DateTimeFormatInfo dtfi = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat;
    dtfi.DateSeparator = "/";

    return Json(new
    {
        iTotalDisplayRecords = count,
        iTotalRecords = count,
        sEcho = gridRequest.GridCustomData,
        aaData = persona_Roles_Trans.PersonaRolesTrans.Skip(gridRequest.RowStartIndex)
                        .Take(gridRequest.RowCount)
                        .Select(d => new { 
d.EntityKey,d.Registro_Estado,Registro_Fecha = d.Registro_Fecha.ToString(dateFormat, dtfi),d.Registro_Usuario,Role_Numero = d.RolesCata != null ? d.RolesCata.EntityDisplayName : string.Empty,Persona_Secuencia = d.PersonasMaster != null ? d.PersonasMaster.EntityDisplayName : string.Empty
    })
 });

}

public virtual ActionResult AddPersonaRolesTrans(int persona_Secuencia){
    var personas_Master = Personas_MasterModel.LoadByEntityKey(persona_Secuencia.ToString());

    var persona_Roles_Trans = new Persona_Roles_TransModel();

 persona_Roles_Trans.Persona_Secuencia =personas_Master.Persona_Secuencia;            

    ViewBag.MasterProperty = "Personas_Master_Persona_Roles_Trans";

    //relations

    ViewBag.Name = "AddPersona_Roles_Trans";
    ViewBag.IsNew = true;
    persona_Roles_Trans.Registro_Estado = "A";

    return PartialView("~/Views/Persona_Roles_Trans/PopUp.cshtml", persona_Roles_Trans);
}

[HttpPost]
public virtual ActionResult AddPersonaRolesTrans(Persona_Roles_TransModel persona_Roles_Trans)
{
    if (ModelState.IsValid)
    {

        //Campos Auditorias
        persona_Roles_Trans.Registro_Fecha = DateTime.Now;
        persona_Roles_Trans.Registro_Usuario = User.Identity.Name;

        persona_Roles_Trans.Save();
                
        return new HttpStatusCodeResult(200);
    }
    return new HttpStatusCodeResult(500);
}

//Columna por las cuales estan relacionadas
public virtual ActionResult EditPersonaRolesTrans(int persona_Secuencia_parent, string entityKey_child )
{
    var persona_Roles_Trans =  Persona_Roles_TransModel.LoadByEntityKey(entityKey_child.ToString());
            
    ViewBag.MasterProperty = "Personas_Master_Persona_Roles_Trans";
    ViewBag.Name = "EditPersona_Roles_Trans";
    ViewBag.IsNew = false;

    return PartialView("~/Views/Persona_Roles_Trans/PopUp.cshtml", persona_Roles_Trans);
}

[HttpPost]
public virtual ActionResult EditPersonaRolesTrans(Persona_Roles_TransModel persona_Roles_Trans)
{
    if (ModelState.IsValid)
    {
        //Campos Auditorias
        persona_Roles_Trans.Registro_Fecha = DateTime.Now;
        persona_Roles_Trans.Registro_Usuario = User.Identity.Name;
        persona_Roles_Trans.Save();

        return new HttpStatusCodeResult(200);
    }
    return new HttpStatusCodeResult(500);
}

[HttpPost]
public virtual ActionResult DeletePersonaRolesTrans(int persona_Secuencia_parent, string entityKey_child ){
    var persona_Roles_Trans = Persona_Roles_TransModel.LoadByEntityKey(entityKey_child.ToString());
       if (persona_Roles_Trans.Delete())
       {
          return Json(new { cssMainClass = "success", title = Messages.GetOrSetMensaje("MENSAJE_OPERACION_REALIZDA_SASTIFACTORIAMENTE_HEADER"), body = Messages.GetOrSetMensaje("MENSAJE_NOTIFICACION_REGISTRO_BORRADO") }, JsonRequestBehavior.AllowGet);
       }
       else
       {
          return Json(new { cssMainClass = "warning", title = Messages.GetOrSetMensaje("MENSAJE_PRECAUSION_HEADER"), body = Messages.GetOrSetMensaje("MENSAJE_NOTIFICACION_REGISTRO_NO_BORRADO") }, JsonRequestBehavior.AllowGet);
       }

}

public virtual ActionResult ReportPersonaRolesTrans(int persona_Secuencia){
    var persona_Roles_Trans = Personas_MasterModel.LoadByEntityKey(persona_Secuencia.ToString());            
    return new CsvReportResult("Persona_Roles_Trans", persona_Roles_Trans.PersonaRolesTrans);
}

public virtual ActionResult LoadPersonasTiposTrans(GridRequestViewModel gridRequest,int persona_Secuencia){
    var personas_Tipos_Trans = Personas_MasterModel.LoadByEntityKey(persona_Secuencia.ToString());

    int count = personas_Tipos_Trans.PersonasTiposTrans.Count;

    var dateFormat = System.Globalization.CultureInfo.CurrentCulture.TwoLetterISOLanguageName == "en" ? "MM/dd/yyyy" : "dd/MM/yyyy";
    System.Globalization.DateTimeFormatInfo dtfi = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat;
    dtfi.DateSeparator = "/";

    return Json(new
    {
        iTotalDisplayRecords = count,
        iTotalRecords = count,
        sEcho = gridRequest.GridCustomData,
        aaData = personas_Tipos_Trans.PersonasTiposTrans.Skip(gridRequest.RowStartIndex)
                        .Take(gridRequest.RowCount)
                        .Select(d => new { 
d.EntityKey,d.Registro_Estado,Registro_Fecha = d.Registro_Fecha.ToString(dateFormat, dtfi),d.Registro_Usuario,Persona_Tipo_Secuencia = d.PersonasTipoCata != null ? d.PersonasTipoCata.EntityDisplayName : string.Empty,Persona_Secuencia = d.PersonasMaster != null ? d.PersonasMaster.EntityDisplayName : string.Empty
    })
 });

}

public virtual ActionResult AddPersonasTiposTrans(int persona_Secuencia){
    var personas_Master = Personas_MasterModel.LoadByEntityKey(persona_Secuencia.ToString());

    var personas_Tipos_Trans = new Personas_Tipos_TransModel();

 personas_Tipos_Trans.Persona_Secuencia =personas_Master.Persona_Secuencia;            

    ViewBag.MasterProperty = "Personas_Master_Personas_Tipos_Trans";

    //relations

    ViewBag.Name = "AddPersonas_Tipos_Trans";
    ViewBag.IsNew = true;
    personas_Tipos_Trans.Registro_Estado = "A";

    return PartialView("~/Views/Personas_Tipos_Trans/PopUp.cshtml", personas_Tipos_Trans);
}

[HttpPost]
public virtual ActionResult AddPersonasTiposTrans(Personas_Tipos_TransModel personas_Tipos_Trans)
{
    if (ModelState.IsValid)
    {

        //Campos Auditorias
        personas_Tipos_Trans.Registro_Fecha = DateTime.Now;
        personas_Tipos_Trans.Registro_Usuario = User.Identity.Name;

        personas_Tipos_Trans.Save();
                
        return new HttpStatusCodeResult(200);
    }
    return new HttpStatusCodeResult(500);
}

//Columna por las cuales estan relacionadas
public virtual ActionResult EditPersonasTiposTrans(int persona_Secuencia_parent, string entityKey_child )
{
    var personas_Tipos_Trans =  Personas_Tipos_TransModel.LoadByEntityKey(entityKey_child.ToString());
            
    ViewBag.MasterProperty = "Personas_Master_Personas_Tipos_Trans";
    ViewBag.Name = "EditPersonas_Tipos_Trans";
    ViewBag.IsNew = false;

    return PartialView("~/Views/Personas_Tipos_Trans/PopUp.cshtml", personas_Tipos_Trans);
}

[HttpPost]
public virtual ActionResult EditPersonasTiposTrans(Personas_Tipos_TransModel personas_Tipos_Trans)
{
    if (ModelState.IsValid)
    {
        //Campos Auditorias
        personas_Tipos_Trans.Registro_Fecha = DateTime.Now;
        personas_Tipos_Trans.Registro_Usuario = User.Identity.Name;
        personas_Tipos_Trans.Save();

        return new HttpStatusCodeResult(200);
    }
    return new HttpStatusCodeResult(500);
}

[HttpPost]
public virtual ActionResult DeletePersonasTiposTrans(int persona_Secuencia_parent, string entityKey_child ){
    var personas_Tipos_Trans = Personas_Tipos_TransModel.LoadByEntityKey(entityKey_child.ToString());
       if (personas_Tipos_Trans.Delete())
       {
          return Json(new { cssMainClass = "success", title = Messages.GetOrSetMensaje("MENSAJE_OPERACION_REALIZDA_SASTIFACTORIAMENTE_HEADER"), body = Messages.GetOrSetMensaje("MENSAJE_NOTIFICACION_REGISTRO_BORRADO") }, JsonRequestBehavior.AllowGet);
       }
       else
       {
          return Json(new { cssMainClass = "warning", title = Messages.GetOrSetMensaje("MENSAJE_PRECAUSION_HEADER"), body = Messages.GetOrSetMensaje("MENSAJE_NOTIFICACION_REGISTRO_NO_BORRADO") }, JsonRequestBehavior.AllowGet);
       }

}

public virtual ActionResult ReportPersonasTiposTrans(int persona_Secuencia){
    var personas_Tipos_Trans = Personas_MasterModel.LoadByEntityKey(persona_Secuencia.ToString());            
    return new CsvReportResult("Personas_Tipos_Trans", personas_Tipos_Trans.PersonasTiposTrans);
}

public virtual ActionResult LoadZonas(GridRequestViewModel gridRequest,int persona_Secuencia){
    var zonas = Personas_MasterModel.LoadByEntityKey(persona_Secuencia.ToString());

    int count = zonas.Zonas.Count;

    var dateFormat = System.Globalization.CultureInfo.CurrentCulture.TwoLetterISOLanguageName == "en" ? "MM/dd/yyyy" : "dd/MM/yyyy";
    System.Globalization.DateTimeFormatInfo dtfi = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat;
    dtfi.DateSeparator = "/";

    return Json(new
    {
        iTotalDisplayRecords = count,
        iTotalRecords = count,
        sEcho = gridRequest.GridCustomData,
        aaData = zonas.Zonas.Skip(gridRequest.RowStartIndex)
                        .Take(gridRequest.RowCount)
                        .Select(d => new { 
d.EntityKey,d.Registro_Estado,Registro_Fecha = d.Registro_Fecha.ToString(dateFormat, dtfi),d.Registro_Usuario,Zona_Secuencia = d.Zona != null ? d.Zona.EntityDisplayName : string.Empty,Persona_Secuencia = d.Persona != null ? d.Persona.EntityDisplayName : string.Empty
    })
 });

}

public virtual ActionResult AddZonas(int persona_Secuencia){
    var personas_Master = Personas_MasterModel.LoadByEntityKey(persona_Secuencia.ToString());

    var zonas = new Zonas_Encargados_TransModel();

 zonas.Persona_Secuencia =personas_Master.Persona_Secuencia;            

    ViewBag.MasterProperty = "Personas_Master_Zonas";

    //relations

    ViewBag.Name = "AddZonas_Encargados_Trans";
    ViewBag.IsNew = true;
    zonas.Registro_Estado = "A";

    return PartialView("~/Views/Zonas_Encargados_Trans/PopUp.cshtml", zonas);
}

[HttpPost]
public virtual ActionResult AddZonas(Zonas_Encargados_TransModel zonas)
{
    if (ModelState.IsValid)
    {

        //Campos Auditorias
        zonas.Registro_Fecha = DateTime.Now;
        zonas.Registro_Usuario = User.Identity.Name;

        zonas.Save();
                
        return new HttpStatusCodeResult(200);
    }
    return new HttpStatusCodeResult(500);
}

//Columna por las cuales estan relacionadas
public virtual ActionResult EditZonas(int persona_Secuencia_parent, string entityKey_child )
{
    var zonas =  Zonas_Encargados_TransModel.LoadByEntityKey(entityKey_child.ToString());
            
    ViewBag.MasterProperty = "Personas_Master_Zonas";
    ViewBag.Name = "EditZonas_Encargados_Trans";
    ViewBag.IsNew = false;

    return PartialView("~/Views/Zonas_Encargados_Trans/PopUp.cshtml", zonas);
}

[HttpPost]
public virtual ActionResult EditZonas(Zonas_Encargados_TransModel zonas)
{
    if (ModelState.IsValid)
    {
        //Campos Auditorias
        zonas.Registro_Fecha = DateTime.Now;
        zonas.Registro_Usuario = User.Identity.Name;
        zonas.Save();

        return new HttpStatusCodeResult(200);
    }
    return new HttpStatusCodeResult(500);
}

[HttpPost]
public virtual ActionResult DeleteZonas(int persona_Secuencia_parent, string entityKey_child ){
    var zonas = Zonas_Encargados_TransModel.LoadByEntityKey(entityKey_child.ToString());
       if (zonas.Delete())
       {
          return Json(new { cssMainClass = "success", title = Messages.GetOrSetMensaje("MENSAJE_OPERACION_REALIZDA_SASTIFACTORIAMENTE_HEADER"), body = Messages.GetOrSetMensaje("MENSAJE_NOTIFICACION_REGISTRO_BORRADO") }, JsonRequestBehavior.AllowGet);
       }
       else
       {
          return Json(new { cssMainClass = "warning", title = Messages.GetOrSetMensaje("MENSAJE_PRECAUSION_HEADER"), body = Messages.GetOrSetMensaje("MENSAJE_NOTIFICACION_REGISTRO_NO_BORRADO") }, JsonRequestBehavior.AllowGet);
       }

}

public virtual ActionResult ReportZonas(int persona_Secuencia){
    var zonas = Personas_MasterModel.LoadByEntityKey(persona_Secuencia.ToString());            
    return new CsvReportResult("Zonas_Encargados_Trans", zonas.Zonas);
}

public virtual ActionResult LoadRutasauxiliar(GridRequestViewModel gridRequest,int persona_Secuencia){
    var rutasAuxiliar = Personas_MasterModel.LoadByEntityKey(persona_Secuencia.ToString());

    int count = rutasAuxiliar.Rutasauxiliar.Count;

    var dateFormat = System.Globalization.CultureInfo.CurrentCulture.TwoLetterISOLanguageName == "en" ? "MM/dd/yyyy" : "dd/MM/yyyy";
    System.Globalization.DateTimeFormatInfo dtfi = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat;
    dtfi.DateSeparator = "/";

    return Json(new
    {
        iTotalDisplayRecords = count,
        iTotalRecords = count,
        sEcho = gridRequest.GridCustomData,
        aaData = rutasAuxiliar.Rutasauxiliar.Skip(gridRequest.RowStartIndex)
                        .Take(gridRequest.RowCount)
                        .Select(d => new { 
d.Ruta_Secuencia,d.Ruta_Descripcion,d.Ruta_Mapa_Url,d.Ruta_Carros_Cantidad,d.Ruta_Publicadores_Cantidad,d.Registro_Estado,Registro_Fecha = d.Registro_Fecha.ToString(dateFormat, dtfi),d.Registro_Usuario,Zona_Secuencia = d.ZonasMaster != null ? d.ZonasMaster.EntityDisplayName : string.Empty,Ruta_Persona_Auxiliar = d.PersonasMasterRutaPersonaAuxiliar != null ? d.PersonasMasterRutaPersonaAuxiliar.EntityDisplayName : string.Empty,Ruta_Persona_Encargado = d.PersonasMaster != null ? d.PersonasMaster.EntityDisplayName : string.Empty
    })
 });

}

public virtual ActionResult AddRutasauxiliar(int persona_Secuencia){
    var personas_Master = Personas_MasterModel.LoadByEntityKey(persona_Secuencia.ToString());

    var rutasAuxiliar = new Rutas_MasterModel();

 rutasAuxiliar.Ruta_Persona_Auxiliar =personas_Master.Persona_Secuencia;            

    ViewBag.MasterProperty = "Personas_Master_RutasAuxiliar";

    //relations

    ViewBag.Name = "AddRutas_Master";
    ViewBag.IsNew = true;
    rutasAuxiliar.Registro_Estado = "A";

    return PartialView("~/Views/Rutas_Master/PopUp.cshtml", rutasAuxiliar);
}

[HttpPost]
public virtual ActionResult AddRutasauxiliar(Rutas_MasterModel rutasAuxiliar)
{
    if (ModelState.IsValid)
    {

        //Campos Auditorias
        rutasAuxiliar.Registro_Fecha = DateTime.Now;
        rutasAuxiliar.Registro_Usuario = User.Identity.Name;

        rutasAuxiliar.Save();
                
        return new HttpStatusCodeResult(200);
    }
    return new HttpStatusCodeResult(500);
}

//Columna por las cuales estan relacionadas
public virtual ActionResult EditRutasauxiliar(int persona_Secuencia_parent, int ruta_Secuencia_child )
{
    var rutasAuxiliar =  Rutas_MasterModel.LoadByEntityKey(ruta_Secuencia_child.ToString());
            
    ViewBag.MasterProperty = "Personas_Master_RutasAuxiliar";
    ViewBag.Name = "EditRutas_Master";
    ViewBag.IsNew = false;

    return PartialView("~/Views/Rutas_Master/PopUp.cshtml", rutasAuxiliar);
}

[HttpPost]
public virtual ActionResult EditRutasauxiliar(Rutas_MasterModel rutasAuxiliar)
{
    if (ModelState.IsValid)
    {
        //Campos Auditorias
        rutasAuxiliar.Registro_Fecha = DateTime.Now;
        rutasAuxiliar.Registro_Usuario = User.Identity.Name;
        rutasAuxiliar.Save();

        return new HttpStatusCodeResult(200);
    }
    return new HttpStatusCodeResult(500);
}

[HttpPost]
public virtual ActionResult DeleteRutasauxiliar(int persona_Secuencia_parent, int ruta_Secuencia_child ){
    var rutasAuxiliar = Rutas_MasterModel.LoadByEntityKey(ruta_Secuencia_child.ToString());
       if (rutasAuxiliar.Delete())
       {
          return Json(new { cssMainClass = "success", title = Messages.GetOrSetMensaje("MENSAJE_OPERACION_REALIZDA_SASTIFACTORIAMENTE_HEADER"), body = Messages.GetOrSetMensaje("MENSAJE_NOTIFICACION_REGISTRO_BORRADO") }, JsonRequestBehavior.AllowGet);
       }
       else
       {
          return Json(new { cssMainClass = "warning", title = Messages.GetOrSetMensaje("MENSAJE_PRECAUSION_HEADER"), body = Messages.GetOrSetMensaje("MENSAJE_NOTIFICACION_REGISTRO_NO_BORRADO") }, JsonRequestBehavior.AllowGet);
       }

}

public virtual ActionResult ReportRutasauxiliar(int persona_Secuencia){
    var rutasAuxiliar = Personas_MasterModel.LoadByEntityKey(persona_Secuencia.ToString());            
    return new CsvReportResult("Rutas_Master", rutasAuxiliar.Rutasauxiliar);
}

public virtual ActionResult LoadRutasencargado(GridRequestViewModel gridRequest,int persona_Secuencia){
    var rutasEncargado = Personas_MasterModel.LoadByEntityKey(persona_Secuencia.ToString());

    int count = rutasEncargado.Rutasencargado.Count;

    var dateFormat = System.Globalization.CultureInfo.CurrentCulture.TwoLetterISOLanguageName == "en" ? "MM/dd/yyyy" : "dd/MM/yyyy";
    System.Globalization.DateTimeFormatInfo dtfi = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat;
    dtfi.DateSeparator = "/";

    return Json(new
    {
        iTotalDisplayRecords = count,
        iTotalRecords = count,
        sEcho = gridRequest.GridCustomData,
        aaData = rutasEncargado.Rutasencargado.Skip(gridRequest.RowStartIndex)
                        .Take(gridRequest.RowCount)
                        .Select(d => new { 
d.Ruta_Secuencia,d.Ruta_Descripcion,d.Ruta_Mapa_Url,d.Ruta_Carros_Cantidad,d.Ruta_Publicadores_Cantidad,d.Registro_Estado,Registro_Fecha = d.Registro_Fecha.ToString(dateFormat, dtfi),d.Registro_Usuario,Zona_Secuencia = d.ZonasMaster != null ? d.ZonasMaster.EntityDisplayName : string.Empty,Ruta_Persona_Auxiliar = d.PersonasMasterRutaPersonaAuxiliar != null ? d.PersonasMasterRutaPersonaAuxiliar.EntityDisplayName : string.Empty,Ruta_Persona_Encargado = d.PersonasMaster != null ? d.PersonasMaster.EntityDisplayName : string.Empty
    })
 });

}

public virtual ActionResult AddRutasencargado(int persona_Secuencia){
    var personas_Master = Personas_MasterModel.LoadByEntityKey(persona_Secuencia.ToString());

    var rutasEncargado = new Rutas_MasterModel();

 rutasEncargado.Ruta_Persona_Encargado =personas_Master.Persona_Secuencia;            

    ViewBag.MasterProperty = "Personas_Master_RutasEncargado";

    //relations

    ViewBag.Name = "AddRutas_Master";
    ViewBag.IsNew = true;
    rutasEncargado.Registro_Estado = "A";

    return PartialView("~/Views/Rutas_Master/PopUp.cshtml", rutasEncargado);
}

[HttpPost]
public virtual ActionResult AddRutasencargado(Rutas_MasterModel rutasEncargado)
{
    if (ModelState.IsValid)
    {

        //Campos Auditorias
        rutasEncargado.Registro_Fecha = DateTime.Now;
        rutasEncargado.Registro_Usuario = User.Identity.Name;

        rutasEncargado.Save();
                
        return new HttpStatusCodeResult(200);
    }
    return new HttpStatusCodeResult(500);
}

//Columna por las cuales estan relacionadas
public virtual ActionResult EditRutasencargado(int persona_Secuencia_parent, int ruta_Secuencia_child )
{
    var rutasEncargado =  Rutas_MasterModel.LoadByEntityKey(ruta_Secuencia_child.ToString());
            
    ViewBag.MasterProperty = "Personas_Master_RutasEncargado";
    ViewBag.Name = "EditRutas_Master";
    ViewBag.IsNew = false;

    return PartialView("~/Views/Rutas_Master/PopUp.cshtml", rutasEncargado);
}

[HttpPost]
public virtual ActionResult EditRutasencargado(Rutas_MasterModel rutasEncargado)
{
    if (ModelState.IsValid)
    {
        //Campos Auditorias
        rutasEncargado.Registro_Fecha = DateTime.Now;
        rutasEncargado.Registro_Usuario = User.Identity.Name;
        rutasEncargado.Save();

        return new HttpStatusCodeResult(200);
    }
    return new HttpStatusCodeResult(500);
}

[HttpPost]
public virtual ActionResult DeleteRutasencargado(int persona_Secuencia_parent, int ruta_Secuencia_child ){
    var rutasEncargado = Rutas_MasterModel.LoadByEntityKey(ruta_Secuencia_child.ToString());
       if (rutasEncargado.Delete())
       {
          return Json(new { cssMainClass = "success", title = Messages.GetOrSetMensaje("MENSAJE_OPERACION_REALIZDA_SASTIFACTORIAMENTE_HEADER"), body = Messages.GetOrSetMensaje("MENSAJE_NOTIFICACION_REGISTRO_BORRADO") }, JsonRequestBehavior.AllowGet);
       }
       else
       {
          return Json(new { cssMainClass = "warning", title = Messages.GetOrSetMensaje("MENSAJE_PRECAUSION_HEADER"), body = Messages.GetOrSetMensaje("MENSAJE_NOTIFICACION_REGISTRO_NO_BORRADO") }, JsonRequestBehavior.AllowGet);
       }

}

public virtual ActionResult ReportRutasencargado(int persona_Secuencia){
    var rutasEncargado = Personas_MasterModel.LoadByEntityKey(persona_Secuencia.ToString());            
    return new CsvReportResult("Rutas_Master", rutasEncargado.Rutasencargado);
}

public virtual ActionResult LoadTurnos(GridRequestViewModel gridRequest,int persona_Secuencia){
    var turnos = Personas_MasterModel.LoadByEntityKey(persona_Secuencia.ToString());

    int count = turnos.Turnos.Count;

    var dateFormat = System.Globalization.CultureInfo.CurrentCulture.TwoLetterISOLanguageName == "en" ? "MM/dd/yyyy" : "dd/MM/yyyy";
    System.Globalization.DateTimeFormatInfo dtfi = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat;
    dtfi.DateSeparator = "/";

    return Json(new
    {
        iTotalDisplayRecords = count,
        iTotalRecords = count,
        sEcho = gridRequest.GridCustomData,
        aaData = turnos.Turnos.Skip(gridRequest.RowStartIndex)
                        .Take(gridRequest.RowCount)
                        .Select(d => new { 
d.EntityKey,d.Persona_Turno_HC,d.Registro_Estado,Registro_Fecha = d.Registro_Fecha.ToString(dateFormat, dtfi),d.Registro_Usuario,Horario_Turno_Secuencia = d.HorarioTurnoDiasTrans != null ? d.HorarioTurnoDiasTrans.EntityDisplayName : string.Empty,Persona_Secuencia = d.Persona != null ? d.Persona.EntityDisplayName : string.Empty,d.Dia_Secuencia
    })
 });

}

public virtual ActionResult AddTurnos(int persona_Secuencia){
    var personas_Master = Personas_MasterModel.LoadByEntityKey(persona_Secuencia.ToString());

    var turnos = new Personas_Turnos_TransModel();

 turnos.Persona_Secuencia =personas_Master.Persona_Secuencia;            

    ViewBag.MasterProperty = "Personas_Master_Turnos";

    //relations

    ViewBag.Name = "AddPersonas_Turnos_Trans";
    ViewBag.IsNew = true;
    turnos.Registro_Estado = "A";

    return PartialView("~/Views/Personas_Turnos_Trans/PopUp.cshtml", turnos);
}

[HttpPost]
public virtual ActionResult AddTurnos(Personas_Turnos_TransModel turnos)
{
    if (ModelState.IsValid)
    {

        //Campos Auditorias
        turnos.Registro_Fecha = DateTime.Now;
        turnos.Registro_Usuario = User.Identity.Name;

        turnos.Save();
                
        return new HttpStatusCodeResult(200);
    }
    return new HttpStatusCodeResult(500);
}

//Columna por las cuales estan relacionadas
public virtual ActionResult EditTurnos(int persona_Secuencia_parent, string entityKey_child )
{
    var turnos =  Personas_Turnos_TransModel.LoadByEntityKey(entityKey_child.ToString());
            
    ViewBag.MasterProperty = "Personas_Master_Turnos";
    ViewBag.Name = "EditPersonas_Turnos_Trans";
    ViewBag.IsNew = false;

    return PartialView("~/Views/Personas_Turnos_Trans/PopUp.cshtml", turnos);
}

[HttpPost]
public virtual ActionResult EditTurnos(Personas_Turnos_TransModel turnos)
{
    if (ModelState.IsValid)
    {
        //Campos Auditorias
        turnos.Registro_Fecha = DateTime.Now;
        turnos.Registro_Usuario = User.Identity.Name;
        turnos.Save();

        return new HttpStatusCodeResult(200);
    }
    return new HttpStatusCodeResult(500);
}

[HttpPost]
public virtual ActionResult DeleteTurnos(int persona_Secuencia_parent, string entityKey_child ){
    var turnos = Personas_Turnos_TransModel.LoadByEntityKey(entityKey_child.ToString());
       if (turnos.Delete())
       {
          return Json(new { cssMainClass = "success", title = Messages.GetOrSetMensaje("MENSAJE_OPERACION_REALIZDA_SASTIFACTORIAMENTE_HEADER"), body = Messages.GetOrSetMensaje("MENSAJE_NOTIFICACION_REGISTRO_BORRADO") }, JsonRequestBehavior.AllowGet);
       }
       else
       {
          return Json(new { cssMainClass = "warning", title = Messages.GetOrSetMensaje("MENSAJE_PRECAUSION_HEADER"), body = Messages.GetOrSetMensaje("MENSAJE_NOTIFICACION_REGISTRO_NO_BORRADO") }, JsonRequestBehavior.AllowGet);
       }

}

public virtual ActionResult ReportTurnos(int persona_Secuencia){
    var turnos = Personas_MasterModel.LoadByEntityKey(persona_Secuencia.ToString());            
    return new CsvReportResult("Personas_Turnos_Trans", turnos.Turnos);
}

public virtual ActionResult LoadNotificaciones(GridRequestViewModel gridRequest,int persona_Secuencia){
    var notificaciones = Personas_MasterModel.LoadByEntityKey(persona_Secuencia.ToString());

    int count = notificaciones.Notificaciones.Count;

    var dateFormat = System.Globalization.CultureInfo.CurrentCulture.TwoLetterISOLanguageName == "en" ? "MM/dd/yyyy" : "dd/MM/yyyy";
    System.Globalization.DateTimeFormatInfo dtfi = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat;
    dtfi.DateSeparator = "/";

    return Json(new
    {
        iTotalDisplayRecords = count,
        iTotalRecords = count,
        sEcho = gridRequest.GridCustomData,
        aaData = notificaciones.Notificaciones.Skip(gridRequest.RowStartIndex)
                        .Take(gridRequest.RowCount)
                        .Select(d => new { 
d.EntityKey,d.Notificacion_Vista,Notificacion_Vista_Fecha = d.Notificacion_Vista_Fecha.ToString(dateFormat, dtfi),d.Registro_Estado,Registro_Fecha = d.Registro_Fecha.ToString(dateFormat, dtfi),d.Registro_Usuario,Persona_Secuencia = d.Personas != null ? d.Personas.EntityDisplayName : string.Empty,Notificacion_Numero = d.Notificaciones != null ? d.Notificaciones.EntityDisplayName : string.Empty
    })
 });

}

public virtual ActionResult AddNotificaciones(int persona_Secuencia){
    var personas_Master = Personas_MasterModel.LoadByEntityKey(persona_Secuencia.ToString());

    var notificaciones = new Personas_Notificaciones_TransModel();

 notificaciones.Persona_Secuencia =personas_Master.Persona_Secuencia;            

    ViewBag.MasterProperty = "Personas_Master_Notificaciones";

    //relations

    ViewBag.Name = "AddPersonas_Notificaciones_Trans";
    ViewBag.IsNew = true;
    notificaciones.Registro_Estado = "A";

    return PartialView("~/Views/Personas_Notificaciones_Trans/PopUp.cshtml", notificaciones);
}

[HttpPost]
public virtual ActionResult AddNotificaciones(Personas_Notificaciones_TransModel notificaciones)
{
    if (ModelState.IsValid)
    {

        //Campos Auditorias
        notificaciones.Registro_Fecha = DateTime.Now;
        notificaciones.Registro_Usuario = User.Identity.Name;

        notificaciones.Save();
                
        return new HttpStatusCodeResult(200);
    }
    return new HttpStatusCodeResult(500);
}

//Columna por las cuales estan relacionadas
public virtual ActionResult EditNotificaciones(int persona_Secuencia_parent, string entityKey_child )
{
    var notificaciones =  Personas_Notificaciones_TransModel.LoadByEntityKey(entityKey_child.ToString());
            
    ViewBag.MasterProperty = "Personas_Master_Notificaciones";
    ViewBag.Name = "EditPersonas_Notificaciones_Trans";
    ViewBag.IsNew = false;

    return PartialView("~/Views/Personas_Notificaciones_Trans/PopUp.cshtml", notificaciones);
}

[HttpPost]
public virtual ActionResult EditNotificaciones(Personas_Notificaciones_TransModel notificaciones)
{
    if (ModelState.IsValid)
    {
        //Campos Auditorias
        notificaciones.Registro_Fecha = DateTime.Now;
        notificaciones.Registro_Usuario = User.Identity.Name;
        notificaciones.Save();

        return new HttpStatusCodeResult(200);
    }
    return new HttpStatusCodeResult(500);
}

[HttpPost]
public virtual ActionResult DeleteNotificaciones(int persona_Secuencia_parent, string entityKey_child ){
    var notificaciones = Personas_Notificaciones_TransModel.LoadByEntityKey(entityKey_child.ToString());
       if (notificaciones.Delete())
       {
          return Json(new { cssMainClass = "success", title = Messages.GetOrSetMensaje("MENSAJE_OPERACION_REALIZDA_SASTIFACTORIAMENTE_HEADER"), body = Messages.GetOrSetMensaje("MENSAJE_NOTIFICACION_REGISTRO_BORRADO") }, JsonRequestBehavior.AllowGet);
       }
       else
       {
          return Json(new { cssMainClass = "warning", title = Messages.GetOrSetMensaje("MENSAJE_PRECAUSION_HEADER"), body = Messages.GetOrSetMensaje("MENSAJE_NOTIFICACION_REGISTRO_NO_BORRADO") }, JsonRequestBehavior.AllowGet);
       }

}

public virtual ActionResult ReportNotificaciones(int persona_Secuencia){
    var notificaciones = Personas_MasterModel.LoadByEntityKey(persona_Secuencia.ToString());            
    return new CsvReportResult("Personas_Notificaciones_Trans", notificaciones.Notificaciones);
}

public virtual ActionResult LoadContactoInformaciones(GridRequestViewModel gridRequest,int persona_Secuencia){
    var contacto_Informaciones = Personas_MasterModel.LoadByEntityKey(persona_Secuencia.ToString());

    int count = contacto_Informaciones.ContactoInformaciones.Count;

    var dateFormat = System.Globalization.CultureInfo.CurrentCulture.TwoLetterISOLanguageName == "en" ? "MM/dd/yyyy" : "dd/MM/yyyy";
    System.Globalization.DateTimeFormatInfo dtfi = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat;
    dtfi.DateSeparator = "/";

    return Json(new
    {
        iTotalDisplayRecords = count,
        iTotalRecords = count,
        sEcho = gridRequest.GridCustomData,
        aaData = contacto_Informaciones.ContactoInformaciones.Skip(gridRequest.RowStartIndex)
                        .Take(gridRequest.RowCount)
                        .Select(d => new { 
d.EntityKey,d.Persona_Contacto_Informacion,d.Persona_Contacto_Nota,d.Registro_Estado,Registro_Fecha = d.Registro_Fecha.ToString(dateFormat, dtfi),d.Registro_Usuario,Persona_Secuencia = d.Persona != null ? d.Persona.EntityDisplayName : string.Empty,Contacto_Tipo_Secuencia = d.ContactoTipo != null ? d.ContactoTipo.EntityDisplayName : string.Empty,d.Persona_Contacto_Secuencia
    })
 });

}

public virtual ActionResult AddContactoInformaciones(int persona_Secuencia){
    var personas_Master = Personas_MasterModel.LoadByEntityKey(persona_Secuencia.ToString());

    var contacto_Informaciones = new Persona_Contactos_TransModel();

 contacto_Informaciones.Persona_Secuencia =personas_Master.Persona_Secuencia;            

    ViewBag.MasterProperty = "Personas_Master_Contacto_Informaciones";

    //relations

    ViewBag.Name = "AddPersona_Contactos_Trans";
    ViewBag.IsNew = true;
    contacto_Informaciones.Registro_Estado = "A";

    return PartialView("~/Views/Persona_Contactos_Trans/PopUp.cshtml", contacto_Informaciones);
}

[HttpPost]
public virtual ActionResult AddContactoInformaciones(Persona_Contactos_TransModel contacto_Informaciones)
{
    if (ModelState.IsValid)
    {

        //Campos Auditorias
        contacto_Informaciones.Registro_Fecha = DateTime.Now;
        contacto_Informaciones.Registro_Usuario = User.Identity.Name;

        contacto_Informaciones.Save();
                
        return new HttpStatusCodeResult(200);
    }
    return new HttpStatusCodeResult(500);
}

//Columna por las cuales estan relacionadas
public virtual ActionResult EditContactoInformaciones(int persona_Secuencia_parent, string entityKey_child )
{
    var contacto_Informaciones =  Persona_Contactos_TransModel.LoadByEntityKey(entityKey_child.ToString());
            
    ViewBag.MasterProperty = "Personas_Master_Contacto_Informaciones";
    ViewBag.Name = "EditPersona_Contactos_Trans";
    ViewBag.IsNew = false;

    return PartialView("~/Views/Persona_Contactos_Trans/PopUp.cshtml", contacto_Informaciones);
}

[HttpPost]
public virtual ActionResult EditContactoInformaciones(Persona_Contactos_TransModel contacto_Informaciones)
{
    if (ModelState.IsValid)
    {
        //Campos Auditorias
        contacto_Informaciones.Registro_Fecha = DateTime.Now;
        contacto_Informaciones.Registro_Usuario = User.Identity.Name;
        contacto_Informaciones.Save();

        return new HttpStatusCodeResult(200);
    }
    return new HttpStatusCodeResult(500);
}

[HttpPost]
public virtual ActionResult DeleteContactoInformaciones(int persona_Secuencia_parent, string entityKey_child ){
    var contacto_Informaciones = Persona_Contactos_TransModel.LoadByEntityKey(entityKey_child.ToString());
       if (contacto_Informaciones.Delete())
       {
          return Json(new { cssMainClass = "success", title = Messages.GetOrSetMensaje("MENSAJE_OPERACION_REALIZDA_SASTIFACTORIAMENTE_HEADER"), body = Messages.GetOrSetMensaje("MENSAJE_NOTIFICACION_REGISTRO_BORRADO") }, JsonRequestBehavior.AllowGet);
       }
       else
       {
          return Json(new { cssMainClass = "warning", title = Messages.GetOrSetMensaje("MENSAJE_PRECAUSION_HEADER"), body = Messages.GetOrSetMensaje("MENSAJE_NOTIFICACION_REGISTRO_NO_BORRADO") }, JsonRequestBehavior.AllowGet);
       }

}

public virtual ActionResult ReportContactoInformaciones(int persona_Secuencia){
    var contacto_Informaciones = Personas_MasterModel.LoadByEntityKey(persona_Secuencia.ToString());            
    return new CsvReportResult("Persona_Contactos_Trans", contacto_Informaciones.ContactoInformaciones);
}

		 
 
		#endregion 
 
		#region Details 
 

		 
 
		#endregion 

	} 
} 


