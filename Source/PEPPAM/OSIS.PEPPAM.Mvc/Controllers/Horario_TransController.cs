//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Creador : Administrator
//    Dominio : OSISPC
//    Pc      : OSISPC
//    Fecha   : 5/4/2014 3:34:24 PM
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;
using CodeFluent.Runtime;
using CodeFluent.Runtime.Compression;
using Exceptionless;
using Mvc.Core.Security;
using OSIS.PEPPAM.Mvc.Extensions.ActionResults;
using OSIS.PEPPAM.Mvc.Extensions.Controllers;
using OSIS.PEPPAM.Mvc.Infrastructure.Security;
using OSIS.PEPPAM.Mvc.Models;
using OSIS.PEPPAM.Mvc.Models.Shared;
using OSIS.PEPPAM.Mvc.UI;

namespace OSIS.PEPPAM.Mvc.Controllers
{
    public partial class Horario_TransController : Horario_TransControllerBase
    {

        // Put your controller's initialization logic here

        public override ActionResult Index()
        {
            var model = new Horario_TransModel();

            try
            {
                var congregacion = Personas_MasterModel.Load(User.UsuarioNumero);

            model.Zona_Secuencia = congregacion.Congregacion.Zona_Secuencia;

           


            if (((IPrincipal)User).IsInNivel(SeguridadNivel.EncargadoZona))
            {
                ViewBag.Puestos = Rutas_MasterModel.LoadByZonasMaster(congregacion.Congregacion.Zona);
            }
            else
            {
                var puestoDb = Rutas_MasterModel.Loadencargadoauxiliar(User.UsuarioNumero);
                if (puestoDb != null && puestoDb.Count > 0)
                {
                    ViewBag.Puestos = puestoDb;
                }

            }


            ViewBag.PageIndex = this.GetPageIndex();
            ViewBag.PageSize = this.GetPageSize();
            ViewBag.SearchValue = this.GetSearchValue();
            }
            catch (Exception ex)
            {
                ex.ToExceptionless().Submit();
                throw;
            }

           

            return View(model);
        }

       // [HttpPost]
        public JsonResult LoadPuestos(int zona)
        {
            var puesto = Rutas_MasterModel.Loadzona(zona);
            return Json(puesto.Select(x => new {x.Ruta_Secuencia, x.Ruta_Descripcion}), JsonRequestBehavior.AllowGet);
        }


        [HttpPost]
        public override ActionResult Load(GridRequestViewModel gridRequest)
        {
            OrderByArgumentCollection orderByArguments = new OrderByArgumentCollection();
            orderByArguments.Add("[" + gridRequest.SortColumnName + "]", gridRequest.SortDirection);

            PageOptions pageOptions = new PageOptions();
            pageOptions.OrderByArguments = orderByArguments;

            var totalCount = 0;
            var puesto = 0;
            if (Request["puesto"] != null)
            {
                puesto = Convert.ToInt32(Request["puesto"]);
                if (puesto == -999)
                {
                    puesto =0;
                }
            }

            

            var allhorarioTrans = Horario_TransModel.LoadPaging("[" + gridRequest.SortColumnName + "]", Convert.ToBoolean(gridRequest.SortDirection),
                1 + gridRequest.RowStartIndex / gridRequest.RowCount,
                gridRequest.RowCount, User.UsuarioNumero, puesto, gridRequest.Search);

            var displayRecords = allhorarioTrans.Count;

            var totalRecords = 0;
            if (allhorarioTrans.FirstOrDefault() != null)
            {
                totalRecords = allhorarioTrans.FirstOrDefault().TotalRowCount;
            }

            var dateFormat = System.Globalization.CultureInfo.CurrentCulture.TwoLetterISOLanguageName == "en"
                ? "MM/dd/yyyy"
                : "dd/MM/yyyy";
            System.Globalization.DateTimeFormatInfo dtfi =
                System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat;
            dtfi.DateSeparator = "/";

            return Json(new
            {
                iTotalDisplayRecords = displayRecords,
                iTotalRecords = totalRecords,
                sEcho = gridRequest.GridCustomData,
                aaData =
                    allhorarioTrans.Select(
                        d =>
                            new
                            {
                                Horario_Fecha_Desde = d.Horario_Fecha_Desde.Value.ToString("D"),
                                Horario_Fecha_Hasta = d.Horario_Fecha_Hasta.Value.ToString("D"),
                                d.Horario_Numero,
                                d.Horario_Secuencia,
                                d.Registro_Estado,
                                Registro_Fecha = d.Registro_Fecha.Value.ToString(dateFormat, dtfi),
                                d.Registro_Usuario,
                                d.RowNumber,
                                d.Ruta_Descripcion,
                                d.Ruta_Secuencia,
                                d.Semana_Codigo,
                                Semana_Desde = d.Semana_Desde.Value.ToString(dateFormat, dtfi),
                                Semana_Hasta = d.Semana_Hasta.Value.ToString(dateFormat, dtfi),
                                d.TotalRowCount,
                            })
            });

        }



        public ActionResult Cancelar(int horario)
        {
            var model = Horario_TransModel.Load(horario);

            model.Registro_Estado = "I";
            model.Save();

//            ShowMessages(MessagesType.Success, Messages.GetOrSetMensaje("MENSAJE_HORARIO_CANCELADO"));

            return Json(new { cssMainClass = "success", title = Messages.GetOrSetMensaje("MENSAJE_OPERACION_REALIZDA_SASTIFACTORIAMENTE_HEADER"), body = Messages.GetOrSetMensaje("MENSAJE_HORARIO_CANCELADO") }, JsonRequestBehavior.AllowGet);

  
        }

        //[HttpPost]
        //public ActionResult Cancelar(Horario_TransModel model)
        //{
        //    var modeldb = Horario_TransModel.Load(model.Horario_Secuencia);

        //    modeldb.Registro_Estado = "I";
        //    modeldb.Save();

        //    ShowMessages(MessagesType.Success, Messages.GetOrSetMensaje("MENSAJE_HORARIO_CANCELADO"));

        //    return RedirectToAction("Index");


        //}

        public ActionResult Report(int puesto)
        {
            var totalCount = 0;
            //var allhorarioTrans = Horario_TransModel.LoadAllPaging(this.GetSearchValue(), out totalCount);


            var allhorarioTrans = Horario_TransModel.LoadPaging("", false,
               1,
               10000, User.UsuarioNumero, puesto, this.GetSearchValue());

            var dateFormat = System.Globalization.CultureInfo.CurrentCulture.TwoLetterISOLanguageName == "en"
                ? "MM/dd/yyyy"
                : "dd/MM/yyyy";
            System.Globalization.DateTimeFormatInfo dtfi =
                System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat;
            dtfi.DateSeparator = "/";
            return new CsvReportResult("Horarios",
                allhorarioTrans.Select(
                    d =>
                        new
                        {
                            Horario_Fecha_Desde = d.Horario_Fecha_Desde.Value.ToString(dateFormat, dtfi),
                            Horario_Fecha_Hasta = d.Horario_Fecha_Hasta.Value.ToString(dateFormat, dtfi),
                            Fecha_Creacion = d.Registro_Fecha.Value.ToString(dateFormat, dtfi),
                            Usuario_Creador = d.Registro_Usuario,
                            d.Ruta_Descripcion,
                            d.Semana_Codigo
                        }));
        }
        
        public override ActionResult Create()
        {
            var horarioTrans = new Horario_TransModel();
            ViewBag.IsNew = true;
            horarioTrans.Registro_Estado = "A";
            horarioTrans.Horario_Publicar = "N";

            if (Request.IsAjaxRequest())
            {
                return PartialView("PopUp", horarioTrans);
            }

            return View(horarioTrans);
        }

        //
        // POST: /Usuarios/Create
        [HttpPost]
        public override ActionResult Create(Horario_TransModel horarioTrans)
        {
            if (ModelState.IsValid)
            {

                var semana = Horario_Semanas_CataModel.Load(horarioTrans.Semana_Codigo);
                if (semana != null)
                {

                    var horario = Horario_TransModel.PageLoadByRutasMaster(1, 10, horarioTrans.Ruta_Secuencia);

                    if (horario == null || !horario.Any(x => x.Registro_Estado == "A" && x.Semana_Codigo == horarioTrans.Semana_Codigo))
                    {
                        horarioTrans.Horario_Fecha_Desde = semana.Semana_Desde;
                        horarioTrans.Horario_Fecha_Hasta = semana.Semana_Hasta;

                        //Campos Auditorias
                        horarioTrans.Registro_Fecha = DateTime.Now;
                        horarioTrans.Registro_Usuario = User.Identity.Name;

                        var result = horarioTrans.Save();

                        if (Request.IsAjaxRequest())
                        {
                            return Json(new { Result = "Ok", Url = Url.Action("Edit", new { horario_Secuencia = horarioTrans.Horario_Secuencia }) });
                        }

                        if (result)
                        {
                            return RedirectToAction("Edit", new
                            {
                                horario_Secuencia = horarioTrans.Horario_Secuencia
                            });
                        }
                    }
                    else
                    {
                        ModelState.AddModelError("", Messages.GetOrSetMensaje("MENSAJE_ERROR_EXISTE_HORARIO_SEMANA"));
                    }
                }
            }

            //ModelState.AddModelError("","eroror roeoroe oreo ");
            ViewBag.IsNew = true;
            //return new HttpStatusCodeResult(500);
            if (Request.IsAjaxRequest())
            {
                return PartialView("PopUp", horarioTrans);
            }

            return View(horarioTrans);

        }



        public override ActionResult Edit(int horario_Secuencia)
        {

            var horarioTrans = Horario_TransModel.LoadByEntityKey(horario_Secuencia.ToString());

            ViewBag.IsNew = false;

            return View(horarioTrans);
        }

        [HttpPost]
        public override ActionResult Edit(Horario_TransModel horarioTrans)
        {

            if (ModelState.IsValid)
            {
                if (horarioTrans.Horario_Publicar == "S")
                {
                    var horarios = Horario_Turno_TransModel.LoadTurnos(horarioTrans.Horario_Secuencia);

                    if (horarios == null || horarios.Count <= 0)
                    {
                        ShowMessages(MessagesType.Error, Messages.GetOrSetMensaje("MENSAJE_ERROR_HORARIO_SIN_TURNOS"));

                        ViewBag.IsNew = false;
                        return View(horarioTrans);
                    }
                }

                //Campos Auditorias
                horarioTrans.Registro_Fecha = DateTime.Now;
                horarioTrans.Registro_Usuario = User.Identity.Name;


                var result = horarioTrans.Save();

                if (result)
                {
                    return RedirectToAction("Index");
                }
            }

            ViewBag.IsNew = false;
            return View(horarioTrans);
        }


        public override ActionResult LoadHorarioTurnoTrans(GridRequestViewModel gridRequest, int horario_Secuencia)
        {
            var horario_Turno_Trans = Horario_Turno_TransModel.LoadTurnos(horario_Secuencia); // Horario_TransModel.LoadByEntityKey(horario_Secuencia.ToString());

            int count = horario_Turno_Trans.Count;

            var dateFormat = System.Globalization.CultureInfo.CurrentCulture.TwoLetterISOLanguageName == "en" ? "MM/dd/yyyy" : "dd/MM/yyyy";
            System.Globalization.DateTimeFormatInfo dtfi = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat;
            dtfi.DateSeparator = "/";

            return Json(new
            {
                iTotalDisplayRecords = count,
                iTotalRecords = count,
                sEcho = gridRequest.GridCustomData,
                aaData = horario_Turno_Trans.Skip(gridRequest.RowStartIndex)
                                .Take(gridRequest.RowCount)
                                .Select(d => new
                                {
                                    d.Dias,
                                    d.Horario_Secuencia,
                                    d.Horario_Turno_Secuencia,
                                    d.Registro_Estado,
                                    Registro_Fecha = d.Registro_Fecha.ToString(dateFormat, dtfi),
                                    d.Registro_Usuario,
                                    d.Turno_Cantidad_Publicadores,
                                    d.Turno_Descripcion,
                                    d.Turno_Hora_Desde,
                                    d.Turno_Hora_Hasta,
                                    d.Turno_Minutos_Cantidad,
                                    //Horario_Secuencia = d.HorarioTrans != null ? d.HorarioTrans.EntityDisplayName : string.Empty,
                                    //Turnos_Master_Dias = string.Join("\r\n | ", d.HorarioTurnoDiasTrans.Select(x => x.DiasCata.Dia_Descripcion))
                                })
            });

        }

        [HttpPost]
        public override ActionResult DeleteHorarioTurnoTrans(int horario_Secuencia_parent, int horario_Turno_Secuencia_child)
        {
            var horario_Turno_Trans = Horario_Turno_TransModel.LoadByEntityKey(horario_Turno_Secuencia_child.ToString());

            horario_Turno_Trans.Registro_Estado = "I";
            if (horario_Turno_Trans.Save())
            {
                return Json(new { cssMainClass = "success", title = Messages.GetOrSetMensaje("MENSAJE_OPERACION_REALIZDA_SASTIFACTORIAMENTE_HEADER"), body = Messages.GetOrSetMensaje("MENSAJE_NOTIFICACION_TURNO_ELIMINADO") }, JsonRequestBehavior.AllowGet);
            }
            else
            {
                return Json(new { cssMainClass = "warning", title = Messages.GetOrSetMensaje("MENSAJE_PRECAUSION_HEADER"), body = Messages.GetOrSetMensaje("MENSAJE_NOTIFICACION_REGISTRO_NO_BORRADO") }, JsonRequestBehavior.AllowGet);
            }

        }

        public override ActionResult AddHorarioTurnoTrans(int horario_Secuencia)
        {
            var horario_Trans = Horario_TransModel.LoadByEntityKey(horario_Secuencia.ToString());

            var horario_Turno_Trans = new Horario_Turno_TransModel();

            horario_Turno_Trans.Horario_Secuencia = horario_Trans.Horario_Secuencia;

            ViewBag.MasterProperty = "Horario_Trans_Horario_Turno_Trans";
            horario_Turno_Trans.Turno_Dia_Razon_Cancelacion = "N/A";

            //relations

            ViewBag.Name = "AddHorario_Turno_Trans";
            ViewBag.IsNew = true;
            horario_Turno_Trans.Registro_Estado = "A";

            if (Request.IsAjaxRequest())
            {
                return PartialView("~/Views/Horario_Turno_Trans/PopUpJs.cshtml", horario_Turno_Trans);
            }

            return View("~/Views/Horario_Turno_Trans/PopUp.cshtml", horario_Turno_Trans);
        }

        public int CantidadMinutos(string desde, string hasta)
        {
            DateTime datetime1;
            DateTime datetime2;

            DateTime.TryParse(desde, out datetime1);

            DateTime.TryParse(hasta, out datetime2);

            TimeSpan span = datetime2.Subtract(datetime1);

            return Convert.ToInt32(span.TotalMinutes);

        }

        public DateTime GetDate(DateTime desde, DateTime hasta, int dia)
        {
            while (desde <= hasta)
            {
                if (desde.DayOfWeek == (DayOfWeek) dia)
                {
                    return desde;
                }
               desde=  desde.AddDays(1);
            }

            return DateTime.Now;
        }

        [HttpPost]
        public override ActionResult AddHorarioTurnoTrans(Horario_Turno_TransModel horario_Turno_Trans)
        {
            if (ModelState.IsValid)
            {

                //Campos Auditorias
                horario_Turno_Trans.Registro_Fecha = DateTime.Now;
                horario_Turno_Trans.Registro_Usuario = User.Identity.Name;

                horario_Turno_Trans.Turno_Minutos_Cantidad =  CantidadMinutos(
                    horario_Turno_Trans.Turno_Hora_Desde, horario_Turno_Trans.Turno_Hora_Hasta);

                horario_Turno_Trans.Turno_Dia_Razon_Cancelacion = @"N\A";

                horario_Turno_Trans.Save();


                var horarioTrans = Horario_TransModel.Load(horario_Turno_Trans.Horario_Secuencia);
                

                foreach (var dia in horario_Turno_Trans.DiasSelect)
                {
                    var turnosDias = new Horario_Turno_Dias_TransModel()
                    {
                        Dia_Secuencia = Convert.ToInt32(dia),
                        Horario_Turno_Secuencia = horario_Turno_Trans.Horario_Turno_Secuencia,
                        Turno_Fecha = GetDate(horarioTrans.Horario_Fecha_Desde, horarioTrans.Horario_Fecha_Hasta, Convert.ToInt32(dia)),
                        Registro_Estado = "A",
                        Registro_Fecha = DateTime.Now,
                        Registro_Usuario = User.Identity.Name,
                        Turno_Estado = "A",
                        //Turno_Fecha = DateTime.Now,
                        Turno_Razon_Inactivo = "N/A"
                    };

                    turnosDias.Save();
                }

                if (Request.IsAjaxRequest())
                {
                    return Json(new { Result = "Ok", Url = Url.Action("Edit", new { horario_Secuencia = horario_Turno_Trans.Horario_Secuencia }) });
                }

                return RedirectToAction("Edit", new { horario_Secuencia = horario_Turno_Trans.Horario_Secuencia });
                //return new HttpStatusCodeResult(200);
            }
           // return new HttpStatusCodeResult(500);

            
            ViewBag.MasterProperty = "Horario_Trans_Horario_Turno_Trans";
            ViewBag.Name = "AddHorario_Turno_Trans";
            ViewBag.IsNew = true;
            horario_Turno_Trans.Registro_Estado = "A";

            if (Request.IsAjaxRequest())
            {
                return PartialView("~/Views/Horario_Turno_Trans/PopUpJs.cshtml", horario_Turno_Trans);
            }

            return View("~/Views/Horario_Turno_Trans/PopUp.cshtml", horario_Turno_Trans);
        }

        //Columna por las cuales estan relacionadas
        public override ActionResult EditHorarioTurnoTrans(int horario_Secuencia_parent, int horario_Turno_Secuencia_child)
        {
            var horario_Turno_Trans = Horario_Turno_TransModel.LoadByEntityKey(horario_Turno_Secuencia_child.ToString());

            ViewBag.MasterProperty = "Horario_Trans_Horario_Turno_Trans";
            ViewBag.Name = "EditHorario_Turno_Trans";
            ViewBag.IsNew = false;

            horario_Turno_Trans.DiasSelect =  horario_Turno_Trans.HorarioTurnoDiasTrans.Where(x => x.Registro_Estado == "A").Select(x => x.Dia_Secuencia.ToString()).ToList();
            horario_Turno_Trans.Turno_Dia_Razon_Cancelacion = @"N\A";

            if (Request.IsAjaxRequest())
            {
                return PartialView("~/Views/Horario_Turno_Trans/PopUpJs.cshtml", horario_Turno_Trans);
            }

            return View("~/Views/Horario_Turno_Trans/PopUpEdit.cshtml", horario_Turno_Trans);
        }

        [HttpPost]
        public override ActionResult EditHorarioTurnoTrans(Horario_Turno_TransModel horario_Turno_Trans)
        {

            
            if (ModelState.IsValid)
            {
                //Campos Auditorias
                horario_Turno_Trans.Registro_Fecha = DateTime.Now;
                horario_Turno_Trans.Registro_Usuario = User.Identity.Name;

                horario_Turno_Trans.Turno_Minutos_Cantidad = CantidadMinutos(
                    horario_Turno_Trans.Turno_Hora_Desde, horario_Turno_Trans.Turno_Hora_Hasta);


                horario_Turno_Trans.Save();

                //var deleteall = Horario_Turno_Dias_TransModel.Deletehorario(horario_Turno_Trans.Horario_Turno_Secuencia);

                foreach (var horarioTurnoDiasTransModel in horario_Turno_Trans.HorarioTurnoDiasTrans)
                {
                    horarioTurnoDiasTransModel.Registro_Estado = "I";
                    horarioTurnoDiasTransModel.Save();
                }

                var horarioTrans = Horario_TransModel.Load(horario_Turno_Trans.Horario_Secuencia);
                
                foreach (var dia in horario_Turno_Trans.DiasSelect)
                {
                    var turnosDias = new Horario_Turno_Dias_TransModel()
                    {
                        Dia_Secuencia = Convert.ToInt32(dia),
                        Horario_Turno_Secuencia = horario_Turno_Trans.Horario_Turno_Secuencia,
                        Turno_Fecha = GetDate(horarioTrans.Horario_Fecha_Desde, horarioTrans.Horario_Fecha_Hasta, Convert.ToInt32(dia)),
                        Registro_Estado = "A",
                        Registro_Fecha = DateTime.Now,
                        Registro_Usuario = User.Identity.Name,
                        Turno_Estado = "A",
                        //Turno_Fecha = DateTime.Now,
                        Turno_Razon_Inactivo = "N/A"
                    };

                    turnosDias.Save();
                }

                if (Request.IsAjaxRequest())
                {
                    return
                        Json(
                            new
                            {
                                Result = "Ok",
                                Url =
                                    Url.Action("Edit", new {horario_Secuencia = horario_Turno_Trans.Horario_Secuencia})
                            });
                }

                return RedirectToAction("Edit", new { horario_Secuencia = horario_Turno_Trans.Horario_Secuencia });
            }

            ViewBag.MasterProperty = "Horario_Trans_Horario_Turno_Trans";
            ViewBag.Name = "EditHorario_Turno_Trans";
            ViewBag.IsNew = false;

            if (Request.IsAjaxRequest())
            {
                return PartialView("~/Views/Horario_Turno_Trans/PopUpJs.cshtml", horario_Turno_Trans);
            }

            return View("~/Views/Horario_Turno_Trans/PopUpEdit.cshtml", horario_Turno_Trans);
        }
        
        public ActionResult GetCancelarTurno(int horario_Secuencia_parent, int horario_Turno_Secuencia_child)
        {
            var horario_Turno_Trans = Horario_Turno_TransModel.LoadByEntityKey(horario_Turno_Secuencia_child.ToString());

            return PartialView("Cancelar", horario_Turno_Trans);


        }

        public ActionResult CancelarTurno(Horario_Turno_TransModel model)
        {
          //  var horario_Turno_Trans = Horario_Turno_TransModel.LoadByEntityKey(model.EntityKey);

            if (model.HorarioTurnoDiasTrans != null && !string.IsNullOrEmpty(model.Turno_Dia_Razon_Cancelacion))
            {
                foreach (var diaturno in model.HorarioTurnoDiasTrans)
                {
                    if (diaturno.IsSelected)
                    {
                        diaturno.Turno_Estado = "I";
                        diaturno.Turno_Razon_Inactivo = model.Turno_Dia_Razon_Cancelacion;
                    }
                    else
                    {
                        diaturno.Turno_Estado = "A";
                    }

                    diaturno.Registro_Fecha = DateTime.Now;
                    diaturno.Registro_Usuario = User.UsuarioCorreo;
                    diaturno.Save();
                }

            }
            else
            {

                //ModelState.AddModelError("HorarioTurnoDiasTrans",Messages.GetOrSetMensaje("MENSAJE_ERROR_SELECCIONAR_DIAS_CANCELAR"));


                if (Request.IsAjaxRequest())
                {
                    return Json(new {Result = "Error", html = RenderRazorViewToString("Cancelar", model)}, JsonRequestBehavior.AllowGet);
                }
                
                return PartialView("Cancelar", model);
            }

            if (Request.IsAjaxRequest())
            {
                return Json(new { Result = "Ok", html = "" }, JsonRequestBehavior.AllowGet);
            }

            return RedirectToAction("Edit", new { horario_Secuencia  = model.Horario_Secuencia});
        }





        public ActionResult AddHorarioTurnos()
        {
            ViewBag.IsNew = true;

            var model = new HorarioTurnosModel();

            model.Turnos = new List<TurnosModel>();

            var count = 1;
            while (count < 6)
            {
                var turno = new TurnosModel()
                {
                    Turno_Cantidad_Publicadores = 0,
                    Turno_Descripcion = "Turno " + count,
                };
                
                turno.Dias = new List<DiasModel>();
                foreach (var dia in Dias_CataModel.LoadAll().OrderBy(x => x.Dia_Orden))
                {
                     turno.Dias.Add(new DiasModel()
                     {
                         Dia_Descripcion = dia.Dia_Descripcion,
                         Dia_Orden = dia.Dia_Orden,
                         Dia_Secuencia = dia.Dia_Secuencia,
                         IsSelected = false
                     });
                }

                model.Turnos.Add(turno);

                count++;
            }



            var congregacion = Personas_MasterModel.Load(User.UsuarioNumero);

            model.Zona_Secuencia = congregacion.Congregacion.Zona_Secuencia;
            
            if (((IPrincipal)User).IsInNivel(SeguridadNivel.EncargadoZona))
            {
                ViewBag.Puestos = Rutas_MasterModel.LoadByZonasMaster(congregacion.Congregacion.Zona);
            }
            else
            {
                var puestoDb = Rutas_MasterModel.Loadencargadoauxiliar(User.UsuarioNumero);
                if (puestoDb != null && puestoDb.Count > 0)
                {
                    ViewBag.Puestos = puestoDb;
                }
            }

            return View("AddHorario", model);

        }


        [HttpPost]
        public ActionResult AddHorarioTurnos(HorarioTurnosModel model)
        {

            if (ModelState.IsValid)
            {
                var semana = Horario_Semanas_CataModel.Load(model.Semana_Codigo);
                if (semana != null)
                {


                    var horario1 = Horario_TransModel.PageLoadByRutasMaster(1, 10, model.Ruta_Secuencia);

                    if (horario1 == null ||
                        !horario1.Any(x => x.Registro_Estado == "A" && x.Semana_Codigo == model.Semana_Codigo))
                    {
                        var horario = new Horario_TransModel()
                        {
                            Semana_Codigo = model.Semana_Codigo,
                            Horario_Fecha_Desde = semana.Semana_Desde,
                            Horario_Fecha_Hasta = semana.Semana_Hasta,
                            Horario_Numero = model.Horario_Numero,
                            Horario_Publicar = "N",
                            Registro_Estado = "A",
                            Registro_Fecha = DateTime.Now,
                            Registro_Usuario = User.Identity.Name,
                            Ruta_Secuencia = model.Ruta_Secuencia,
                            Zona_Secuencia = model.Zona_Secuencia
                        };

                        horario.Save();


                        foreach (var turnoselected in model.Turnos.Where(x => x.IsSelected))
                        {
                            var turno = new Horario_Turno_TransModel()
                            {
                                //Horario_Turno_Secuencia = model.Horario_Turno_Secuencia,
                                Horario_Secuencia = horario.Horario_Secuencia,
                                Turno_Descripcion = turnoselected.Turno_Descripcion,
                                Turno_Hora_Desde = turnoselected.Turno_Hora_Desde,
                                Turno_Hora_Hasta = turnoselected.Turno_Hora_Hasta,
                                Turno_Minutos_Cantidad = CantidadMinutos(
                                    turnoselected.Turno_Hora_Desde, turnoselected.Turno_Hora_Hasta),
                                Turno_Cantidad_Publicadores = turnoselected.Turno_Cantidad_Publicadores,
                                Registro_Estado = "A",
                                Registro_Fecha = DateTime.Now,
                                Registro_Usuario = User.Identity.Name
                            };
                            turno.Save();

                            foreach (var diaSeleted in turnoselected.Dias.Where(x => x.IsSelected))
                            {
                                var turno_dia = new Horario_Turno_Dias_TransModel()
                                {
                                    Registro_Estado = "A",
                                    Registro_Fecha = DateTime.Now,
                                    Registro_Usuario = User.Identity.Name,
                                    Turno_Fecha =
                                        GetDate(horario.Horario_Fecha_Desde, horario.Horario_Fecha_Hasta,
                                            Convert.ToInt32(diaSeleted.Dia_Secuencia)),
                                    Dia_Secuencia = diaSeleted.Dia_Secuencia,
                                    Turno_Estado = "A",
                                    Turno_Razon_Inactivo = "N/A",
                                    Turno_Estudios_Iniciado_Cantidad = 0,
                                    Horario_Turno_Secuencia = turno.Horario_Turno_Secuencia
                                };

                                turno_dia.Save();
                            }
                        }


                        ShowMessages(MessagesType.Success, Messages.GetOrSetMensaje("MENSAJE_HORARIO_CREADO"));

                        if (Request.IsAjaxRequest())
                        {
                            return
                                Json(
                                    new
                                    {
                                        Result = "Ok",
                                        Url = Url.Action("Edit", new {horario_Secuencia = horario.Horario_Secuencia})
                                    });
                        }

                        return RedirectToAction("Edit", new {horario_Secuencia = horario.Horario_Secuencia});

                    }
                    else
                    {
                        ModelState.AddModelError("", Messages.GetOrSetMensaje("MENSAJE_ERROR_EXISTE_HORARIO_SEMANA"));
                    }
                }
            }

            var congregacion = Personas_MasterModel.Load(User.UsuarioNumero);

            model.Zona_Secuencia = congregacion.Congregacion.Zona_Secuencia;

            if (((IPrincipal)User).IsInNivel(SeguridadNivel.EncargadoZona))
            {
                ViewBag.Puestos = Rutas_MasterModel.LoadByZonasMaster(congregacion.Congregacion.Zona);
            }
            else
            {
                var puestoDb = Rutas_MasterModel.Loadencargadoauxiliar(User.UsuarioNumero);
                if (puestoDb != null && puestoDb.Count > 0)
                {
                    ViewBag.Puestos = puestoDb;
                }
            }

            ViewBag.IsNew = true;

            return View("AddHorario", model);
        }




    }
}

