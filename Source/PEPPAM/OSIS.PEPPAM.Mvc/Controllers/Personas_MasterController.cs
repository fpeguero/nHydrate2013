//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Creador : Administrator
//    Dominio : OSISPC
//    Pc      : OSISPC
//    Fecha   : 5/4/2014 6:24:26 PM
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using CodeFluent.Runtime;
using Mvc.Core.Security;
using OSIS.PEPPAM.BOM;
using OSIS.PEPPAM.Mvc.Extensions.Controllers;
using OSIS.PEPPAM.Mvc.Infrastructure.Security;
using OSIS.PEPPAM.Mvc.Models;
using OSIS.PEPPAM.Mvc.Models.Shared;

namespace OSIS.PEPPAM.Mvc.Controllers
{
	public partial class Personas_MasterController : Personas_MasterControllerBase
	{
			// Put your controller's initialization logic here

     
        public override ActionResult AddTurnos(int persona_Secuencia)
        {
            var personas_Master = Personas_MasterModel.LoadByEntityKey(persona_Secuencia.ToString());

            var turnos = new Personas_Turnos_TransModel();

            turnos.Persona_Secuencia = personas_Master.Persona_Secuencia;

            ViewBag.MasterProperty = "Personas_Master_Turnos";
            
            ViewBag.Rutas = Rutas_MasterModel.Loadpersona(personas_Master.Persona_Secuencia);

            if (ViewBag.Rutas != null)
            {
                var rutas = (List<OSIS.PEPPAM.Mvc.Models.Rutas_MasterModel>) ViewBag.Rutas;

                if (rutas != null & rutas.Count > 0)
                {
                    var puesto = rutas.FirstOrDefault().Ruta_Secuencia;

                    ViewBag.Horarios = Proc_Horarios_RutaModel.Load(puesto);


                    if (ViewBag.Horarios != null)
                    {
                        var horario = (List<OSIS.PEPPAM.Mvc.Models.Proc_Horarios_RutaModel>) ViewBag.Horarios;
                        if (horario != null && horario.Count > 0)
                        {
                            var horarioTurnos = Proc_Horarios_TurnosModel.Load(horario.FirstOrDefault().Horario_Secuencia);

                            ViewBag.Turnos = horarioTurnos;
                        }
                    }

                }

            }

            //relations

            ViewBag.Name = "AddPersonas_Turnos_Trans";
            ViewBag.IsNew = true;

            return PartialView("~/Views/Personas_Turnos_Trans/PopUp.cshtml", turnos);
        }



        public JsonResult LoadHorarios(int rutaSecuencia)
        {
          //  var horarios = Horario_TransModel.PageLoadByRutasMaster(0, 1000, rutaSecuencia).Where(x => x.HorarioTurnoTrans != null && x.HorarioTurnoTrans.Count > 0);
            var horarios = Proc_Horarios_RutaModel.Load(rutaSecuencia);

            return Json(new SelectList(horarios, "Horario_Secuencia", "EntityDisplayName2"), JsonRequestBehavior.AllowGet);

        }


        public JsonResult LoadHorarioTurnos(int hId)
        {

            var turnos = Proc_Horarios_TurnosModel.Load(hId);

            //var horarios = Horario_TransModel.LoadTurnos(horarioSecuencia);

            //return Json(new SelectList(turnos, "EntityKey", "Turnos"), JsonRequestBehavior.AllowGet);
            
            return Json(turnos.Select(x => new
            {
               x.Horario_Turno_Secuencia,
               x.Dia_Secuencia,
               x.Turnos
            }), JsonRequestBehavior.AllowGet);

        }


        public JsonResult LoadCongregaciones(int zona)
        {
            var congregaciones = Congregaciones_MasterModel.PageLoadByZona(1, 10000, zona);

            return Json(new SelectList(congregaciones, "Congregacion_Secuencia", "Congregacion_Nombre"), JsonRequestBehavior.AllowGet);

        }


        public override ActionResult Index()
        {
            var model = new Personas_FiltroModel();

            ViewBag.PageIndex = this.GetPageIndex();
            ViewBag.PageSize = this.GetPageSize();
            ViewBag.SearchValue = this.GetSearchValue();

            
            var congregacion = Personas_MasterModel.Load(User.UsuarioNumero);
            model.Zona_Secuencia = congregacion.Congregacion.Zona_Secuencia;
            
            if (((IPrincipal)User).IsInNivel(SeguridadNivel.EncargadoZona))
            {
                ViewBag.Zonas = Zonas_MasterModel.LoadAll();

                ViewBag.Congregaciones = Congregaciones_MasterModel.LoadByZona(congregacion.Congregacion.Zona);
            }
            else
            {
                var puestoDb = Rutas_MasterModel.Loadencargadoauxiliar(User.UsuarioNumero);
                if (puestoDb != null && puestoDb.Count > 0)
                {
                    ViewBag.Puestos = puestoDb;
                }

            }


            ViewBag.EstadosPersona = Persona_Estado_CataModel.LoadAll();

            return View(model);
        }


        [HttpPost]
        public override ActionResult Load(GridRequestViewModel gridRequest)
        {
            OrderByArgumentCollection orderByArguments = new OrderByArgumentCollection();
            orderByArguments.Add("[" + gridRequest.SortColumnName + "]", gridRequest.SortDirection);

            PageOptions pageOptions = new PageOptions();
            pageOptions.OrderByArguments = orderByArguments;

            var totalCount = 0;
            var congregacion = -999;
            if (Request["congregacion"] != null)
            {
                congregacion = Convert.ToInt32(Request["congregacion"]);
                if (congregacion <= 0)
                {
                    congregacion = -999;
                }
            }
            var persona = -999;
           var zona = -999;
           if (Request["zona"] != null)
           {
               zona = Convert.ToInt32(Request["zona"]);
               if (zona <= 0)
               {
                   zona = -999;
               }
           }
            var personaTipo = -999;
            if (Request["personaTipo"] != null)
            {
                personaTipo = Convert.ToInt32(Request["personaTipo"]);
                if (personaTipo <= 0)
                {
                    personaTipo =-999;
                }
            }

            if (!string.IsNullOrEmpty(gridRequest.Search))
            {
                congregacion = -999;
                zona = -999;
                personaTipo = -999;
            }


            if (!User.IsInNivel(SeguridadNivel.EncargadoZona))
            {
                zona = ((Principal) User).UsuarioZona;
            }


            //pageIndex, pageSize, congregacionSecuencia,personaSecuencia,zonaSecuencia,searchString, pageOptions
            var allpersonasMaster = Personas_MasterModel.Personas_DescripcionPageLoadAll(1 + gridRequest.RowStartIndex / gridRequest.RowCount,
                gridRequest.RowCount, congregacion, personaTipo,persona, zona, gridRequest.Search, pageOptions);

            var displayRecords = allpersonasMaster.Count;
            var totalRecords = 0;
            if (displayRecords > 0)
            {
                 totalRecords = allpersonasMaster.FirstOrDefault().TotalRowCount;
            }

            var dateFormat = System.Globalization.CultureInfo.CurrentCulture.TwoLetterISOLanguageName == "en"
                ? "MM/dd/yyyy"
                : "dd/MM/yyyy";
            System.Globalization.DateTimeFormatInfo dtfi =
                System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat;
            dtfi.DateSeparator = "/";

            return Json(new
            {
                iTotalDisplayRecords = totalRecords,
                iTotalRecords = totalRecords,
                sEcho = gridRequest.GridCustomData,
                aaData =
                    allpersonasMaster.Select(
                        d =>
                            new
                            {
                                d.Congregacion_Direccion,
                                d.Congregacion_Nombre,
                                d.Congregacion_Secuencia,
                                d.Persona_Apellidos,
                                d.Persona_Clave,
                                d.Persona_Congregacion,
                                d.Persona_Conyuge_Apellido,
                                d.Persona_Correo,
                                d.Persona_Estado_Descripcion,
                                d.Persona_Estado_Explicacion,
                                d.Persona_Estado_Secuencia,
                                d.Persona_Nombres,
                                d.Persona_Secuencia,
                                d.Persona_Sexo,
                                d.Persona_Tipo_Descripcion,
                                d.Persona_Tipo_Secuencia,
                                d.Persona_Verificacion_Numero,
                                d.Registro_Estado,
                                Registro_Fecha =d.Registro_Fecha.Value.ToString(dateFormat,dtfi),
                                d.Registro_Usuario,
                                d.Zona_Descripcion,
                            })
            });

        }





        public override ActionResult LoadTurnos(GridRequestViewModel gridRequest, int persona_Secuencia)
        {

            OrderByArgumentCollection orderByArguments = new OrderByArgumentCollection();
            orderByArguments.Add("[" + gridRequest.SortColumnName + "]", gridRequest.SortDirection);

            PageOptions pageOptions = new PageOptions();
            pageOptions.OrderByArguments = orderByArguments;


            var turnos = Proc_Personas_TurnosModel.PageLoadAllPaging(1 + gridRequest.RowStartIndex / gridRequest.RowCount,
                gridRequest.RowCount, persona_Secuencia, gridRequest.Search, pageOptions);



            int count = turnos.Count;
            var totalrow = 0;
            if (count > 0)
            {
                totalrow = turnos.FirstOrDefault().TotalRowCount;
            }

            var dateFormat = System.Globalization.CultureInfo.CurrentCulture.TwoLetterISOLanguageName == "en" ? "MM/dd/yyyy" : "dd/MM/yyyy";
            System.Globalization.DateTimeFormatInfo dtfi = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat;
            dtfi.DateSeparator = "/";

            return Json(new
            {
                iTotalDisplayRecords = totalrow,
                iTotalRecords = totalrow,
                sEcho = gridRequest.GridCustomData,
                aaData = turnos.Skip(gridRequest.RowStartIndex)
                                .Take(gridRequest.RowCount)
                                .Select(d => new
                                {
                                    d.EntityKey,
                                    d.Congregacion_Nombre,
                                    d.Dia_Descripcion,
                                    d.Dia_Orden,
                                    d.Dia_Secuencia,
                                    d.Horario_Fecha_Desde,
                                    d.Horario_Fecha_Hasta,
                                    d.Horario_Publicar,
                                    d.Horario_Secuencia,
                                    d.Horario_Turno_Secuencia,
                                    d.Persona_Apellidos,
                                    d.Persona_Nombres,
                                    d.Persona_Secuencia,
                                    d.Persona_Sexo,
                                    d.Persona_Tipo_Secuencia,
                                    d.Persona_Turno_HC,
                                    d.Registro_Estado,
                                    d.Registro_Fecha,
                                    d.Registro_Usuario,
                                    d.Ruta_Descripcion,
                                    d.Ruta_Secuencia,
                                    d.Semana_Codigo,
                                    d.TotalRowCount,
                                    d.Turno_Descripcion,
                                    d.Turno_Estado,
                                    Turno_Fecha = d.Turno_Fecha.ToString("D"),
                                    d.Turno_Hora_Desde,
                                    d.Turno_Hora_Hasta,
                                    d.Turno_Minutos_Cantidad,
                                    d.Turno_Razon_Inactivo,
                                    d.Zona_Descripcion,
                                    d.Zona_Secuencia,
                                })
            });

        }

      
        [HttpPost]
        public override ActionResult AddTurnos(Personas_Turnos_TransModel turnos)
        {
            if (ModelState.IsValid)
            {

                //Campos Auditorias
                turnos.Registro_Fecha = DateTime.Now;
                turnos.Registro_Usuario = User.Identity.Name;

                turnos.Save();

                return new HttpStatusCodeResult(200);
            }
            return new HttpStatusCodeResult(500);
        }




        public override ActionResult EditTurnos(int persona_Secuencia_parent, string entityKey_child)
        {
            var turnos = Personas_Turnos_TransModel.LoadByEntityKey(entityKey_child.ToString());

            ViewBag.MasterProperty = "Personas_Master_Turnos";
            ViewBag.Name = "EditPersonas_Turnos_Trans";
            ViewBag.IsNew = false;


            ViewBag.Rutas = Rutas_MasterModel.Loadpersona(persona_Secuencia_parent);

            if (ViewBag.Rutas != null)
            {
                var rutas = (List<OSIS.PEPPAM.Mvc.Models.Rutas_MasterModel>)ViewBag.Rutas;

                if (rutas != null & rutas.Count > 0)
                {
                    var puesto = turnos.Ruta_Secuencia;

                    ViewBag.Horarios = Proc_Horarios_RutaModel.Load(puesto);


                    if (ViewBag.Horarios != null)
                    {
                        var horario = (List<OSIS.PEPPAM.Mvc.Models.Proc_Horarios_RutaModel>)ViewBag.Horarios;
                        if (horario != null && horario.Count > 0)
                        {
                            var horarioTurnos = Proc_Horarios_TurnosModel.Load(turnos.HorarioTurnoDiasTrans.HorarioTurnoTrans.Horario_Secuencia);

                            ViewBag.Turnos = horarioTurnos;
                        }
                    }

                }

            }

            return PartialView("~/Views/Personas_Turnos_Trans/PopUp.cshtml", turnos);
        }

        [HttpPost]
        public override ActionResult EditTurnos(Personas_Turnos_TransModel turnos)
        {
            if (ModelState.IsValid)
            {
                //Campos Auditorias
                turnos.Registro_Fecha = DateTime.Now;
                turnos.Registro_Usuario = User.Identity.Name;
                turnos.Save();

                return new HttpStatusCodeResult(200);
            }
            return new HttpStatusCodeResult(500);
        }

	}
}

