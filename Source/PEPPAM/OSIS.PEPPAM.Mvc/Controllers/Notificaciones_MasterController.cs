//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Creador : Administrator
//    Dominio : OSISPC
//    Pc      : OSISPC
//    Fecha   : 5/4/2014 6:24:25 PM
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using Mvc.Core.Security;
using OSIS.PEPPAM.Mvc.Extensions.ActionResults;
using OSIS.PEPPAM.Mvc.Extensions.Controllers;
using OSIS.PEPPAM.Mvc.Models;
using OSIS.PEPPAM.Mvc.Models.Shared;
using OSIS.PEPPAM.Mvc.UI;

namespace OSIS.PEPPAM.Mvc.Controllers
{
	public partial class Notificaciones_MasterController : Notificaciones_MasterControllerBase
	{
			// Put your controller's initialization logic here


        
	    public override ActionResult Create()
	    {
	        return base.Create();
	    }

	    public ActionResult LoadRutas(string value1)
        {
            var zona = 0;
            var value = value1; //Request.QueryString["filter[filters][0][value]"];
            if (int.TryParse(value, out zona))
            {
                var puestos = Rutas_MasterModel.PageLoadByZonasMaster(0, 1000, zona);

                return Json(puestos.Select(x => new { x.Ruta_Secuencia,x.Ruta_Descripcion }), JsonRequestBehavior.AllowGet);
            }

           return null;
	    }




        public override ActionResult AddNotificacionesObjetivoTrans(int notificacion_Numero)
        {
            var notificaciones_Master = Notificaciones_MasterModel.LoadByEntityKey(notificacion_Numero.ToString());

            var notificaciones_Objetivo_Trans = new Notificaciones_Objetivo_TransModel();

            notificaciones_Objetivo_Trans.Notificacion_Numero = notificaciones_Master.Notificacion_Numero;

            ViewBag.MasterProperty = "Notificaciones_Master_Notificaciones_Objetivo_Trans";

            //relations

            
            var congregacion = Personas_MasterModel.Load(User.UsuarioNumero);

            notificaciones_Objetivo_Trans.Zona_Secuencia = congregacion.Congregacion.Zona_Secuencia;
            
            if (((IPrincipal)User).IsInNivel(SeguridadNivel.EncargadoZona))
            {
                ViewBag.Puestos = Rutas_MasterModel.LoadByZonasMaster(congregacion.Congregacion.Zona);
            }
            else
            {
                var puestoDb = Rutas_MasterModel.Loadencargadoauxiliar(User.UsuarioNumero);
                if (puestoDb != null && puestoDb.Count > 0)
                {
                    ViewBag.Puestos = puestoDb;
                }

            }


            ViewBag.Name = "AddNotificaciones_Objetivo_Trans";
            ViewBag.IsNew = true;
            notificaciones_Objetivo_Trans.Registro_Estado = "A";

            return PartialView("~/Views/Notificaciones_Objetivo_Trans/PopUp.cshtml", notificaciones_Objetivo_Trans);
        }

        [HttpPost]
        public override ActionResult AddNotificacionesObjetivoTrans(Notificaciones_Objetivo_TransModel notificaciones_Objetivo_Trans)
        {
            if (ModelState.IsValid)
            {

                //Campos Auditorias
                notificaciones_Objetivo_Trans.Registro_Fecha = DateTime.Now;
                notificaciones_Objetivo_Trans.Registro_Usuario = User.Identity.Name;

                var result  = notificaciones_Objetivo_Trans.Save();

                if (result)
                {
                    var personasNotificacion =
                        Personas_Notificaciones_TransModel.RegistrarNotificacion(
                            notificaciones_Objetivo_Trans.Notificacion_Numero,
                            User.Identity.Name, notificaciones_Objetivo_Trans.Role_Numero,
                            notificaciones_Objetivo_Trans.Ruta_Secuencia, notificaciones_Objetivo_Trans.Zona_Secuencia);


                }

                return new HttpStatusCodeResult(200);
            }
            return new HttpStatusCodeResult(500);
        }

        public override ActionResult Report()
        {
            var totalCount = 0;
            var allnotificacionesMaster = Notificaciones_MasterModel.LoadAllPaging(this.GetSearchValue(), out totalCount);

            var dateFormat = System.Globalization.CultureInfo.CurrentCulture.TwoLetterISOLanguageName == "en"
                ? "MM/dd/yyyy"
                : "dd/MM/yyyy";
            System.Globalization.DateTimeFormatInfo dtfi =
                System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat;
            dtfi.DateSeparator = "/";
            return new CsvReportResult("Notificaciones_Master",
                allnotificacionesMaster.Select(
                    d =>
                        new
                        {
                            //d.Notificacion_Numero,
                            d.Notificacion_Descripcion,
                            d.Notificacion_Mensaje,
                            Estatus = d.Registro_Estado,
                            Fecha =  d.Registro_Fecha.ToString(dateFormat, dtfi),
                            Usuario = d.Registro_Usuario,
                            Prioridad = d.NotificacionesPrioridadesCata != null ? d.NotificacionesPrioridadesCata.EntityDisplayName : string.Empty
                        }));
        }


        //Columna por las cuales estan relacionadas
        public override ActionResult EditNotificacionesObjetivoTrans(int notificacion_Numero_parent, string entityKey_child)
        {
            var notificaciones_Objetivo_Trans = Notificaciones_Objetivo_TransModel.LoadByEntityKey(entityKey_child.ToString());

            ViewBag.MasterProperty = "Notificaciones_Master_Notificaciones_Objetivo_Trans";
            ViewBag.Name = "EditNotificaciones_Objetivo_Trans";
            ViewBag.IsNew = false;

            return PartialView("~/Views/Notificaciones_Objetivo_Trans/PopUp.cshtml", notificaciones_Objetivo_Trans);
        }

        [HttpPost]
        public override ActionResult EditNotificacionesObjetivoTrans(Notificaciones_Objetivo_TransModel notificaciones_Objetivo_Trans)
        {
            if (ModelState.IsValid)
            {
                //Campos Auditorias
                notificaciones_Objetivo_Trans.Registro_Fecha = DateTime.Now;
                notificaciones_Objetivo_Trans.Registro_Usuario = User.Identity.Name;
                var result = notificaciones_Objetivo_Trans.Save();

                if (result)
                {
                    var personasNotificacion =
                        Personas_Notificaciones_TransModel.ActualizarNotificacion(
                            notificaciones_Objetivo_Trans.Notificacion_Numero,notificaciones_Objetivo_Trans.Registro_Estado,
                            User.Identity.Name, notificaciones_Objetivo_Trans.Role_Numero,
                            notificaciones_Objetivo_Trans.Ruta_Secuencia, notificaciones_Objetivo_Trans.Zona_Secuencia);


                }

                return new HttpStatusCodeResult(200);
            }
            return new HttpStatusCodeResult(500);
        }

	    [HttpPost]
	    public override ActionResult DeleteNotificacionesObjetivoTrans(int notificacion_Numero_parent,
	        string entityKey_child)
	    {
	        var notificaciones_Objetivo_Trans =
	            Notificaciones_Objetivo_TransModel.LoadByEntityKey(entityKey_child.ToString());

	        if (notificaciones_Objetivo_Trans != null)
	        {
	            var personasNotificacion =
	                Personas_Notificaciones_TransModel.ActualizarNotificacion(
	                    notificaciones_Objetivo_Trans.Notificacion_Numero, "I",
	                    User.Identity.Name, notificaciones_Objetivo_Trans.Role_Numero,
	                    notificaciones_Objetivo_Trans.Ruta_Secuencia, notificaciones_Objetivo_Trans.Zona_Secuencia);

	        

	        if (notificaciones_Objetivo_Trans.Delete())
	        {
                
	            return
	                Json(
	                    new
	                    {
	                        cssMainClass = "success",
	                        title = Messages.GetOrSetMensaje("MENSAJE_OPERACION_REALIZDA_SASTIFACTORIAMENTE_HEADER"),
	                        body = Messages.GetOrSetMensaje("MENSAJE_NOTIFICACION_REGISTRO_BORRADO")
	                    },
	                    JsonRequestBehavior.AllowGet);
	        }
	        
	    }

            return
                   Json(
                       new
                       {
                           cssMainClass = "warning",
                           title = Messages.GetOrSetMensaje("MENSAJE_PRECAUSION_HEADER"),
                           body = Messages.GetOrSetMensaje("MENSAJE_NOTIFICACION_REGISTRO_NO_BORRADO")
                       },
                       JsonRequestBehavior.AllowGet);
	}


        
        public override ActionResult LoadPersonasNotificacionesTrans(GridRequestViewModel gridRequest, int notificacion_Numero)
        {
            var personas_Notificaciones_Trans = Notificaciones_MasterModel.LoadByEntityKey(notificacion_Numero.ToString());

            int count = personas_Notificaciones_Trans.PersonasNotificacionesTrans.Count;

            var dateFormat = System.Globalization.CultureInfo.CurrentCulture.TwoLetterISOLanguageName == "en" ? "MM/dd/yyyy" : "dd/MM/yyyy";
            System.Globalization.DateTimeFormatInfo dtfi = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat;
            dtfi.DateSeparator = "/";

            return Json(new
            {
                iTotalDisplayRecords = count,
                iTotalRecords = count,
                sEcho = gridRequest.GridCustomData,
                aaData = personas_Notificaciones_Trans.PersonasNotificacionesTrans.Skip(gridRequest.RowStartIndex)
                                .Take(gridRequest.RowCount)
                                .Select(d => new
                                {
                                    d.EntityKey,
                                    d.Notificacion_Vista,
                                    Notificacion_Vista_Fecha =  d.Notificacion_Vista_Fecha.Year < 2010 ? "" :   d.Notificacion_Vista_Fecha.ToString(dateFormat, dtfi),
                                    d.Registro_Estado,
                                    Registro_Fecha = d.Registro_Fecha.ToString(dateFormat, dtfi),
                                    d.Registro_Usuario,
                                    Persona_Secuencia = d.Personas != null ? d.Personas.Persona_Nombres + " " + d.Personas.Persona_Apellidos : string.Empty,
                                    Notificacion_Numero = d.Notificaciones != null ? d.Notificaciones.EntityDisplayName : string.Empty
                                })
            });

        }



       

	}
}

