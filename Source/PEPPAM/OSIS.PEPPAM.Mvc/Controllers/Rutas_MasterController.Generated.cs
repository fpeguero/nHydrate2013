//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Creador : Administrator
//    Dominio : OSISPC
//    Pc      : OSISPC
//    Fecha   : 6/19/2014 1:29:11 PM
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System; 
using System.Collections.Generic; 
using System.Linq; 
using System.Web.Mvc; 
using System.Web; 
using System.Web.UI; 
using CodeFluent.Runtime; 
using OSIS.PEPPAM.Mvc.Models; 
using OSIS.PEPPAM.Mvc.Extensions.Controllers; 
using OSIS.PEPPAM.Mvc.Models.Shared; 
using OSIS.PEPPAM.Mvc.Extensions.ActionResults; 
using OSIS.PEPPAM.Mvc.Extensions.Controllers; 
using OSIS.PEPPAM.Mvc.Extensions.Helpers; 
using OSIS.PEPPAM.Mvc.Models.Shared; 
using OSIS.PEPPAM.Mvc.Models; 
using OSIS.PEPPAM.Mvc.UI; 
 
namespace OSIS.PEPPAM.Mvc.Controllers 
{ 
    public partial class Rutas_MasterController : Rutas_MasterControllerBase 
    { 

    } 
 
	public partial class Rutas_MasterControllerBase : BaseController 
	{ 
		#region Members 
 

 
        #endregion 
 
        #region Constructors 
 

 
        #endregion 
 
		#region Index 
 

public virtual ActionResult Index()
{
    var model = new Rutas_MasterModel();

    ViewBag.PageIndex = this.GetPageIndex();
    ViewBag.PageSize = this.GetPageSize();
    ViewBag.SearchValue = this.GetSearchValue();

    return View(model);
}


[HttpPost]
public virtual ActionResult Load(GridRequestViewModel gridRequest)
{
    OrderByArgumentCollection orderByArguments = new OrderByArgumentCollection();
    orderByArguments.Add("[" + gridRequest.SortColumnName + "]", gridRequest.SortDirection);

    PageOptions pageOptions = new PageOptions();
    pageOptions.OrderByArguments = orderByArguments;

    var totalCount = 0;

    var allrutasMaster = Rutas_MasterModel.PageLoadAllPaging(1 + gridRequest.RowStartIndex/gridRequest.RowCount,
        gridRequest.RowCount, gridRequest.Search, pageOptions, out totalCount);

    var displayRecords = allrutasMaster.Count;
    var totalRecords = totalCount;

    var dateFormat = System.Globalization.CultureInfo.CurrentCulture.TwoLetterISOLanguageName == "en"
        ? "MM/dd/yyyy"
        : "dd/MM/yyyy";
    System.Globalization.DateTimeFormatInfo dtfi =
        System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat;
    dtfi.DateSeparator = "/";

    return Json(new
    {
        iTotalDisplayRecords = displayRecords,
        iTotalRecords = totalRecords,
        sEcho = gridRequest.GridCustomData,
        aaData =
            allrutasMaster.Select(
                d =>
                    new
                    {
d.Ruta_Secuencia,d.Ruta_Descripcion,d.Ruta_Mapa_Url,d.Ruta_Carros_Cantidad,d.Ruta_Publicadores_Cantidad,d.Registro_Estado,Registro_Fecha = d.Registro_Fecha.ToString(dateFormat, dtfi),d.Registro_Usuario,Zona_Secuencia = d.ZonasMaster != null ? d.ZonasMaster.EntityDisplayName : string.Empty,Ruta_Persona_Auxiliar = d.PersonasMasterRutaPersonaAuxiliar != null ? d.PersonasMasterRutaPersonaAuxiliar.EntityDisplayName : string.Empty,Ruta_Persona_Encargado = d.PersonasMaster != null ? d.PersonasMaster.EntityDisplayName : string.Empty
                    })
    });

}

public virtual ActionResult Report()
{
    var totalCount = 0;
    var allrutasMaster = Rutas_MasterModel.LoadAllPaging(this.GetSearchValue(), out totalCount);

    var dateFormat = System.Globalization.CultureInfo.CurrentCulture.TwoLetterISOLanguageName == "en"
        ? "MM/dd/yyyy"
        : "dd/MM/yyyy";
    System.Globalization.DateTimeFormatInfo dtfi =
        System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat;
    dtfi.DateSeparator = "/";
    return new CsvReportResult("Rutas_Master",
        allrutasMaster.Select(
            d =>
                new
                {
d.Ruta_Secuencia,d.Ruta_Descripcion,d.Ruta_Mapa_Url,d.Ruta_Carros_Cantidad,d.Ruta_Publicadores_Cantidad,d.Registro_Estado,Registro_Fecha = d.Registro_Fecha.ToString(dateFormat, dtfi),d.Registro_Usuario,Zona_Secuencia = d.ZonasMaster != null ? d.ZonasMaster.EntityDisplayName : string.Empty,Ruta_Persona_Auxiliar = d.PersonasMasterRutaPersonaAuxiliar != null ? d.PersonasMasterRutaPersonaAuxiliar.EntityDisplayName : string.Empty,Ruta_Persona_Encargado = d.PersonasMaster != null ? d.PersonasMaster.EntityDisplayName : string.Empty
                }));
}


[HttpPost]
public virtual ActionResult Delete( string entityKey)

{
    try
    {
        var deleteModel  = Rutas_MasterModel.LoadByEntityKey(entityKey);
       if (deleteModel.Delete())
       {
          return Json(new { cssMainClass = "success", title = Messages.GetOrSetMensaje("MENSAJE_OPERACION_REALIZDA_SASTIFACTORIAMENTE_HEADER"), body = Messages.GetOrSetMensaje("MENSAJE_NOTIFICACION_REGISTRO_BORRADO") }, JsonRequestBehavior.AllowGet);
       }
       else
       {
          return Json(new { cssMainClass = "warning", title = Messages.GetOrSetMensaje("MENSAJE_PRECAUSION_HEADER"), body = Messages.GetOrSetMensaje("MENSAJE_NOTIFICACION_REGISTRO_NO_BORRADO") }, JsonRequestBehavior.AllowGet);
       }
    }
    catch (Exception ex)
    {
          return Json(new { cssMainClass = "success", title = Messages.GetOrSetMensaje("MENSAJE_PRECAUSION_HEADER"), body = Messages.GetOrSetMensaje("MENSAJE_NOTIFICACION_REGISTRO_BORRADO") }, JsonRequestBehavior.AllowGet);
    }
    return Content(string.Empty);
}
		 
 
		#endregion 
 
		#region Create 
 

		// ******************************************* 
        // URL: /Rutas_Master/Create 
        // ******************************************* 

public virtual ActionResult Create()
{
    var rutasMaster = new Rutas_MasterModel();
    ViewBag.IsNew = true;
    rutasMaster.Registro_Estado = "A";

    return View(rutasMaster);
}

//
// POST: /Usuarios/Create
[HttpPost]
public virtual ActionResult Create(Rutas_MasterModel rutasMaster)
{
    if (ModelState.IsValid)
    {

        //Campos Auditorias
        rutasMaster.Registro_Fecha = DateTime.Now;
        rutasMaster.Registro_Usuario = User.Identity.Name;
                
        var result = rutasMaster.Save();

        if (result)
        {
            return RedirectToAction("Edit", new { 
ruta_Secuencia = rutasMaster.Ruta_Secuencia});
        }

    }

    ViewBag.IsNew = true;
    return View(rutasMaster);
            
}

		 
 
		#endregion 
 
		#region Edit 
 

		// ******************************************* 
        // URL: /Rutas_Master/Edit/id 
        // ******************************************* 

public virtual ActionResult Edit(int ruta_Secuencia)
{

    var rutasMaster = Rutas_MasterModel.LoadByEntityKey(ruta_Secuencia.ToString());

    ViewBag.IsNew = false;
            
    return View(rutasMaster);
}

[HttpPost]
public virtual ActionResult Edit(Rutas_MasterModel rutasMaster)
{
           
        if (ModelState.IsValid)
        {
        //Campos Auditorias
        rutasMaster.Registro_Fecha = DateTime.Now;
        rutasMaster.Registro_Usuario = User.Identity.Name;
                

            var result = rutasMaster.Save();

            if (result)
            {
                return RedirectToAction("Index");
            }
        }

        ViewBag.IsNew = false;
        return View(rutasMaster);
}

public virtual ActionResult LoadDocumentosObjetivosTrans(GridRequestViewModel gridRequest,int ruta_Secuencia){
    var documentos_Objetivos_Trans = Rutas_MasterModel.LoadByEntityKey(ruta_Secuencia.ToString());

    int count = documentos_Objetivos_Trans.DocumentosObjetivosTrans.Count;

    var dateFormat = System.Globalization.CultureInfo.CurrentCulture.TwoLetterISOLanguageName == "en" ? "MM/dd/yyyy" : "dd/MM/yyyy";
    System.Globalization.DateTimeFormatInfo dtfi = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat;
    dtfi.DateSeparator = "/";

    return Json(new
    {
        iTotalDisplayRecords = count,
        iTotalRecords = count,
        sEcho = gridRequest.GridCustomData,
        aaData = documentos_Objetivos_Trans.DocumentosObjetivosTrans.Skip(gridRequest.RowStartIndex)
                        .Take(gridRequest.RowCount)
                        .Select(d => new { 
d.EntityKey,d.Registro_Estado,Registro_Fecha = d.Registro_Fecha.ToString(dateFormat, dtfi),d.Registro_Usuario,Zona_Secuencia = d.ZonasMaster != null ? d.ZonasMaster.EntityDisplayName : string.Empty,Ruta_Secuencia = d.RutasMaster != null ? d.RutasMaster.EntityDisplayName : string.Empty,Role_Numero = d.RolesCata != null ? d.RolesCata.EntityDisplayName : string.Empty,Documento_Secuencia = d.DocumentosMaster != null ? d.DocumentosMaster.EntityDisplayName : string.Empty
    })
 });

}

public virtual ActionResult AddDocumentosObjetivosTrans(int ruta_Secuencia){
    var rutas_Master = Rutas_MasterModel.LoadByEntityKey(ruta_Secuencia.ToString());

    var documentos_Objetivos_Trans = new Documentos_Objetivos_TransModel();

 documentos_Objetivos_Trans.Ruta_Secuencia =rutas_Master.Ruta_Secuencia;            

    ViewBag.MasterProperty = "Rutas_Master_Documentos_Objetivos_Trans";

    //relations

    ViewBag.Name = "AddDocumentos_Objetivos_Trans";
    ViewBag.IsNew = true;
    documentos_Objetivos_Trans.Registro_Estado = "A";

    return PartialView("~/Views/Documentos_Objetivos_Trans/PopUp.cshtml", documentos_Objetivos_Trans);
}

[HttpPost]
public virtual ActionResult AddDocumentosObjetivosTrans(Documentos_Objetivos_TransModel documentos_Objetivos_Trans)
{
    if (ModelState.IsValid)
    {

        //Campos Auditorias
        documentos_Objetivos_Trans.Registro_Fecha = DateTime.Now;
        documentos_Objetivos_Trans.Registro_Usuario = User.Identity.Name;

        documentos_Objetivos_Trans.Save();
                
        return new HttpStatusCodeResult(200);
    }
    return new HttpStatusCodeResult(500);
}

//Columna por las cuales estan relacionadas
public virtual ActionResult EditDocumentosObjetivosTrans(int ruta_Secuencia_parent, string entityKey_child )
{
    var documentos_Objetivos_Trans =  Documentos_Objetivos_TransModel.LoadByEntityKey(entityKey_child.ToString());
            
    ViewBag.MasterProperty = "Rutas_Master_Documentos_Objetivos_Trans";
    ViewBag.Name = "EditDocumentos_Objetivos_Trans";
    ViewBag.IsNew = false;

    return PartialView("~/Views/Documentos_Objetivos_Trans/PopUp.cshtml", documentos_Objetivos_Trans);
}

[HttpPost]
public virtual ActionResult EditDocumentosObjetivosTrans(Documentos_Objetivos_TransModel documentos_Objetivos_Trans)
{
    if (ModelState.IsValid)
    {
        //Campos Auditorias
        documentos_Objetivos_Trans.Registro_Fecha = DateTime.Now;
        documentos_Objetivos_Trans.Registro_Usuario = User.Identity.Name;
        documentos_Objetivos_Trans.Save();

        return new HttpStatusCodeResult(200);
    }
    return new HttpStatusCodeResult(500);
}

[HttpPost]
public virtual ActionResult DeleteDocumentosObjetivosTrans(int ruta_Secuencia_parent, string entityKey_child ){
    var documentos_Objetivos_Trans = Documentos_Objetivos_TransModel.LoadByEntityKey(entityKey_child.ToString());
       if (documentos_Objetivos_Trans.Delete())
       {
          return Json(new { cssMainClass = "success", title = Messages.GetOrSetMensaje("MENSAJE_OPERACION_REALIZDA_SASTIFACTORIAMENTE_HEADER"), body = Messages.GetOrSetMensaje("MENSAJE_NOTIFICACION_REGISTRO_BORRADO") }, JsonRequestBehavior.AllowGet);
       }
       else
       {
          return Json(new { cssMainClass = "warning", title = Messages.GetOrSetMensaje("MENSAJE_PRECAUSION_HEADER"), body = Messages.GetOrSetMensaje("MENSAJE_NOTIFICACION_REGISTRO_NO_BORRADO") }, JsonRequestBehavior.AllowGet);
       }

}

public virtual ActionResult ReportDocumentosObjetivosTrans(int ruta_Secuencia){
    var documentos_Objetivos_Trans = Rutas_MasterModel.LoadByEntityKey(ruta_Secuencia.ToString());            
    return new CsvReportResult("Documentos_Objetivos_Trans", documentos_Objetivos_Trans.DocumentosObjetivosTrans);
}

public virtual ActionResult LoadNotificacionesObjetivoTrans(GridRequestViewModel gridRequest,int ruta_Secuencia){
    var notificaciones_Objetivo_Trans = Rutas_MasterModel.LoadByEntityKey(ruta_Secuencia.ToString());

    int count = notificaciones_Objetivo_Trans.NotificacionesObjetivoTrans.Count;

    var dateFormat = System.Globalization.CultureInfo.CurrentCulture.TwoLetterISOLanguageName == "en" ? "MM/dd/yyyy" : "dd/MM/yyyy";
    System.Globalization.DateTimeFormatInfo dtfi = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat;
    dtfi.DateSeparator = "/";

    return Json(new
    {
        iTotalDisplayRecords = count,
        iTotalRecords = count,
        sEcho = gridRequest.GridCustomData,
        aaData = notificaciones_Objetivo_Trans.NotificacionesObjetivoTrans.Skip(gridRequest.RowStartIndex)
                        .Take(gridRequest.RowCount)
                        .Select(d => new { 
d.EntityKey,d.Registro_Estado,Registro_Fecha = d.Registro_Fecha.ToString(dateFormat, dtfi),d.Registro_Usuario,Zona_Secuencia = d.ZonasMaster != null ? d.ZonasMaster.EntityDisplayName : string.Empty,Ruta_Secuencia = d.RutasMaster != null ? d.RutasMaster.EntityDisplayName : string.Empty,Role_Numero = d.RolesCata != null ? d.RolesCata.EntityDisplayName : string.Empty,Notificacion_Numero = d.NotificacionesMaster != null ? d.NotificacionesMaster.EntityDisplayName : string.Empty
    })
 });

}

public virtual ActionResult AddNotificacionesObjetivoTrans(int ruta_Secuencia){
    var rutas_Master = Rutas_MasterModel.LoadByEntityKey(ruta_Secuencia.ToString());

    var notificaciones_Objetivo_Trans = new Notificaciones_Objetivo_TransModel();

 notificaciones_Objetivo_Trans.Ruta_Secuencia =rutas_Master.Ruta_Secuencia;            

    ViewBag.MasterProperty = "Rutas_Master_Notificaciones_Objetivo_Trans";

    //relations

    ViewBag.Name = "AddNotificaciones_Objetivo_Trans";
    ViewBag.IsNew = true;
    notificaciones_Objetivo_Trans.Registro_Estado = "A";

    return PartialView("~/Views/Notificaciones_Objetivo_Trans/PopUp.cshtml", notificaciones_Objetivo_Trans);
}

[HttpPost]
public virtual ActionResult AddNotificacionesObjetivoTrans(Notificaciones_Objetivo_TransModel notificaciones_Objetivo_Trans)
{
    if (ModelState.IsValid)
    {

        //Campos Auditorias
        notificaciones_Objetivo_Trans.Registro_Fecha = DateTime.Now;
        notificaciones_Objetivo_Trans.Registro_Usuario = User.Identity.Name;

        notificaciones_Objetivo_Trans.Save();
                
        return new HttpStatusCodeResult(200);
    }
    return new HttpStatusCodeResult(500);
}

//Columna por las cuales estan relacionadas
public virtual ActionResult EditNotificacionesObjetivoTrans(int ruta_Secuencia_parent, string entityKey_child )
{
    var notificaciones_Objetivo_Trans =  Notificaciones_Objetivo_TransModel.LoadByEntityKey(entityKey_child.ToString());
            
    ViewBag.MasterProperty = "Rutas_Master_Notificaciones_Objetivo_Trans";
    ViewBag.Name = "EditNotificaciones_Objetivo_Trans";
    ViewBag.IsNew = false;

    return PartialView("~/Views/Notificaciones_Objetivo_Trans/PopUp.cshtml", notificaciones_Objetivo_Trans);
}

[HttpPost]
public virtual ActionResult EditNotificacionesObjetivoTrans(Notificaciones_Objetivo_TransModel notificaciones_Objetivo_Trans)
{
    if (ModelState.IsValid)
    {
        //Campos Auditorias
        notificaciones_Objetivo_Trans.Registro_Fecha = DateTime.Now;
        notificaciones_Objetivo_Trans.Registro_Usuario = User.Identity.Name;
        notificaciones_Objetivo_Trans.Save();

        return new HttpStatusCodeResult(200);
    }
    return new HttpStatusCodeResult(500);
}

[HttpPost]
public virtual ActionResult DeleteNotificacionesObjetivoTrans(int ruta_Secuencia_parent, string entityKey_child ){
    var notificaciones_Objetivo_Trans = Notificaciones_Objetivo_TransModel.LoadByEntityKey(entityKey_child.ToString());
       if (notificaciones_Objetivo_Trans.Delete())
       {
          return Json(new { cssMainClass = "success", title = Messages.GetOrSetMensaje("MENSAJE_OPERACION_REALIZDA_SASTIFACTORIAMENTE_HEADER"), body = Messages.GetOrSetMensaje("MENSAJE_NOTIFICACION_REGISTRO_BORRADO") }, JsonRequestBehavior.AllowGet);
       }
       else
       {
          return Json(new { cssMainClass = "warning", title = Messages.GetOrSetMensaje("MENSAJE_PRECAUSION_HEADER"), body = Messages.GetOrSetMensaje("MENSAJE_NOTIFICACION_REGISTRO_NO_BORRADO") }, JsonRequestBehavior.AllowGet);
       }

}

public virtual ActionResult ReportNotificacionesObjetivoTrans(int ruta_Secuencia){
    var notificaciones_Objetivo_Trans = Rutas_MasterModel.LoadByEntityKey(ruta_Secuencia.ToString());            
    return new CsvReportResult("Notificaciones_Objetivo_Trans", notificaciones_Objetivo_Trans.NotificacionesObjetivoTrans);
}

public virtual ActionResult LoadHorarioTrans(GridRequestViewModel gridRequest,int ruta_Secuencia){
    var horario_Trans = Rutas_MasterModel.LoadByEntityKey(ruta_Secuencia.ToString());

    int count = horario_Trans.HorarioTrans.Count;

    var dateFormat = System.Globalization.CultureInfo.CurrentCulture.TwoLetterISOLanguageName == "en" ? "MM/dd/yyyy" : "dd/MM/yyyy";
    System.Globalization.DateTimeFormatInfo dtfi = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat;
    dtfi.DateSeparator = "/";

    return Json(new
    {
        iTotalDisplayRecords = count,
        iTotalRecords = count,
        sEcho = gridRequest.GridCustomData,
        aaData = horario_Trans.HorarioTrans.Skip(gridRequest.RowStartIndex)
                        .Take(gridRequest.RowCount)
                        .Select(d => new { 
d.Horario_Secuencia,Horario_Fecha_Desde = d.Horario_Fecha_Desde.ToString(dateFormat, dtfi),Horario_Fecha_Hasta = d.Horario_Fecha_Hasta.ToString(dateFormat, dtfi),d.Horario_Publicar,d.Registro_Estado,Registro_Fecha = d.Registro_Fecha.ToString(dateFormat, dtfi),d.Registro_Usuario,Semana_Codigo = d.HorarioSemanasCata != null ? d.HorarioSemanasCata.EntityDisplayName : string.Empty,Ruta_Secuencia = d.RutasMaster != null ? d.RutasMaster.EntityDisplayName : string.Empty,Horario_Numero = d.HorariosMaster != null ? d.HorariosMaster.EntityDisplayName : string.Empty
    })
 });

}

public virtual ActionResult AddHorarioTrans(int ruta_Secuencia){
    var rutas_Master = Rutas_MasterModel.LoadByEntityKey(ruta_Secuencia.ToString());

    var horario_Trans = new Horario_TransModel();

 horario_Trans.Ruta_Secuencia =rutas_Master.Ruta_Secuencia;            

    ViewBag.MasterProperty = "Rutas_Master_Horario_Trans";

    //relations

    ViewBag.Name = "AddHorario_Trans";
    ViewBag.IsNew = true;
    horario_Trans.Registro_Estado = "A";

    return PartialView("~/Views/Horario_Trans/PopUp.cshtml", horario_Trans);
}

[HttpPost]
public virtual ActionResult AddHorarioTrans(Horario_TransModel horario_Trans)
{
    if (ModelState.IsValid)
    {

        //Campos Auditorias
        horario_Trans.Registro_Fecha = DateTime.Now;
        horario_Trans.Registro_Usuario = User.Identity.Name;

        horario_Trans.Save();
                
        return new HttpStatusCodeResult(200);
    }
    return new HttpStatusCodeResult(500);
}

//Columna por las cuales estan relacionadas
public virtual ActionResult EditHorarioTrans(int ruta_Secuencia_parent, int horario_Secuencia_child )
{
    var horario_Trans =  Horario_TransModel.LoadByEntityKey(horario_Secuencia_child.ToString());
            
    ViewBag.MasterProperty = "Rutas_Master_Horario_Trans";
    ViewBag.Name = "EditHorario_Trans";
    ViewBag.IsNew = false;

    return PartialView("~/Views/Horario_Trans/PopUp.cshtml", horario_Trans);
}

[HttpPost]
public virtual ActionResult EditHorarioTrans(Horario_TransModel horario_Trans)
{
    if (ModelState.IsValid)
    {
        //Campos Auditorias
        horario_Trans.Registro_Fecha = DateTime.Now;
        horario_Trans.Registro_Usuario = User.Identity.Name;
        horario_Trans.Save();

        return new HttpStatusCodeResult(200);
    }
    return new HttpStatusCodeResult(500);
}

[HttpPost]
public virtual ActionResult DeleteHorarioTrans(int ruta_Secuencia_parent, int horario_Secuencia_child ){
    var horario_Trans = Horario_TransModel.LoadByEntityKey(horario_Secuencia_child.ToString());
       if (horario_Trans.Delete())
       {
          return Json(new { cssMainClass = "success", title = Messages.GetOrSetMensaje("MENSAJE_OPERACION_REALIZDA_SASTIFACTORIAMENTE_HEADER"), body = Messages.GetOrSetMensaje("MENSAJE_NOTIFICACION_REGISTRO_BORRADO") }, JsonRequestBehavior.AllowGet);
       }
       else
       {
          return Json(new { cssMainClass = "warning", title = Messages.GetOrSetMensaje("MENSAJE_PRECAUSION_HEADER"), body = Messages.GetOrSetMensaje("MENSAJE_NOTIFICACION_REGISTRO_NO_BORRADO") }, JsonRequestBehavior.AllowGet);
       }

}

public virtual ActionResult ReportHorarioTrans(int ruta_Secuencia){
    var horario_Trans = Rutas_MasterModel.LoadByEntityKey(ruta_Secuencia.ToString());            
    return new CsvReportResult("Horario_Trans", horario_Trans.HorarioTrans);
}

public virtual ActionResult LoadHorariosMaster(GridRequestViewModel gridRequest,int ruta_Secuencia){
    var horarios_Master = Rutas_MasterModel.LoadByEntityKey(ruta_Secuencia.ToString());

    int count = horarios_Master.HorariosMaster.Count;

    var dateFormat = System.Globalization.CultureInfo.CurrentCulture.TwoLetterISOLanguageName == "en" ? "MM/dd/yyyy" : "dd/MM/yyyy";
    System.Globalization.DateTimeFormatInfo dtfi = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat;
    dtfi.DateSeparator = "/";

    return Json(new
    {
        iTotalDisplayRecords = count,
        iTotalRecords = count,
        sEcho = gridRequest.GridCustomData,
        aaData = horarios_Master.HorariosMaster.Skip(gridRequest.RowStartIndex)
                        .Take(gridRequest.RowCount)
                        .Select(d => new { 
d.Horario_Numero,d.Horario_Descripcion,d.Horario_Cantidad_Dias,d.Horario_Turnos_Cantidad,d.Registro_Estado,Registro_Fecha = d.Registro_Fecha.ToString(dateFormat, dtfi),d.Registro_Usuario,Ruta_Secuencia = d.RutasMaster != null ? d.RutasMaster.EntityDisplayName : string.Empty
    })
 });

}

public virtual ActionResult AddHorariosMaster(int ruta_Secuencia){
    var rutas_Master = Rutas_MasterModel.LoadByEntityKey(ruta_Secuencia.ToString());

    var horarios_Master = new Horarios_MasterModel();

 horarios_Master.Ruta_Secuencia =rutas_Master.Ruta_Secuencia;            

    ViewBag.MasterProperty = "Rutas_Master_Horarios_Master";

    //relations

    ViewBag.Name = "AddHorarios_Master";
    ViewBag.IsNew = true;
    horarios_Master.Registro_Estado = "A";

    return PartialView("~/Views/Horarios_Master/PopUp.cshtml", horarios_Master);
}

[HttpPost]
public virtual ActionResult AddHorariosMaster(Horarios_MasterModel horarios_Master)
{
    if (ModelState.IsValid)
    {

        //Campos Auditorias
        horarios_Master.Registro_Fecha = DateTime.Now;
        horarios_Master.Registro_Usuario = User.Identity.Name;

        horarios_Master.Save();
                
        return new HttpStatusCodeResult(200);
    }
    return new HttpStatusCodeResult(500);
}

//Columna por las cuales estan relacionadas
public virtual ActionResult EditHorariosMaster(int ruta_Secuencia_parent, int horario_Numero_child )
{
    var horarios_Master =  Horarios_MasterModel.LoadByEntityKey(horario_Numero_child.ToString());
            
    ViewBag.MasterProperty = "Rutas_Master_Horarios_Master";
    ViewBag.Name = "EditHorarios_Master";
    ViewBag.IsNew = false;

    return PartialView("~/Views/Horarios_Master/PopUp.cshtml", horarios_Master);
}

[HttpPost]
public virtual ActionResult EditHorariosMaster(Horarios_MasterModel horarios_Master)
{
    if (ModelState.IsValid)
    {
        //Campos Auditorias
        horarios_Master.Registro_Fecha = DateTime.Now;
        horarios_Master.Registro_Usuario = User.Identity.Name;
        horarios_Master.Save();

        return new HttpStatusCodeResult(200);
    }
    return new HttpStatusCodeResult(500);
}

[HttpPost]
public virtual ActionResult DeleteHorariosMaster(int ruta_Secuencia_parent, int horario_Numero_child ){
    var horarios_Master = Horarios_MasterModel.LoadByEntityKey(horario_Numero_child.ToString());
       if (horarios_Master.Delete())
       {
          return Json(new { cssMainClass = "success", title = Messages.GetOrSetMensaje("MENSAJE_OPERACION_REALIZDA_SASTIFACTORIAMENTE_HEADER"), body = Messages.GetOrSetMensaje("MENSAJE_NOTIFICACION_REGISTRO_BORRADO") }, JsonRequestBehavior.AllowGet);
       }
       else
       {
          return Json(new { cssMainClass = "warning", title = Messages.GetOrSetMensaje("MENSAJE_PRECAUSION_HEADER"), body = Messages.GetOrSetMensaje("MENSAJE_NOTIFICACION_REGISTRO_NO_BORRADO") }, JsonRequestBehavior.AllowGet);
       }

}

public virtual ActionResult ReportHorariosMaster(int ruta_Secuencia){
    var horarios_Master = Rutas_MasterModel.LoadByEntityKey(ruta_Secuencia.ToString());            
    return new CsvReportResult("Horarios_Master", horarios_Master.HorariosMaster);
}

		 
 
		#endregion 
 
		#region Details 
 

		 
 
		#endregion 

	} 
} 


