<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        QmCC
</value>
  </data>
</root>