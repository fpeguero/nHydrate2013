//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 0168
using System;
using System.Linq;
using System.Collections;
using System.Data.SqlClient;
using System.Data;
using System.Text;
using System.Runtime.InteropServices;
using System.Reflection;
using System.IO;
using System.Collections.Generic;
using System.Globalization;
using MySql.Data.MySqlClient;

namespace PROJECTNAMESPACE
{
	internal class SqlServers
	{
		#region database discovery
		[DllImport("odbc32.dll")]
		private static extern short SQLAllocHandle(short hType, IntPtr inputHandle, out IntPtr outputHandle);
		[DllImport("odbc32.dll")]
		private static extern short SQLSetEnvAttr(IntPtr henv, int attribute, IntPtr valuePtr, int strLength);
		[DllImport("odbc32.dll")]
		private static extern short SQLFreeHandle(short hType, IntPtr handle);
		[DllImport("odbc32.dll", CharSet = CharSet.Ansi)]
		private static extern short SQLBrowseConnect(IntPtr hconn, StringBuilder inString,
			short inStringLength, StringBuilder outString, short outStringLength,
			out short outLengthNeeded);

		private const short SQL_HANDLE_ENV = 1;
		private const short SQL_HANDLE_DBC = 2;
		private const int SQL_ATTR_ODBC_VERSION = 200;
		private const int SQL_OV_ODBC3 = 3;
		private const short SQL_SUCCESS = 0;

		private const short SQL_NEED_DATA = 99;
		private const short DEFAULT_RESULT_SIZE = 1024;
		private const string SQL_DRIVER_STR = "DRIVER=SQL SERVER";

		private SqlServers()
		{
		}

		internal static string[] GetServers()
		{
			string[] retval = null;

			var txt = string.Empty;
			var henv = IntPtr.Zero;
			var hconn = IntPtr.Zero;
			var inString = new StringBuilder(SQL_DRIVER_STR);
			var outString = new StringBuilder(DEFAULT_RESULT_SIZE);
			var inStringLength = (short)inString.Length;
			var lenNeeded = (short)0;

			try
			{
				if (SQL_SUCCESS == SQLAllocHandle(SQL_HANDLE_ENV, henv, out henv))
				{
					if (SQL_SUCCESS == SQLSetEnvAttr(henv, SQL_ATTR_ODBC_VERSION, (IntPtr)SQL_OV_ODBC3, 0))
					{
						if (SQL_SUCCESS == SQLAllocHandle(SQL_HANDLE_DBC, henv, out hconn))
						{
							if (SQL_NEED_DATA == SQLBrowseConnect(hconn, inString, inStringLength, outString,
								DEFAULT_RESULT_SIZE, out lenNeeded))
							{
								if (DEFAULT_RESULT_SIZE < lenNeeded)
								{
									outString.Capacity = lenNeeded;
									if (SQL_NEED_DATA != SQLBrowseConnect(hconn, inString, inStringLength, outString,
										lenNeeded, out lenNeeded))
									{
										throw new ApplicationException("Unabled to aquire SQL Servers from ODBC driver.");
									}
								}
								txt = outString.ToString();
								int start = txt.IndexOf("{") + 1;
								int len = txt.IndexOf("}") - start;
								if ((start > 0) && (len > 0))
								{
									txt = txt.Substring(start, len);
								}
								else
								{
									txt = string.Empty;
								}
							}
						}
					}
				}
			}
			catch (Exception ex)
			{
				throw ex;
			}
			finally
			{
				if (hconn != IntPtr.Zero)
				{
					SQLFreeHandle(SQL_HANDLE_DBC, hconn);
				}
				if (henv != IntPtr.Zero)
				{
					SQLFreeHandle(SQL_HANDLE_ENV, hconn);
				}
			}

			if (txt.Length > 0)
			{
				retval = txt.Split(",".ToCharArray());
			}
			return retval;
		}

		internal static bool TestConnectionString(string connectString)
		{
			bool valid = false;
			var conn = new MySql.Data.MySqlClient.MySqlConnection();
			try
			{
				conn.ConnectionString = connectString;
				conn.Open();
				valid = true;
			}
			catch (Exception ex)
			{
				System.Diagnostics.Debug.WriteLine(ex.ToString());
				valid = false;
			}
			finally
			{
				conn.Close();
			}
			return valid;
		}

		internal static List<HistoryItem> GetHistory(string connectionString)
		{
			var retval = new List<HistoryItem>();
			var settings = new nHydrateSetting();

			if (settings.History.Count == 0)
			{
				settings = new nHydrateSetting();
				settings.Load(connectionString);
			}
			return settings.History;

		}

		internal static string BuildConnectionString(string databaseName, string serverName, string userName, string password)
		{
			var connStr = new StringBuilder();
			connStr.Append("UID=" + userName + ";");
			connStr.Append("PWD=" + password + ";");
			connStr.Append("Database=" + databaseName + ";");
			connStr.Append("Server=" + serverName + ";");
			return connStr.ToString();
		}

		internal static string[] GetDatabaseNames(string connectString)
		{
			var databaseNames = new ArrayList();
			var conn = new MySql.Data.MySqlClient.MySqlConnection();
			MySqlDataReader databaseReader = null;
			MySqlDataReader existsReader = null;

			try
			{
				conn.ConnectionString = connectString;
				conn.Open();

				var cmdDatabases = new MySqlCommand();
				cmdDatabases.CommandText = "use [master] select name from sysdatabases";
				cmdDatabases.CommandType = System.Data.CommandType.Text;
				cmdDatabases.Connection = conn;
				databaseReader = cmdDatabases.ExecuteReader();
				while (databaseReader.Read())
				{
					databaseNames.Add(databaseReader["name"]);
				}
			}
			catch (Exception ex)
			{
				System.Diagnostics.Debug.WriteLine(ex.ToString());
				databaseNames.Clear();
			}
			finally
			{
				if (databaseReader != null)
					databaseReader.Close();
				if (conn != null)
					conn.Close();
			}

			var itemsToRemove = new ArrayList();
			foreach (string dbName in databaseNames)
			{
				try
				{
					conn.Open();
					var cmdUserExist = new MySqlCommand();
					cmdUserExist.CommandText = "use [" + dbName + "] select case when Permissions()&254=254 then 1 else 0 end as hasAccess";
					cmdUserExist.CommandType = System.Data.CommandType.Text;
					cmdUserExist.Connection = conn;
					existsReader = cmdUserExist.ExecuteReader();
					if (existsReader.Read())
					{
						try
						{
							if (int.Parse(existsReader["hasAccess"].ToString()) == 0)
							{
								itemsToRemove.Add(dbName);
							}
						}
						catch (Exception ex)
						{
							System.Diagnostics.Debug.WriteLine(ex.ToString());
						}
					}
				}
				catch (Exception ex)
				{
					System.Diagnostics.Debug.WriteLine(ex.ToString());
					itemsToRemove.Add(dbName);
				}
				finally
				{
					if (existsReader != null)
						existsReader.Close();
					if (conn != null)
						conn.Close();
				}
			}
			foreach (string removedItem in itemsToRemove)
			{
				databaseNames.Remove(removedItem);
			}

			return (string[])databaseNames.ToArray(typeof(string));
		}

		internal static bool HasCreatePermissions(string connectString)
		{
			bool returnVal = false;
			var conn = new MySql.Data.MySqlClient.MySqlConnection();
			MySqlDataReader existsReader = null;
			try
			{
				conn.ConnectionString = connectString;
				conn.Open();
				var cmdUserExist = new MySqlCommand();
				cmdUserExist.CommandText = "use [master] select case when Permissions()&1=1 then 1 else 0 end as hasAccess";
				cmdUserExist.CommandType = System.Data.CommandType.Text;
				cmdUserExist.Connection = conn;
				existsReader = cmdUserExist.ExecuteReader();
				if (existsReader.Read())
				{
					try
					{
						if (int.Parse(existsReader["hasAccess"].ToString()) == 1)
						{
							returnVal = true;
						}
					}
					catch (Exception ex)
					{
						System.Diagnostics.Debug.WriteLine(ex.ToString());
					}
				}
			}
			catch (Exception ex)
			{
				System.Diagnostics.Debug.WriteLine(ex.ToString());
			}
			finally
			{
				if (existsReader != null)
					existsReader.Close();
				if (conn != null)
					conn.Close();
			}
			return returnVal;
		}
		#endregion

		#region create database
		internal static void CreateDatabase(string connectString, string databaseName)
		{
			var conn = new MySql.Data.MySqlClient.MySqlConnection();
			try
			{
				conn.ConnectionString = connectString;
				conn.Open();
				var cmdCreateDb = new MySqlCommand();
				var collate = "%COLLATE%";
				if (!string.IsNullOrEmpty(collate)) collate = " COLLATE " + collate;
				cmdCreateDb.CommandText = "CREATE DATABASE " + databaseName + collate;
				cmdCreateDb.CommandType = System.Data.CommandType.Text;
				cmdCreateDb.Connection = conn;
				cmdCreateDb.ExecuteNonQuery();
			}
			catch { throw; }
			finally
			{
				if (conn != null)
					conn.Close();
			}
		}
		#endregion

		#region database table operations
		internal static void RemoveTable(string connectString, string tableName)
		{
			var conn = new MySql.Data.MySqlClient.MySqlConnection();
			try
			{
				conn.ConnectionString = connectString;
				conn.Open();
				var cmdCreateDb = new MySqlCommand();
				if (GetTableNamesAsArrayList(connectString).Contains(tableName))
				{
					cmdCreateDb.CommandText = SqlRemoveTable(tableName);
				}
				else
				{
					return;
				}
				cmdCreateDb.CommandType = System.Data.CommandType.Text;
				cmdCreateDb.Connection = conn;
				cmdCreateDb.ExecuteNonQuery();
			}
			catch (Exception ex)
			{
				throw ex;
			}
			finally
			{
				if (conn != null)
					conn.Close();
			}
		}

		internal static string[] GetTables(string connectString)
		{
			var databaseTables = GetTableNamesAsArrayList(connectString);
			return (string[])databaseTables.ToArray(typeof(string));
		}

		internal static ArrayList GetTableNamesAsArrayList(string connectString)
		{
			var databaseTables = new ArrayList();
			MySqlDataReader tableReader = null;
			var conn = new MySql.Data.MySqlClient.MySqlConnection();
			try
			{
				conn.ConnectionString = connectString;
				conn.Open();
				var cmdCreateDb = new MySqlCommand();
				cmdCreateDb.CommandText = "select name from sysobjects where xtype = 'U' and name <> 'dtproperties'";
				cmdCreateDb.CommandType = System.Data.CommandType.Text;
				cmdCreateDb.Connection = conn;
				tableReader = cmdCreateDb.ExecuteReader();
				while (tableReader.Read())
				{
					databaseTables.Add(tableReader.GetString(0));
				}
			}
			catch (Exception ex)
			{
				throw ex;
			}
			finally
			{
				if (tableReader != null)
					tableReader.Close();
				if (conn != null)
					conn.Close();
			}
			return databaseTables;
		}
		#endregion

		#region database column operations
		internal static DataSet GetTableColumns(string connectString, string tableName)
		{
			var conn = new MySqlConnection();
			var cmd = new MySqlCommand();
			var tableColumns = new DataSet();
			var da = new MySqlDataAdapter();

			try
			{
				conn.ConnectionString = connectString;
				cmd.CommandText = GetSqlColumnsForTable(tableName);
				cmd.CommandType = System.Data.CommandType.Text;
				cmd.Connection = conn;
				da.SelectCommand = cmd;
				da.Fill(tableColumns);
			}
			catch (Exception ex)
			{
				throw ex;
			}
			finally
			{
				if (conn != null)
					conn.Close();
			}
			return tableColumns;
		}

		public static bool HasLength(System.Data.SqlDbType dataType)
		{
			if (dataType == System.Data.SqlDbType.BigInt)
				return false;
			else if (dataType == System.Data.SqlDbType.Bit)
				return false;
			else if (dataType == System.Data.SqlDbType.DateTime)
				return false;
			else if (dataType == System.Data.SqlDbType.Decimal)
				return false;
			else if (dataType == System.Data.SqlDbType.Float)
				return false;
			else if (dataType == System.Data.SqlDbType.Image)
				return false;
			else if (dataType == System.Data.SqlDbType.Int)
				return false;
			else if (dataType == System.Data.SqlDbType.Money)
				return false;
			else if (dataType == System.Data.SqlDbType.Real)
				return false;
			else if (dataType == System.Data.SqlDbType.SmallDateTime)
				return false;
			else if (dataType == System.Data.SqlDbType.SmallInt)
				return false;
			else if (dataType == System.Data.SqlDbType.SmallMoney)
				return false;
			else if (dataType == System.Data.SqlDbType.Timestamp)
				return true;
			else if (dataType == System.Data.SqlDbType.TinyInt)
				return false;
			else if (dataType == System.Data.SqlDbType.UniqueIdentifier)
				return false;
			else
				return true;
		}

		#endregion

		#region extended property helpers
		internal static void UpdateDatabaseMetaProperty(string connectionString, string propertyName, string propertyValue)
		{
			var conn = new MySql.Data.MySqlClient.MySqlConnection();
			try
			{
				var settings = new nHydrateSetting();
				settings.Load(connectionString);
				switch (propertyName)
				{
					case "dbVersion":
						settings.dbVersion = propertyValue;
						break;
					case "LastUpdate":
						settings.LastUpdate = DateTime.Parse(propertyValue);
						break;
					case "ModelKey":
						settings.ModelKey = new Guid(propertyValue);
						break;
					case "History":
						settings.LoadHistory(propertyValue);
						break;
					default:
						throw new Exception("No property found!");
				}
				settings.Save(connectionString);
			}
			catch (Exception ex)
			{
				throw;
			}
			finally
			{
				if (conn != null)
					conn.Close();
			}

		}

		internal static string GetDatabaseMetaProperty(string connectionString, string propertyName)
		{
			var settings = new nHydrateSetting();
			settings.Load(connectionString);
			switch (propertyName)
			{
				case "dbVersion":
					return settings.dbVersion;
				case "LastUpdate":
					return settings.LastUpdate.ToString("yyyy-MM-dd HH:mm:ss");
				case "ModelKey":
					return settings.ModelKey.ToString();
				case "History":
					return settings.ToHistoryString();
				default:
					throw new Exception("No property found!");
			}
		}
		#endregion

		#region private sql statement builders

		public static List<string> GetEmbeddedScripts(string resourceFileName)
		{
			var retval = new List<string>();
			var tempFolder = string.Empty;
			var scripts = ReadSQLFileSectionsFromResource(resourceFileName);
			foreach (var sql in scripts)
			{
				retval.Add(sql);
			}
			return retval;
		}

		public static void RunEmbeddedFile(MySqlConnection connection, MySqlTransaction transaction, string resourceFileName)
		{
			RunEmbeddedFile(connection, transaction, resourceFileName, null);
		}

		public static void RunEmbeddedFile(MySqlConnection connection, MySqlTransaction transaction, string resourceFileName, List<KeyValuePair<Guid, string>> failedScripts)
		{
			RunEmbeddedFile(connection, transaction, resourceFileName, failedScripts, null);
		}

		public static void RunEmbeddedFile(MySqlConnection connection, MySqlTransaction transaction, string resourceFileName, List<KeyValuePair<Guid, string>> failedScripts, List<Guid> sucessOrderScripts)
		{
			var tempFolder = string.Empty;
			var scripts = ReadSQLFileSectionsFromResource(resourceFileName);
			System.Diagnostics.Debug.WriteLine(System.DateTime.Now.ToString("HH:mm:ss.ff") + " - Run embedded file: " + resourceFileName);
			foreach (var sql in scripts)
			{
				ExecuteSQL(connection, transaction, sql, failedScripts, sucessOrderScripts);
			}
		}

		internal static void ExecuteSQL(MySqlConnection connection, MySqlTransaction transaction, string sql)
		{
			ExecuteSQL(connection, transaction, sql, null);
		}

		internal static void ExecuteSQL(MySqlConnection connection, MySqlTransaction transaction, string sql, List<KeyValuePair<Guid, string>> failedScripts)
		{
			ExecuteSQL(connection, transaction, sql, failedScripts, null);
		}

		internal static void ExecuteSQL(MySqlConnection connection, MySqlTransaction transaction, string sql, List<KeyValuePair<Guid, string>> failedScripts, List<Guid> sucessOrderScripts)
		{
			var originalSQL = sql.Trim();
			sql = originalSQL;
			if (string.IsNullOrEmpty(sql)) return;

			#region Get Script Key
			var isBody = false;
			var lines = sql.Split(new char[] { '\n' }, StringSplitOptions.None).ToList();
			var key = Guid.NewGuid();
			var l = lines.FirstOrDefault(x => x.StartsWith("#MODELID: "));
			if (l != null)
			{
				lines.Remove(l);
				l = l.Replace("#MODELID:", string.Empty).Trim();
				sql = string.Join("\n", lines.ToArray()); //Remove the model key from the SQL before run
				//if (!Guid.TryParse(l, out key)) key = Guid.NewGuid();
			}
			else
			{
				l = lines.FirstOrDefault(x => x.StartsWith("#MODELID,BODY: "));
				if (l != null)
				{
					lines.Remove(l);
					l = l.Replace("#MODELID,BODY:", string.Empty).Trim();
					sql = string.Join("\n", lines.ToArray()); //Remove the model key from the SQL before run
					if (!Guid.TryParse(l, out key)) key = Guid.NewGuid();
					else isBody = true;
				}
			}
			#endregion
			if (string.IsNullOrEmpty(sql)) return;

			var command = new MySql.Data.MySqlClient.MySqlCommand(sql, connection);
			command.Transaction = transaction;
			command.CommandTimeout = Math.Max(300, connection.ConnectionTimeout);
			try
			{
				command.ExecuteNonQuery();
				if (sucessOrderScripts != null && isBody)
					sucessOrderScripts.Add(key);
				//Console.WriteLine(sql); //Alert user of what is running
			}
			catch (MySqlException sqlexp)
			{
				if ((sqlexp.Number == 1779) && sql.StartsWith("#PRIMARY KEY FOR TABLE"))
				{
					//Ignore this error
					return;
				}
				else if ((sqlexp.Number == 1781) && sql.StartsWith("#DEFAULTS FOR TABLE"))
				{
					//Ignore this error
					return;
				}
				else if (failedScripts != null)
				{
					//Ignore this error, we will re-process it
					failedScripts.Add(new KeyValuePair<Guid, string>(key, originalSQL));
					return;
				}
				else
					throw;
			}
			catch (Exception ex) { throw; }
		}

		public static string GetEmbeddedResource(string resourceFileName)
		{
			var retval = string.Empty;
			var sb = new StringBuilder();
			var asm = Assembly.GetExecutingAssembly();
			var manifestStream = asm.GetManifestResourceStream(resourceFileName);
			try
			{
				using (var sr = new System.IO.StreamReader(manifestStream))
				{
					retval = sr.ReadToEnd();
				}
			}
			catch { }
			finally
			{
				manifestStream.Close();
			}
			return retval;
		}

		public static string[] ReadSQLFileSectionsFromResource(string resourceFileName)
		{
			if (string.IsNullOrEmpty(resourceFileName)) return new string[] { };
			if (!resourceFileName.ToLower().EndsWith(".sql")) return new string[] { };

			var retval = new ArrayList();
			var sb = new StringBuilder();
			var asm = Assembly.GetExecutingAssembly();

			var manifestStream = asm.GetManifestResourceStream(resourceFileName);
			try
			{
				using (System.IO.StreamReader sr = new System.IO.StreamReader(manifestStream))
				{
					while (!sr.EndOfStream)
					{
						var lineText = sr.ReadLine();
						if (lineText.ToUpper().Trim() == "GO")
						{
							var s = sb.ToString();
							s = s.Trim();
							retval.Add(s);
							sb = new StringBuilder();
						}
						else
						{
							sb.AppendLine(lineText);
						}
					}
				}
			}
			catch { }
			finally
			{
				manifestStream.Close();
			}
			//Last string
			if (!string.IsNullOrEmpty(sb.ToString()))
				retval.Add(sb.ToString());

			return (string[])retval.ToArray(typeof(string));
		}

		private static string[] ReadSQLFileSectionsFromFile(string fileName)
		{
			var retval = new ArrayList();
			var sb = new StringBuilder();
			var asm = Assembly.GetExecutingAssembly();

			var manifestStream = File.OpenText(fileName);
			try
			{
				while (!manifestStream.EndOfStream)
				{
					var lineText = manifestStream.ReadLine();
					if (lineText.ToUpper().Trim() == "GO")
					{
						retval.Add(sb.ToString());
						sb = new StringBuilder();
					}
					else
					{
						sb.AppendLine(lineText);
					}
				}
			}
			catch { }
			finally
			{
				manifestStream.Close();
			}
			//Last string
			if (!string.IsNullOrEmpty(sb.ToString()))
				retval.Add(sb.ToString());

			return (string[])retval.ToArray(typeof(string));
		}

		private static string GetSqlColumnsForTable(string tableName)
		{
			var sb = new StringBuilder();
			sb.AppendLine("SELECT DISTINCT");
			sb.AppendLine("	colorder,");
			sb.AppendLine("	syscolumns.name,");
			sb.AppendLine("	case when primaryKey.xtype ='PK' then 'true' else 'false' end as isPrimaryKey, ");
			sb.AppendLine("	case when fk.fkey is null then 'false' else 'true' end as isForeignKey,");
			sb.AppendLine("	systypes.name as datatype,");
			sb.AppendLine("	syscolumns.length,");
			sb.AppendLine("	case when syscolumns.isnullable = 0 then 'false' else 'true' end as allowNull,");
			sb.AppendLine("	case when syscomments.text is null then '' else SUBSTRING ( syscomments.text , 2 , len(syscomments.text)-2 ) end as defaultValue,");
			sb.AppendLine("	case when syscolumns.autoval is null then 'false' else 'true' end as isIdentity");
			sb.AppendLine("FROM");
			sb.AppendLine("	sysobjects");
			sb.AppendLine("	inner join syscolumns on syscolumns.id = sysobjects.id");
			sb.AppendLine("	inner join systypes on systypes.xtype = syscolumns.xtype");
			sb.AppendLine("	left outer join sysindexkeys on sysindexkeys.id = syscolumns.id AND sysindexkeys.colid = syscolumns.colid");
			sb.AppendLine("	left outer join sys.indexes pk on  pk.id = sysindexkeys.id AND pk.indid = sysindexkeys.indid");
			sb.AppendLine("	left outer join sysobjects primaryKey on pk.name = primaryKey.name");
			sb.AppendLine("	left outer join sysforeignkeys fk on fk.fkeyid = syscolumns.id AND fk.fkey = syscolumns.colorder");
			sb.AppendLine("	left outer join sys.default_constraints ON syscolumns.cdefault = sys.default_constraints.parent_column_id ");
			sb.AppendLine("WHERE");
			sb.AppendLine("	sysobjects.name = '" + tableName + "' AND systypes.name <> 'sysname' order by [colorder]\n");
			return sb.ToString();
		}

		private static string GetSqlForRelationships(string tableName)
		{
			var sb = new StringBuilder();
			sb.Append("SELECT DISTINCT parent.name as Parent, child.name as Child, ");
			sb.Append("case when parent.name = '").Append(tableName).Append("' then 'parent' else 'child' end as rolePlayed, ");
			sb.Append("relation.name as constraintName, ");
			sb.Append("roleNameProvider.value as roleName ");
			sb.Append("FROM sysforeignkeys inner join sysobjects relation on constid = relation.id ");
			sb.Append("inner join sysobjects child on fkeyid = child.id inner join sysobjects parent on rkeyid = parent.id ");
			sb.Append("inner join sysproperties roleNameProvider on roleNameProvider.id = relation.id ");
			sb.Append("WHERE parent.name = '" + tableName + "' OR child.name='" + tableName + "'");
			return sb.ToString();
		}

		private static string GetSqlForForeignKeys(string parentTable, string childTable, string constraintName)
		{
			var sb = new StringBuilder();
			sb.Append(" DECLARE @FKeys TABLE ");
			sb.Append(" ( ");
			sb.Append(" parentTable [Varchar] (100) NOT NULL, ");
			sb.Append(" 	childTable [Varchar] (100) NOT NULL, ");
			sb.Append(" 	childColumn [Varchar] (100) NOT NULL, ");
			sb.Append(" 	constid int NOT NULL, ");
			sb.Append(" 	keyno smallint NOT NULL ");
			sb.Append(" ) ");
			sb.Append(" DECLARE @PKeys TABLE ");
			sb.Append(" ( ");
			sb.Append(" parentTable [Varchar] (100) NOT NULL, ");
			sb.Append(" childTable [Varchar] (100) NOT NULL, ");
			sb.Append(" parentColumn [Varchar] (100) NOT NULL, ");
			sb.Append(" constid int NOT NULL, ");
			sb.Append(" 	keyno smallint NOT NULL ");
			sb.Append(" ) ");
			sb.Append(" INSERT INTO @FKeys ");
			sb.Append(" SELECT DISTINCT ");
			sb.Append(" parent.name parentTable, ");
			sb.Append(" child.name childTable, ");
			sb.Append(" syscolumns.name as childColumn, ");
			sb.Append(" sysforeignkeys.constid, ");
			sb.Append(" sysforeignkeys.keyno ");
			sb.Append(" FROM ");
			sb.Append(" sysforeignkeys ");
			sb.Append(" inner join sysobjects child on fkeyid = child.id ");
			sb.Append(" inner join sysobjects parent on rkeyid = parent.id ");
			sb.Append(" inner join syscolumns on syscolumns.id = sysforeignkeys.fkeyid AND syscolumns.colorder = sysforeignkeys.fkey ");
			sb.Append(" INSERT INTO @PKeys ");
			sb.Append(" SELECT ");
			sb.Append(" parent.name parentTable, ");
			sb.Append(" child.name childTable, ");
			sb.Append(" syscolumns.name as parentColumn, ");
			sb.Append(" sysforeignkeys.constid, ");
			sb.Append(" sysforeignkeys.keyno ");
			sb.Append(" FROM ");
			sb.Append(" sysforeignkeys inner join sysobjects child on fkeyid = child.id ");
			sb.Append(" inner join sysobjects parent on rkeyid = parent.id ");
			sb.Append(" inner join syscolumns on syscolumns.id = sysforeignkeys.rkeyid AND syscolumns.colorder = sysforeignkeys.rkey ");
			sb.Append(" SELECT p.parentTable ,p.parentColumn, f.childTable, f.ChildColumn , so.name as roleName FROM @FKeys f INNER JOIN @PKeys p on f.constid=p.constID and f.keyno=p.keyno INNER JOIN sysobjects so on so.id = p.constid ");
			sb.Append("WHERE f.parentTable = '").Append(parentTable).Append("' AND f.childTable = '").Append(childTable).Append("'");
			sb.Append(" AND so.name = '" + constraintName + "'");
			sb.Append(" order by p.constid ");
			return sb.ToString();
		}

		private static string SqlRemoveTable(string tableName)
		{
			var sb = new StringBuilder();
			sb.AppendLine("DROP TABLE `" + tableName + "`;");
			return sb.ToString();
		}
		#endregion

	}

	internal class HistoryItem
	{
		public DateTime PublishDate { get; set; }
		public string Version { get; set; }
	}

	internal class nHydrateSetting
	{
		internal nHydrateSetting()
		{
			this.History = new List<HistoryItem>();
			this.IsLoaded = false;
			this.dbVersion = UpgradeInstaller._def_Version.ToString();
			this.LastUpdate = new DateTime(1980, 1, 1);
		}

		public bool IsLoaded { get; private set; }

		public void Load(string connectionString)
		{
			var conn = new MySql.Data.MySqlClient.MySqlConnection();
			try
			{
				conn.ConnectionString = connectionString;
				conn.Open();

				string databaseName = GetDatabaseName(connectionString);
				var da = new MySqlDataAdapter("SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = '[" + databaseName + "]' AND table_name = '[__nhydrateschema]';", conn);
				var ds = new DataSet();
				da.Fill(ds);
				if (ds.Tables[0].Rows.Count > 0 && int.Parse(ds.Tables[0].Rows[0][0].ToString()) == 1)
				{
					da = new MySqlDataAdapter("SELECT * FROM __nhydrateschema where [ModelKey] = '" + UpgradeInstaller.MODELKEY + "'", conn);
					ds = new DataSet();
					da.Fill(ds);
					var t = ds.Tables[0];
					if (t.Rows.Count > 0)
					{
						this.dbVersion = (string)t.Rows[0]["dbVersion"];
						this.LastUpdate = (DateTime)t.Rows[0]["LastUpdate"];
						this.ModelKey = (Guid)t.Rows[0]["ModelKey"];
						this.LoadHistory((string)t.Rows[0]["History"]);
						this.IsLoaded = true;
					}

					//There is an nHydrate table so empty or not we are finished
					return;
				}

			}
			catch (Exception ex)
			{
				throw;
			}
			finally
			{
				if (conn != null)
					conn.Close();
			}
		}

		private static string GetDatabaseName(string connectionString)
		{
			var arr = connectionString.Split(';');
			var o = arr.FirstOrDefault(x => x.ToLower().StartsWith("initial catalog="));
			if (string.IsNullOrEmpty(o)) return string.Empty;
			o = o.ToLower();
			o = o.Replace("initial catalog=", string.Empty);
			o = o.Replace(";", string.Empty).Trim();
			return o;
		}

		public string[] GetVersionUpdateScript()
		{
			var retval = new List<string>();

			var sb = new StringBuilder();
			sb.AppendLine("#CREATE THE VERSION TABLE IF NEED BE");
			sb.AppendLine("CREATE TABLE IF NOT EXISTS `__nhydrateschema` (");
			sb.AppendLine("`dbVersion` varchar (50) NOT NULL,");
			sb.AppendLine("`LastUpdate` datetime NOT NULL,");
			sb.AppendLine("`ModelKey` char (36) NOT NULL,");
			sb.AppendLine("`History` varchar (65000) NOT NULL,");
			sb.AppendLine("PRIMARY KEY (`ModelKey`)");
			sb.AppendLine(")");
			retval.Add(sb.ToString());
			sb = new StringBuilder();

			//Enter data
			sb.AppendLine("#ADD/UPDATE THE VERSION METADATA FOR THIS MODEL");
			sb.AppendLine("REPLACE INTO `__nhydrateschema`");
			sb.AppendLine("SET `dbVersion`='" + this.dbVersion + "', `LastUpdate`='" + this.LastUpdate.ToString("yyyy-MM-dd HH:mm:ss") + "', `History`='" + this.ToHistoryString() + "', `ModelKey` = '" + this.ModelKey.ToString() + "'");
			retval.Add(sb.ToString());

			return retval.ToArray();
		}

		public bool Save(string connectionString)
		{
			var conn = new MySql.Data.MySqlClient.MySqlConnection();
			try
			{
				conn.ConnectionString = connectionString;
				conn.Open();
				var arr = GetVersionUpdateScript();
				var command = new MySqlCommand(arr[0], conn);
				command.ExecuteNonQuery();

				command = new MySqlCommand(arr[1], conn);
				command.ExecuteNonQuery();

				return true;
			}
			catch (Exception ex)
			{
				return false;
				throw;
			}
			finally
			{
				if (conn != null)
					conn.Close();
			}

		}

		public string dbVersion { get; set; }
		public List<HistoryItem> History { get; private set; }
		public DateTime LastUpdate { get; set; }
		public Guid ModelKey { get; set; }

		public void LoadHistory(string text)
		{
			this.History.Clear();
			if (!string.IsNullOrEmpty(text))
			{
				foreach (string dataRow in text.Split('^'))
				{
					string[] data = dataRow.Split('|');
					if (data.Length == 2)
					{
						try
						{
							this.History.Add(new HistoryItem() { PublishDate = DateTime.ParseExact(data[0], "yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture), Version = data[1] });
						}
						catch { }
					}
				}
			}
		}

		public string ToHistoryString()
		{
			var sb = new StringBuilder();
			foreach (var o in this.History)
			{
				sb.Append(o.PublishDate.ToString("yyyy-MM-dd HH:mm:ss") + "|" + o.Version + "^");
			}
			var s = sb.ToString();
			if (s.Length > 0) s = s.TrimEnd(new char[] { '^' });
			return s;
		}
	}

}
#pragma warning restore 0168